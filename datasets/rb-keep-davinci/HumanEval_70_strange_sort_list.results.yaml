name: HumanEval_70_strange_sort_list
language: ruby
results:
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpax409epe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpax409epe.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.006789 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.30 tests/s, 147.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.partition.with_index { |_, i|\
    \ i.even? }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr36aq_fo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr36aq_fo.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.81 tests/s, 226.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfw3bsoux\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfw3bsoux.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.33 tests/s, 215.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6dub4q0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6dub4q0.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.52 tests/s, 228.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_ni4il5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_ni4il5.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.17 tests/s, 282.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6j1a24h2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6j1a24h2.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.21 tests/s, 283.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5x122sv9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5x122sv9.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.010006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.94 tests/s, 99.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuylfcr1i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuylfcr1i.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.52 tests/s, 222.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbgh0y6lf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbgh0y6lf.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.026411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.86 tests/s, 37.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort_by.with_index { |_, i| i.even?\
    \ ? lst.min : lst.max }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7a0xwf32\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7a0xwf32.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.014664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.19 tests/s, 68.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpef8pzqm2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpef8pzqm2.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.12 tests/s, 296.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0kpctean\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0kpctean.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.36 tests/s, 220.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxn9rqi98\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxn9rqi98.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.06 tests/s, 224.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteximncj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpteximncj.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.12 tests/s, 291.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2j1pfi4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2j1pfi4.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.028427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.18 tests/s, 35.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4y90ls7r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4y90ls7r.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.25 tests/s, 284.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.map.with_index { |_, i| i.even? ? lst.shift : lst.pop }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6x577om\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6x577om.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.007101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.83 tests/s, 140.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp86kxy0u5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp86kxy0u5.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.39 tests/s, 221.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps92pownt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps92pownt.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.96 tests/s, 279.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.insert(1, lst.pop)\n  lst\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6j5n2nht\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6j5n2nht.rb:19:in\
    \ `test_strange_sort_list'\n     16:   def test_strange_sort_list\n     17:  \
    \   candidate = method(:strange_sort_list)\n     18:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 19:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     20:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     21:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     22:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 7, 8]>\n\ndiff:\n? [5, 9, 6, 7, 8, 7]\n===============================================================================\n\
    \nFinished in 0.00469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.22 tests/s, 426.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  sorted = []\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(l\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ibajgri.rb:61: syntax\
    \ error, unexpected local variable or method, expecting ')'\nrequire 'test/unit'\n\
    ^~~~~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ibajgri.rb:62: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ibajgri.rb:75: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj0p2ck_3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj0p2ck_3.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.017475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.22 tests/s, 57.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowaqsd8o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowaqsd8o.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.037091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.96 tests/s, 26.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort_by.with_index { |_, i| [i.even?\
    \ ? :min : :max] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppzh6dkug\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppzh6dkug.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[2, 4, 1, 3]>\n\ndiff:\n? [2, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.005421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.47 tests/s, 184.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5iqq319_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5iqq319_.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.005488 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.22 tests/s, 182.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.partition.with_index { |_, i|\
    \ i.even? }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3c2prfx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3c2prfx.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.030312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.99 tests/s, 32.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkcn5rje\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzkcn5rje.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.006919 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.53 tests/s, 144.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  until lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl37g9ksk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl37g9ksk.rb:23:in\
    \ `test_strange_sort_list'\n     20:   def test_strange_sort_list\n     21:  \
    \   candidate = method(:strange_sort_list)\n     22:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 23:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     24:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     25:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     26:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8, 7, nil]\n===============================================================================\n\
    \nFinished in 0.004961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.57 tests/s, 403.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdpb7zv20\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdpb7zv20.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.97 tests/s, 264.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9wrde96d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9wrde96d.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.99 tests/s, 220.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.length > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3gj2xay\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3gj2xay.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.005357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.67 tests/s, 186.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkz1zi7g5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkz1zi7g5.rb:16:in\
    \ `test_strange_sort_list'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_strange_sort_list\n     15:     candidate = method(:strange_sort_list)\n\
    \  => 16:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     18:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     19:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.005592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.83 tests/s, 178.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91z_80ir\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91z_80ir.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.14 tests/s, 292.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq0w6f7q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq0w6f7q.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.40 tests/s, 276.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1a0g8qv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1a0g8qv.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.005446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.62 tests/s, 183.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_9jg54d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_9jg54d.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.037417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.73 tests/s, 26.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqw6pvhc_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqw6pvhc_.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.50 tests/s, 274.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8vj0gs4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8vj0gs4.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.011351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.10 tests/s, 88.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5zru8jo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5zru8jo.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.89 tests/s, 225.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ewk8wfd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ewk8wfd.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.10 tests/s, 218.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8be3sf7_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8be3sf7_.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004452 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.62 tests/s, 224.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwr1xqymk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwr1xqymk.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.27 tests/s, 224.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5aum8f_g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5aum8f_g.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.63 tests/s, 225.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5ykx8px\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5ykx8px.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.99 tests/s, 220.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2v6fktwl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2v6fktwl.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.93 tests/s, 283.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1g6o6v4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1g6o6v4.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.85 tests/s, 281.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo3q2vpj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo3q2vpj.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.35 tests/s, 210.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuv_pr0m6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuv_pr0m6.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.006632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.78 tests/s, 150.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpip9t03l2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpip9t03l2.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004905 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.87 tests/s, 203.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v2evnpj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v2evnpj.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.48 tests/s, 225.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_lwfqlat\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_lwfqlat.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.006012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.33 tests/s, 166.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjwckmw3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjwckmw3.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.00 tests/s, 212.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr8n2l2du\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr8n2l2du.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.008096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.52 tests/s, 123.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bjjz63t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5bjjz63t.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.020153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.62 tests/s, 49.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\
    \ if lst.length > 0\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyul8adn5\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 36290.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  until lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6s5zfgg2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6s5zfgg2.rb:23:in\
    \ `test_strange_sort_list'\n     20:   def test_strange_sort_list\n     21:  \
    \   candidate = method(:strange_sort_list)\n     22:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 23:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     24:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     25:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     26:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8, 7, nil]\n===============================================================================\n\
    \nFinished in 0.015029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.54 tests/s, 133.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqki7ewfi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqki7ewfi.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.026134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.26 tests/s, 38.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6pmcjoe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6pmcjoe.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.94 tests/s, 287.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1fsqlm1v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1fsqlm1v.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.29 tests/s, 281.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3k1q8rv6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3k1q8rv6.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.13 tests/s, 201.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyp_cdrq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyp_cdrq.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.17 tests/s, 225.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rlx0lbu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rlx0lbu.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.006373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.91 tests/s, 156.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort_by.with_index { |e, i| [i.even?\
    \ ? e : -e, i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqthc5yj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqthc5yj.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[4, 2, 1, 3]>\n\ndiff:\n? [4, 2, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.33 tests/s, 275.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04y_ed41\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04y_ed41.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.005582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.15 tests/s, 179.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoejndpjd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoejndpjd.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003616 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.55 tests/s, 276.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.map.with_index { |_, i| i.even?\
    \ ? lst.shift : lst.pop }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelxty68z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelxty68z.rb:18:in\
    \ `test_strange_sort_list'\n     15:     assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n     16:     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6,\
    \ 7, 8, 9]))\n     17:     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2,\
    \ 3, 4, 5]))\n  => 18:     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n     19:     assert_equal([5, 5, 5, 5], candidate.call([5,\
    \ 5, 5, 5]))\n     20:     assert_equal([], candidate.call([]))\n     21:    \
    \ assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
    \ 8]))\n<[1, 9, 5, 8, 6, 7]> expected but was\n<[5, 1, 6, 9, 7, 8]>\n\ndiff:\n\
    ? [   1,    9, 5, 8, 6, 7]\n?  5,    6,    7          \n?  +++   +++   ?   ------\
    \ \n===============================================================================\n\
    \nFinished in 0.005018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.28 tests/s, 797.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinvx_oxc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpinvx_oxc.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004405 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.01 tests/s, 227.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3re755qk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3re755qk.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004675 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.90 tests/s, 213.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.flatten.reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzw8sb4e6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzw8sb4e6.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[4, 3, 2, 1]>\n\ndiff:\n? [1, 4,    2, 3]\n?  \
    \      3,    1 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.039987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.01 tests/s, 25.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmperi2nye5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmperi2nye5.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.041031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.37 tests/s, 24.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy53g0hf6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy53g0hf6.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004795 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.55 tests/s, 208.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  sorted = []\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(l\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpak4cus84.rb:61: syntax\
    \ error, unexpected local variable or method, expecting ')'\nrequire 'test/unit'\n\
    ^~~~~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpak4cus84.rb:62: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpak4cus84.rb:75: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuzg2awlc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuzg2awlc.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.31 tests/s, 242.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs3iyqlm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphs3iyqlm.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.09 tests/s, 221.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvmtv9fq3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvmtv9fq3.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.026436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.83 tests/s, 37.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ojuh807\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ojuh807.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.06 tests/s, 281.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpes1vhbpi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpes1vhbpi.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.00504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.41 tests/s, 198.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf060hx_i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf060hx_i.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.54 tests/s, 203.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!.reverse!\n\
    \  lst.each_with_index.map { |e, i| i.even? ? e : lst.pop }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvpjc1l76\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvpjc1l76.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[4, 1, 2]>\n\ndiff:\n? [4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.009051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.49 tests/s, 110.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmhrsxwm6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmhrsxwm6.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.17 tests/s, 210.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnaw64olp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnaw64olp.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.005343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.16 tests/s, 187.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxl_wmr3u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxl_wmr3u.rb:16:in\
    \ `test_strange_sort_list'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_strange_sort_list\n     15:     candidate = method(:strange_sort_list)\n\
    \  => 16:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     18:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     19:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.005121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.27 tests/s, 195.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvydeb713\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvydeb713.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.00347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.18 tests/s, 288.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_8jfv6w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_8jfv6w.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.35 tests/s, 288.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx_q_5m_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx_q_5m_.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.50 tests/s, 280.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  res = []\n  while lst.size > 1\n    res << lst.shift\n    res << lst.pop\n\
    \  end\n  res << lst.shift\n  res\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhzx9zzl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhzx9zzl.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.88 tests/s, 200.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1knuwwb1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1knuwwb1.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.17 tests/s, 282.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpron9fi_l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpron9fi_l.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.16 tests/s, 277.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1c342yo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1c342yo.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.73 tests/s, 229.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeekpsnc2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeekpsnc2.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.024411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.97 tests/s, 40.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5sfwkfm2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5sfwkfm2.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.30 tests/s, 226.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  (lst.size / 2).times do |i|\n    lst.insert(2 * i + 1, lst.pop)\n  end\n  lst\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7mh5tq0o\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 9 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 37190.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngcf7tp9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpngcf7tp9.rb:16:in\
    \ `test_strange_sort_list'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_strange_sort_list\n     15:     candidate = method(:strange_sort_list)\n\
    \  => 16:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     18:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     19:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.006138 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.92 tests/s, 162.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.reverse.each_slice(2).flat_map(&:reverse)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6g3yvra8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6g3yvra8.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.005034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.65 tests/s, 198.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2u_z36o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2u_z36o.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.27 tests/s, 264.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  sorted = []\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted << lst.min\n  lst.delete(lst.min)\n  sorted << lst.max\n  lst.delete(lst.max)\n\
    \  sorted\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnv0q6dpj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnv0q6dpj.rb:26:in\
    \ `test_strange_sort_list'\n     23:   def test_strange_sort_list\n     24:  \
    \   candidate = method(:strange_sort_list)\n     25:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 26:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     27:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     28:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     29:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8]>\n\ndiff:\n? [5, 9, 6, 8, 7]\n===============================================================================\n\
    \nFinished in 0.004507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.88 tests/s, 443.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_xtodkss\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_xtodkss.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.005873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.27 tests/s, 170.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcefygzi3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcefygzi3.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.41 tests/s, 228.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_with_index.map do |_, i|\n    if i.even?\n      lst.shift\n    else\n\
    \      lst.pop\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5arutaen\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5arutaen.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.004205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.81 tests/s, 237.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswynl7ew\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswynl7ew.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.011517 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.83 tests/s, 86.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.partition.with_index { |_, i|\
    \ i.even? }.flatten\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsd3j2tld\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsd3j2tld.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.22 tests/s, 227.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.unshift(lst.pop)\n  lst\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1p6bzd2w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1p6bzd2w.rb:18:in\
    \ `test_strange_sort_list'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_strange_sort_list\n     17:     candidate = method(:strange_sort_list)\n\
    \  => 18:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     19:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     20:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     21:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[4, 1, 2, 3]>\n\ndiff:\n? [4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.004945 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.22 tests/s, 202.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7pbynn9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7pbynn9.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003731 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.02 tests/s, 268.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjyds2zil\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjyds2zil.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.68 tests/s, 221.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2n86x39r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2n86x39r.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.006088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.26 tests/s, 164.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolhasxnk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolhasxnk.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.29 tests/s, 291.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.pop\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp5d5qgw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp5d5qgw.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.31 tests/s, 213.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphe9ivf3n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphe9ivf3n.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004571 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.77 tests/s, 218.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcj8w6z_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcj8w6z_.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.10 tests/s, 275.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcb5cm7kh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcb5cm7kh.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.01 tests/s, 276.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfq_m77t6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfq_m77t6.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.45 tests/s, 286.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkaesstq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkaesstq.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003682 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.59 tests/s, 271.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.flatten.reverse\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9d2kbc94\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9d2kbc94.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[4, 3, 2, 1]>\n\ndiff:\n? [1, 4,    2, 3]\n?  \
    \      3,    1 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.029533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.86 tests/s, 33.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxceipqwo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxceipqwo.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.02 tests/s, 279.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcq01gjta\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcq01gjta.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.31 tests/s, 223.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kebd8sn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kebd8sn.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.43 tests/s, 225.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbn5_0a0_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbn5_0a0_.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.036301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.55 tests/s, 27.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.map.with_index do |_, i|\n    i.even? ? lst.shift : lst.pop\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhguc0hz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhguc0hz.rb:19:in\
    \ `test_strange_sort_list'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_strange_sort_list\n     18:     candidate = method(:strange_sort_list)\n\
    \  => 19:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     20:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     21:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     22:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 290.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.unshift(lst.pop)\n  lst\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vh3ozoe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vh3ozoe.rb:18:in\
    \ `test_strange_sort_list'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_strange_sort_list\n     17:     candidate = method(:strange_sort_list)\n\
    \  => 18:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     19:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     20:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     21:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[4, 1, 2, 3]>\n\ndiff:\n? [4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.003512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.74 tests/s, 284.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  until lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsr_b9q8r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsr_b9q8r.rb:23:in\
    \ `test_strange_sort_list'\n     20:   def test_strange_sort_list\n     21:  \
    \   candidate = method(:strange_sort_list)\n     22:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 23:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     24:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     25:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     26:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8, 7, nil]\n===============================================================================\n\
    \nFinished in 0.008797 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.68 tests/s, 227.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpopfdhe2p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpopfdhe2p.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.41 tests/s, 284.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpunqg96cx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpunqg96cx.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004498 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.32 tests/s, 222.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtyp8nug\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtyp8nug.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.014194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.45 tests/s, 70.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm03njth5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm03njth5.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.71 tests/s, 263.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlfip256\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlfip256.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.76 tests/s, 269.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd21t8ye4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd21t8ye4.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.018523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.99 tests/s, 53.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1x0dzh8a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1x0dzh8a.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.005494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.02 tests/s, 182.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpup0t6y5b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpup0t6y5b.rb:23:in\
    \ `test_strange_sort_list'\n     20:   def test_strange_sort_list\n     21:  \
    \   candidate = method(:strange_sort_list)\n     22:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 23:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     24:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     25:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     26:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8, 7, nil]\n===============================================================================\n\
    \nFinished in 0.006504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.75 tests/s, 307.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.map.with_index { |_, i| i.even? ? lst.shift : lst.pop }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposovq7o0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposovq7o0.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.005183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.94 tests/s, 192.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppekwmz0m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppekwmz0m.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.03421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    29.23 tests/s, 29.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkepl3fu7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkepl3fu7.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.012366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    80.87 tests/s, 80.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten.compact\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe9cdatf3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe9cdatf3.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.14 tests/s, 226.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while !lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1j2kpg0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1j2kpg0.rb:23:in\
    \ `test_strange_sort_list'\n     20:   def test_strange_sort_list\n     21:  \
    \   candidate = method(:strange_sort_list)\n     22:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 23:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     24:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     25:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     26:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8, 7, nil]\n===============================================================================\n\
    \nFinished in 0.011623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.04 tests/s, 172.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm8pwifql\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm8pwifql.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.005986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.06 tests/s, 167.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.insert(1, lst.pop) until lst.size == 1\n  lst\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: b'Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4stiwa6m\nStarted'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps65u18et\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps65u18et.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.01 tests/s, 201.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.unshift(lst.pop)\n  lst\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwzv6m4q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwzv6m4q.rb:18:in\
    \ `test_strange_sort_list'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_strange_sort_list\n     17:     candidate = method(:strange_sort_list)\n\
    \  => 18:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     19:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     20:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     21:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[4, 1, 2, 3]>\n\ndiff:\n? [4, 1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.007996 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.06 tests/s, 125.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpor04o792\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpor04o792.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.01108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.25 tests/s, 90.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpea6rb_9e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpea6rb_9e.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.013613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.46 tests/s, 73.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvceq1003\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvceq1003.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.57 tests/s, 248.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1zgtv3w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1zgtv3w.rb:23:in\
    \ `test_strange_sort_list'\n     20:   def test_strange_sort_list\n     21:  \
    \   candidate = method(:strange_sort_list)\n     22:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 23:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     24:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     25:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     26:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8, 7, nil]\n===============================================================================\n\
    \nFinished in 0.004643 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.38 tests/s, 430.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.partition.with_index { |_, i| i.even? }.flatten\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphy0mbrz_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphy0mbrz_.rb:17:in\
    \ `test_strange_sort_list'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_strange_sort_list\n     16:     candidate = method(:strange_sort_list)\n\
    \  => 17:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     18:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     19:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     20:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.015156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.98 tests/s, 65.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpju5oeud5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpju5oeud5.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.011887 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    84.13 tests/s, 84.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6fjrpk7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz6fjrpk7.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004798 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.42 tests/s, 208.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiqpkzgyl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiqpkzgyl.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.006181 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.79 tests/s, 161.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmuq_bpq9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmuq_bpq9.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.010318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.92 tests/s, 96.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjspl23kr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjspl23kr.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.60 tests/s, 289.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfsrh6eig\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfsrh6eig.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.007938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.98 tests/s, 125.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswvb2y9f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpswvb2y9f.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.010888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.84 tests/s, 91.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpdqk8hp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpdqk8hp.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003462 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.85 tests/s, 288.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpye0rfx_f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpye0rfx_f.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.36 tests/s, 214.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort_by.with_index { |_, i| i.even?\
    \ ? lst.min : lst.max }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ivq0qqj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ivq0qqj.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.009608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.08 tests/s, 104.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjvcn2loo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjvcn2loo.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.04 tests/s, 286.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl0ztimwx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl0ztimwx.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.00443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.73 tests/s, 225.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2p7pe5kb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2p7pe5kb.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.85 tests/s, 283.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpetfmubqa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpetfmubqa.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003454 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.52 tests/s, 289.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3lo26wz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj3lo26wz.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.005089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.50 tests/s, 196.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphxzqu9z_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphxzqu9z_.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.00348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.36 tests/s, 287.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ogqz8_l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ogqz8_l.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.00348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.36 tests/s, 287.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpleqvbby3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpleqvbby3.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.006024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.00 tests/s, 166.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.unshift(lst.pop) until lst.length == 1\n  lst\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n   \
    \ candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: b'Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwvti6lu\nStarted'
  stderr: None
  exit_code: -1
  status: Timeout
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8c8a4qc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8c8a4qc.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.007044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.96 tests/s, 141.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxranxblc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxranxblc.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.07 tests/s, 209.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwbh57u9i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwbh57u9i.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.98 tests/s, 280.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_xcmrfb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps_xcmrfb.rb:23:in\
    \ `test_strange_sort_list'\n     20:   def test_strange_sort_list\n     21:  \
    \   candidate = method(:strange_sort_list)\n     22:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 23:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     24:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     25:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     26:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8, 7, nil]\n===============================================================================\n\
    \nFinished in 0.004667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.27 tests/s, 428.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplgjt8ay6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplgjt8ay6.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.72 tests/s, 279.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkdgxxu2v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkdgxxu2v.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.005227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.31 tests/s, 191.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa2y_2409\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa2y_2409.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.008515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.44 tests/s, 117.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rsekrvh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3rsekrvh.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.00353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.29 tests/s, 283.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbd65bwue\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbd65bwue.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.80 tests/s, 285.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbsac64ir\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbsac64ir.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.06 tests/s, 285.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbsxs4ze\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbsxs4ze.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.00406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.31 tests/s, 246.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while !lst.empty?\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1_o22_n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1_o22_n.rb:23:in\
    \ `test_strange_sort_list'\n     20:   def test_strange_sort_list\n     21:  \
    \   candidate = method(:strange_sort_list)\n     22:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 23:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     24:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     25:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     26:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8, 7, nil]\n===============================================================================\n\
    \nFinished in 0.004296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.77 tests/s, 465.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.length > 0\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n  \
    \  assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk4xnp4be\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk4xnp4be.rb:23:in\
    \ `test_strange_sort_list'\n     20:   def test_strange_sort_list\n     21:  \
    \   candidate = method(:strange_sort_list)\n     22:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 23:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     24:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     25:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     26:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n<[5, 9, 6, 8, 7]> expected but was\n<[5,\
    \ 9, 6, 8, 7, nil]>\n\ndiff:\n? [5, 9, 6, 8, 7, nil]\n===============================================================================\n\
    \nFinished in 0.004657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.73 tests/s, 429.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf7m01_95\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf7m01_95.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.03 tests/s, 208.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1q438tvk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1q438tvk.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.005879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.10 tests/s, 170.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  while lst.size > 0\n    result << lst.min\n    lst.delete_at(lst.index(lst.min))\n\
    \    result << lst.max\n    lst.delete_at(lst.index(lst.max))\n  end\n  result\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz2woxnsg\n\
    Started\nE\n===============================================================================\n\
    Error: test_strange_sort_list(TestHumanEval): TypeError: no implicit conversion\
    \ from nil to integer\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz2woxnsg.rb:15:in\
    \ `delete_at'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz2woxnsg.rb:15:in\
    \ `strange_sort_list'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz2woxnsg.rb:24:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz2woxnsg.rb:24:in\
    \ `test_strange_sort_list'\n     21:   def test_strange_sort_list\n     22:  \
    \   candidate = method(:strange_sort_list)\n     23:     assert_equal([1, 4, 2,\
    \ 3], candidate.call([1, 2, 3, 4]))\n  => 24:     assert_equal([5, 9, 6, 8, 7],\
    \ candidate.call([5, 6, 7, 8, 9]))\n     25:     assert_equal([1, 5, 2, 4, 3],\
    \ candidate.call([1, 2, 3, 4, 5]))\n     26:     assert_equal([1, 9, 5, 8, 6,\
    \ 7], candidate.call([5, 6, 7, 8, 9, 1]))\n     27:     assert_equal([5, 5, 5,\
    \ 5], candidate.call([5, 5, 5, 5]))\n===============================================================================\n\
    \nFinished in 0.000624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1602.56 tests/s, 1602.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojrv6a_l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojrv6a_l.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.004122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.60 tests/s, 242.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xdhi5qx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xdhi5qx.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.85 tests/s, 205.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlaj42zz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdlaj42zz.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.00433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.95 tests/s, 230.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprh6j9sz7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprh6j9sz7.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.94 tests/s, 289.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8yhiihwb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8yhiihwb.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.00457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.82 tests/s, 218.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1_nkku2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1_nkku2.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.00931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.41 tests/s, 107.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppk0kak9u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppk0kak9u.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.017406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.45 tests/s, 57.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmpsdjscp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmpsdjscp.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.02238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.68 tests/s, 44.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  result = []\n\
    \  lst.sort!\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3fxus2kk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3fxus2kk.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.29 tests/s, 221.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzxino70\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzxino70.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.008641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.73 tests/s, 115.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwkaloypx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwkaloypx.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.09 tests/s, 267.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.map.with_index do |_, i|\n    i.even? ? lst.shift : lst.pop\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2437goe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2437goe.rb:19:in\
    \ `test_strange_sort_list'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_strange_sort_list\n     18:     candidate = method(:strange_sort_list)\n\
    \  => 19:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     20:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     21:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     22:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n===============================================================================\n\
    \nFinished in 0.005611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.22 tests/s, 178.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp988udyg5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp988udyg5.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.38 tests/s, 225.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmr9q1ubg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmr9q1ubg.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.88 tests/s, 279.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten.compact\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtnwgj4g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtnwgj4g.rb:16:in\
    \ `test_strange_sort_list'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_strange_sort_list\n     15:     candidate = method(:strange_sort_list)\n\
    \  => 16:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     18:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     19:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 3, 2, 4]>\n\ndiff:\n? [1, 4, 2, 3]\n?     3\
    \     4 \n?     ?     ? \n===============================================================================\n\
    \nFinished in 0.004187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    238.83 tests/s, 238.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_strange_sort_list\n    candidate = method(:strange_sort_list)\n\
    \    assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n    assert_equal([5,\
    \ 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n    assert_equal([1, 5, 2, 4,\
    \ 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5,\
    \ 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5, 5], candidate.call([5, 5, 5, 5]))\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 8, 2, 7, 3, 6,\
    \ 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n    assert_equal([-5, 5, -5,\
    \ 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111],\
    \ candidate.call([111111]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptao45nzp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptao45nzp.rb:23:in\
    \ `test_strange_sort_list'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_strange_sort_list\n     22:     candidate = method(:strange_sort_list)\n\
    \  => 23:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     24:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     25:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     26:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[1, 4, 2, 3, nil]>\n\ndiff:\n? [1, 4, 2, 3, nil]\n\
    ===============================================================================\n\
    \nFinished in 0.004567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.96 tests/s, 218.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_lycsryf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_lycsryf.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.85 tests/s, 281.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1ugdg6f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1ugdg6f.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.96 tests/s, 279.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpndaryjh4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpndaryjh4.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.19 tests/s, 290.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwphai4wr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwphai4wr.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.51 tests/s, 295.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprw25vyl7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprw25vyl7.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.27 tests/s, 297.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjq6954fk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjq6954fk.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.66 tests/s, 301.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given list of integers, return list in strange order.\n# Strange sorting,\
    \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
    \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
    \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
    \ == []\ndef strange_sort_list(lst)\n  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
    \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
    \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
    \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5,\
    \ 5, 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6,\
    \ 7, 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2,\
    \ 2, 2, 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3xnhiut\n\
    Started\nF\n===============================================================================\n\
    Failure: test_strange_sort_list(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3xnhiut.rb:15:in\
    \ `test_strange_sort_list'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_strange_sort_list\n     14:     candidate = method(:strange_sort_list)\n\
    \  => 15:     assert_equal([1, 4, 2, 3], candidate.call([1, 2, 3, 4]))\n     16:\
    \     assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n     17:\
    \     assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n     18:\
    \     assert_equal([1, 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n<[1,\
    \ 4, 2, 3]> expected but was\n<[3, 4, 1, 2]>\n\ndiff:\n? [3, 4, 1, 4, 2, 3]\n\
    ===============================================================================\n\
    \nFinished in 0.003233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.31 tests/s, 309.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
