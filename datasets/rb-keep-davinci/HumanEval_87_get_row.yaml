name: HumanEval_87_get_row
language: ruby
prompt: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return\
  \ list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate\
  \ - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending\
  \ order.\n# Also, sort coordinates of the row by columns in descending order.\n\
  # Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n# [1,2,3,4,5,1]\n\
  # ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([], 1) == []\n# get_row([[],\
  \ [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
  \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
  \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5,\
  \ 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0,\
  \ 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6,\
  \ 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
  \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
  \ [1, 2, 3]], 3))\n  end\nend\n"
completions: ["  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |el, j|\n      [i, j] if el == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |column, column_index|\n      [row_index, column_index]\
    \ if column == x\n    end\n  end.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ do |elem|\n    [elem[0], -elem[1]]\n  end\nend", "  # your code here\nend",
  "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |col, col_index|\n      result << [row_index, col_index]\
    \ if col == x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend",
  "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do |col,\
    \ col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map do |row, i|\n \
    \   row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |a, b| [a, -b] }\nend", "  result = []\n \
    \ lst.each_with_index do |row, row_index|\n    row.each_with_index do |column,\
    \ column_index|\n      result << [row_index, column_index] if column == x\n  \
    \  end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend", "  result\
    \ = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index do\
    \ |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a, b|\
    \ [a, -b] }\nend", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend", "  lst.each_with_index.map { |row, row_index|\n\
    \    row.each_with_index.map { |column, column_index|\n      [row_index, column_index]\
    \ if column == x\n    }\n  }.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem,\
    \ j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by {\
    \ |elem| [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map { |row, i|\n\
    \    row.each_with_index.map { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |el, j|\n      result << [i, j] if el == x\n\
    \    end\n  end\n  result.sort_by { |el| [el[0], -el[1]] }\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map do |row, row_index|\n \
    \   row.each_with_index.map do |item, item_index|\n      [row_index, item_index]\
    \ if item == x\n    end\n  end.flatten(1).compact.sort_by { |row, _| row }.map\
    \ do |row, item|\n    [row, item].sort_by { |_, item| -item }\n  end\nend", " \
    \ result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem,\
    \ j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by {\
    \ |elem| [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend", "  lst.each_with_index.map do |row, row_index|\n \
    \   row.each_with_index.map do |item, item_index|\n      [row_index, item_index]\
    \ if item == x\n    end\n  end.flatten(1).compact.sort_by { |row, _| row }.map\
    \ do |row, item|\n    [row, item].sort.reverse\n  end\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |a, b| [a, -b] }\nend", " \
    \ lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if elem ==\
    \ x\n    end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\nend", " \
    \ lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  result =\
    \ []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem, j|\n\
    \      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by { |elem|\
    \ [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |i, j| [i, -j] }\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by { |i, j| [i,\
    \ -j] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map {\
    \ |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\n\
    end", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, column_index|\n      result << [row_index, column_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do |column,\
    \ column_index|\n      [row_index, column_index] if column == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if\
    \ elem == x\n    end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |el, j|\n      result << [i, j] if el == x\n    end\n  end\n  result.sort_by\
    \ { |x, y| [x, -y] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |item, col_index|\n      result << [row_index, col_index]\
    \ if item == x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", " \
    \ result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem,\
    \ j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by {\
    \ |elem| [elem[0], -elem[1]] }\nend", "  result = []\n  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if elem\
    \ == x\n    end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\nend",
  "  res = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |el,\
    \ j|\n      res << [i, j] if el == x\n    end\n  end\n  res.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |element, column_index|\n      result << [row_index,\
    \ column_index] if element == x\n    end\n  end\n  result.sort_by { |row, column|\
    \ [row, -column] }\nend", "  result = []\n  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |item, j|\n      result << [i, j] if item == x\n \
    \   end\n  end\n  result.sort_by { |x| [x[0], -x[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", " \
    \ lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  result = []\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |elem, j|\n   \
    \   result << [i, j] if elem == x\n    end\n  end\n  result.sort_by { |elem| [elem[0],\
    \ -elem[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |col, j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map do |row, i|\n    row.map.with_index\
    \ { |e, j| [i, j] if e == x }\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |row, col| [row, -col] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      result << [i, j] if col == x\n\
    \    end\n  end\n  result.sort_by { |e| [e[0], -e[1]] }\nend", "  result = []\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  result << [i, j] if col == x\n    end\n  end\n  result.sort_by { |row, col|\
    \ [row, -col] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col,\
    \ j|\n      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x,\
    \ y| [x, -y] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem,\
    \ j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by {\
    \ |elem| [elem[0], -elem[1]] }\nend", "  result = []\n  lst.each_with_index do\
    \ |row, i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if elem\
    \ == x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend", " \
    \ lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a, b|\
    \ [a, -b] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  result = []\n  lst.each_with_index do |row, index|\n    row.each_with_index\
    \ do |element, index2|\n      result << [index, index2] if element == x\n    end\n\
    \  end\n  result.sort_by { |a, b| [a, -b] }\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |item, j|\n      result << [i, j] if\
    \ item == x\n    end\n  end\n  result.sort_by { |x| [x[0], -x[1]] }\nend", " \
    \ lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if elem ==\
    \ x\n    end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\nend", " \
    \ lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |column, column_index|\n      result << [row_index,\
    \ column_index] if column == x\n    end\n  end\n  result.sort_by { |row, column|\
    \ [row, -column] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map do |row, row_index|\n \
    \   row.each_with_index.map do |column, column_index|\n      [row_index, column_index]\
    \ if column == x\n    end\n  end.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row, i|\n \
    \   row.each_with_index do |col, j|\n      result << [i, j] if col == x\n    end\n\
    \  end\n  result.sort_by { |x| [x[0], -x[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, row_index|\n    row.each_with_index.map do |value, column_index|\n\
    \      [row_index, column_index] if value == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map do |row,\
    \ i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n  \
    \  end\n  end.flatten(1).compact.sort_by { |row, col| [row, -col] }\nend", " \
    \ lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j] if\
    \ e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  result\
    \ = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index do\
    \ |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do |col,\
    \ col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ row_index|\n    row.each_with_index do |col, col_index|\n      result << [row_index,\
    \ col_index] if col == x\n    end\n  end\n  result.sort_by { |row, col| [row,\
    \ -col] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  lst.map.with_index do |row, row_index|\n    row.map.with_index\
    \ do |elem, column_index|\n      [row_index, column_index] if elem == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ row_index|\n    row.each_with_index do |value, column_index|\n      result <<\
    \ [row_index, column_index] if value == x\n    end\n  end\n  result.sort_by {\
    \ |row, column| [row, -column] }\nend", "  result = []\n  lst.each_with_index\
    \ do |row, row_index|\n    row.each_with_index do |column, column_index|\n   \
    \   result << [row_index, column_index] if column == x\n    end\n  end\n  result.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map { |row, i|\
    \ row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  # your code here\nend", "  result = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |cell, j|\n      result << [i, j] if\
    \ cell == x\n    end\n  end\n  result.sort_by { |x| [x[0], -x[1]] }\nend", " \
    \ # your code here\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  # your code here\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |item, item_index|\n      result << [row_index, item_index]\
    \ if item == x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\n\
    end", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, item_index|\n      result << [row_index, item_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |a, b| [a, -b] }\nend", " \
    \ lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |x| [x[0], -x[1]] }\nend", "  result\
    \ = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      result << [i, j] if col == x\n    end\n  end\n  result.sort_by { |x| [x[0],\
    \ -x[1]] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |element, col_index|\n      result << [row_index,\
    \ col_index] if element == x\n    end\n  end\n  result.sort_by { |row, col| [row,\
    \ -col] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |column, column_index|\n      [row_index, column_index] if column == x\n\
    \    end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\n\
    end", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |element,\
    \ column_index|\n      [row_index, column_index] if element == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map do |row,\
    \ i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n  \
    \  end\n  end.flatten(1).compact.sort_by do |row, col|\n    [row, -col]\n  end\n\
    end", "  # your code here\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  lst.map.with_index do |row, i|\n    row.map.with_index { |e, j|\
    \ [i, j] if e == x }\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\n\
    end", "  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i,\
    \ j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", " \
    \ result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem,\
    \ j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by {\
    \ |elem| [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |a, b| [a, -b] }\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend", "  # your code here\nend", "  lst.each_with_index.map\
    \ { |row, i|\n    row.each_with_index.map { |e, j|\n      [i, j] if e == x\n \
    \   }\n  }.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  result = []\n\
    \  lst.each_with_index do |row, row_index|\n    row.each_with_index do |col, col_index|\n\
    \      result << [row_index, col_index] if col == x\n    end\n  end\n  result.sort_by\
    \ { |row, col| [row, -col] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ row_index|\n    row.each_with_index do |item, item_index|\n      result << [row_index,\
    \ item_index] if item == x\n    end\n  end\n  result.sort_by { |row, col| [row,\
    \ -col] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |i, j| [i, -j] }\n\
    end", "  # your code here\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      result << [i, j] if col == x\n\
    \    end\n  end\n  result.sort_by { |x| [x[0], -x[1]] }\nend", "  # your code\
    \ here\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend",
  "  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |elem,\
    \ col_index|\n      [row_index, col_index] if elem == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |el, j| [i, j] if el == x } }.flatten(1).compact.sort_by { |el| [el[0], -el[1]]\
    \ }\nend", "  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map\
    \ { |col, col_index|\n      [row_index, col_index] if col == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |element, column_index|\n      [row_index, column_index]\
    \ if element == x\n    end\n  end.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row, i|\n \
    \   row.each_with_index do |col, j|\n      result << [i, j] if col == x\n    end\n\
    \  end\n  result.sort_by { |i, j| [i, -j] }\nend", "  res = []\n  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |elem, j|\n      res << [i, j] if elem\
    \ == x\n    end\n  end\n  res.sort_by { |elem| [elem[0], -elem[1]] }\nend", " \
    \ lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  result =\
    \ []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      result << [i, j] if col == x\n    end\n  end\n  result.sort_by { |a, b|\
    \ [a, -b] }\nend", "  # your code here\nend", "  lst.each_with_index.map do |row,\
    \ row_index|\n    row.each_with_index.map do |item, item_index|\n      [row_index,\
    \ item_index] if item == x\n    end\n  end.flatten(1).compact.sort_by { |row,\
    \ _| row }.map do |row, item|\n    [row, item].sort_by { |_, item| -item }.reverse\n\
    \  end\nend", "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i,\
    \ j] if e == x } }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend",
  "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend", "  lst.map.with_index { |row, i| row.map.with_index { |e, j|\
    \ [i, j] if e == x } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\n\
    end", "  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map { |row, i|\n\
    \    row.each_with_index.map { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |column, column_index|\n      [row_index, column_index]\
    \ if column == x\n    end\n  end.flatten(1).compact.sort_by { |row, column| [row,\
    \ -column] }\nend", "  lst.map.with_index do |row, i|\n    row.map.with_index\
    \ do |e, j|\n      [i, j] if e == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |elem, j|\n      result << [i, j] if elem ==\
    \ x\n    end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\nend", " \
    \ lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |x, y| [x, -y] }\nend", " \
    \ lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j] if\
    \ e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend", "  lst.each_with_index.map { |row, i|\n    row.each_with_index.map\
    \ { |e, j|\n      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend", "  lst.map.with_index { |row, i| row.map.with_index {\
    \ |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  lst.each_with_index.map { |row, i| row.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |item, j|\n      [i, j] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |col, col_index|\n      result << [row_index, col_index]\
    \ if col == x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend",
  "  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x }\
    \ }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index\
    \ { |row, i| row.map.with_index { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.map.with_index { |row, i| row.map.with_index\
    \ { |e, j| [i, j] if e == x } }\n    .flatten(1).compact.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |x, y| [x, -y] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ do |row, col|\n    [row, -col]\n  end\nend", "  # your code here\nend", "  lst.each_with_index.map\
    \ { |row, i| row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |item, col_index|\n      [row_index, col_index]\
    \ if item == x\n    end\n  end.flatten(1).compact.sort_by do |row, col|\n    [row,\
    \ -col]\n  end\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |element, column_index|\n      [row_index, column_index] if element == x\n\
    \    end\n  end.flatten(1).compact.sort_by do |row, column|\n    [row, -column]\n\
    \  end\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map do |row, i|\n\
    \    row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  # your code here\n\
    end", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      result << [i, j] if col == x\n\
    \    end\n  end\n  result.sort_by { |a, b| [a, -b] }\nend", "  result = []\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |item, j|\n    \
    \  result << [i, j] if item == x\n    end\n  end\n  result.sort_by { |x| [x[0],\
    \ -x[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map do |row, i|\n \
    \   row.each_with_index.map do |elem, j|\n      [i, j] if elem == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend", "  lst.each_with_index.map\
    \ do |row, i|\n    row.each_with_index.map do |elem, j|\n      [i, j] if elem\
    \ == x\n    end\n  end.flatten(1).compact.sort_by { |a, b| [a, -b] }\nend", " \
    \ lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem, j|\n\
    \      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e| [e[0],\
    \ -e[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend", "  lst.each_with_index.map { |e, i| e.each_with_index.map\
    \ { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |i, j| [i, -j] }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n\
    \    row.each_with_index do |element, element_index|\n      result << [row_index,\
    \ element_index] if element == x\n    end\n  end\n  result.sort_by { |row, column|\
    \ [row, -column] }\nend", "  result = []\n  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |elem, j|\n      result << [i, j] if elem == x\n \
    \   end\n  end\n  result.sort_by { |elem| [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map\
    \ { |row, i|\n    row.each_with_index.map { |item, j|\n      [i, j] if item ==\
    \ x\n    }\n  }.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend", "  result\
    \ = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem, j|\n\
    \      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by { |elem|\
    \ [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.map.with_index\
    \ { |e, j| [i, j] if e == x }\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend", "  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map\
    \ do |item, item_index|\n      [row_index, item_index] if item == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |a, b| [a, -b] }\nend", "  lst.each_with_index.map\
    \ do |row, row_index|\n    row.each_with_index.map do |item, column_index|\n \
    \     [row_index, column_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend", "  lst.each_with_index.map { |row, i|\
    \ row.each_with_index.map { |e, j| [i, j] if e == x } }.flatten(1).compact.sort_by\
    \ { |e| [e[0], -e[1]] }\nend", "  result = []\n  lst.each_with_index do |row,\
    \ row_index|\n    row.each_with_index do |element, column_index|\n      result\
    \ << [row_index, column_index] if element == x\n    end\n  end\n  result.sort_by\
    \ { |row, column| [row, -column] }\nend", "  result = []\n  lst.each_with_index\
    \ do |row, index|\n    row.each_with_index do |item, index2|\n      result <<\
    \ [index, index2] if item == x\n    end\n  end\n  result.sort_by { |item| [item[0],\
    \ -item[1]] }\nend", "  lst.each_with_index.map do |row, i|\n    row.each_with_index.map\
    \ do |elem, j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend", "  lst.each_with_index.map do |row, row_index|\n\
    \    row.each_with_index.map do |el, col_index|\n      [row_index, col_index]\
    \ if el == x\n    end\n  end.flatten(1).compact.sort_by { |row, col| [row, -col]\
    \ }\nend", "  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, element_index|\n      result << [row_index, element_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
