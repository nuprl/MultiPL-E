name: HumanEval_117_select_words
language: ruby
results:
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8w6qslps\nStarted\n.\nFinished in 0.000373572 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2676.86 tests/s, 18738.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph6bey25e\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmph6bey25e.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004803532 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.18 tests/s, 208.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprwue8pot\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmprwue8pot.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005124866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.13 tests/s, 390.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.scan(/[^aeiou]/).size == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp29ekj4f_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp29ekj4f_.rb:23:in `test_select_words'\n\
    \     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.005309803 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.33 tests/s, 941.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5fnm5nm3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5fnm5nm3.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005384735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.71 tests/s, 371.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc31aqhl8\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpc31aqhl8.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005264699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.94 tests/s, 379.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbb8ljtc_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpbb8ljtc_.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005456379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.27 tests/s, 366.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb0la6338\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpb0la6338.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005136449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.69 tests/s, 389.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqz9lye69\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpqz9lye69.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005021352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.15 tests/s, 398.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz51gglyp\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpz51gglyp.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005038203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.48 tests/s, 396.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5gvrg32i\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5gvrg32i.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005104558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.90 tests/s, 391.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpntc20gkv\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpntc20gkv.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006306698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.56 tests/s, 317.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz0hgcruy\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpz0hgcruy.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006449106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.06 tests/s, 310.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpihthp4ip\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpihthp4ip.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004883853 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.76 tests/s, 409.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp79bcq7gs\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp79bcq7gs.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005341543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.21 tests/s, 374.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps1nht1kh\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmps1nht1kh.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004960507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.59 tests/s, 201.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjatv4j0s\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjatv4j0s.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005097785 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.16 tests/s, 392.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu8sme24j\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpu8sme24j.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004849037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.23 tests/s, 206.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeztb3wh3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpeztb3wh3.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005098497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.14 tests/s, 392.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp31gf2p6x\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp31gf2p6x.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.006264119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.64 tests/s, 159.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzg45ap9m\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpzg45ap9m.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006641026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.58 tests/s, 301.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp58adkus4\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp58adkus4.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.00716967 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.48 tests/s, 139.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpywu6ooq4\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpywu6ooq4.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005959837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.79 tests/s, 335.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppy1gbfwk\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmppy1gbfwk.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005672256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.30 tests/s, 352.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm6bee3xl\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpm6bee3xl.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00481864 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.53 tests/s, 415.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjsykckou\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjsykckou.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005007565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.70 tests/s, 399.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplstw4qtt\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmplstw4qtt.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005374565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.06 tests/s, 372.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptyc9aki6\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmptyc9aki6.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005085452 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.64 tests/s, 393.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv6r6xgrq\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpv6r6xgrq.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.0050951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.27 tests/s, 392.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmi8usw0c\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpmi8usw0c.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005503658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.70 tests/s, 363.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdi933skx\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpdi933skx.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004991515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.34 tests/s, 400.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count('aeiou') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcc4eg3eb\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpcc4eg3eb.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004949957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.02 tests/s, 202.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2_rvpz4y\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp2_rvpz4y.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005300586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.66 tests/s, 188.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkjja30z2\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpkjja30z2.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005881839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.01 tests/s, 340.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8zu4rdja\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp8zu4rdja.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004868424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.41 tests/s, 410.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptvbx9h2v\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmptvbx9h2v.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005214535 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.77 tests/s, 383.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplila5_ep\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmplila5_ep.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005442584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.74 tests/s, 183.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1u7c0z_k\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp1u7c0z_k.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006464165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.70 tests/s, 309.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsvhtqmvt\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpsvhtqmvt.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004713143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.17 tests/s, 212.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzvpskxz7\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpzvpskxz7.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006814783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.74 tests/s, 293.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaoqlekbt\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpaoqlekbt.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005486456 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.27 tests/s, 364.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkjaxydjo\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpkjaxydjo.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004835531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.80 tests/s, 413.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmx064aiv\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpmx064aiv.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005680141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.05 tests/s, 352.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsvx0luwq\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpsvx0luwq.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005166664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.55 tests/s, 387.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvjlog6ap\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpvjlog6ap.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.006217541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.84 tests/s, 160.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppo7bhcdh\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmppo7bhcdh.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006953635 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.81 tests/s, 287.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu15ti3gt\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpu15ti3gt.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005858895 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.68 tests/s, 341.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0xbnus06\nStarted\n.\nFinished in 0.000524456 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1906.74 tests/s, 13347.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp46zovgab\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp46zovgab.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.007874646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.99 tests/s, 253.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  words = s.split\n \
    \ words.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
    \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppsfk8fnl\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmppsfk8fnl.rb:21:in `test_select_words'\n\
    \     18:   def test_select_words\n     19:     candidate = method(:select_words)\n\
    \     20:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 21:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     22:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     23:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     24:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004921443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.19 tests/s, 406.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsx38rmnm\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpsx38rmnm.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004967921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.29 tests/s, 402.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1yxddv5f\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp1yxddv5f.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004916164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.41 tests/s, 406.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp374rqyou\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp374rqyou.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005198144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.38 tests/s, 192.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2zrpdfbz\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp2zrpdfbz.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004780929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.16 tests/s, 209.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpna6ozal9\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpna6ozal9.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005052199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.93 tests/s, 395.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsuec7h7m\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpsuec7h7m.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.00475434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.33 tests/s, 210.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj42wl81u\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpj42wl81u.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00505311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.90 tests/s, 395.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxxn6jm44\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpxxn6jm44.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005003648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.85 tests/s, 399.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuu65dw55\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpuu65dw55.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004841664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.54 tests/s, 413.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeyeyvker\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpeyeyvker.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004913408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.52 tests/s, 203.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9fwo98bu\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp9fwo98bu.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005094389 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.29 tests/s, 196.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf4fm75_i\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpf4fm75_i.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005943927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.24 tests/s, 168.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split(' ').select\
    \ { |word| word.count('aeiou') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgvzt6kje\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpgvzt6kje.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005630546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.60 tests/s, 177.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpulrk37bd\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpulrk37bd.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005001293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.95 tests/s, 399.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnddjqyfy\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpnddjqyfy.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.007647037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.77 tests/s, 130.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp46pyuaza\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp46pyuaza.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005204957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.12 tests/s, 384.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcsn2ws3_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpcsn2ws3_.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005638962 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.34 tests/s, 354.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7wjv9fvr\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp7wjv9fvr.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005146758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.30 tests/s, 194.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8h4q83t4\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp8h4q83t4.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.008825706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.31 tests/s, 226.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp18lv514f\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp18lv514f.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005509489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.51 tests/s, 181.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplahepjyy\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmplahepjyy.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006735966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.46 tests/s, 296.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprqq8r8uw\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmprqq8r8uw.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005932935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.55 tests/s, 337.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu3tyngra\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpu3tyngra.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004878062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.00 tests/s, 410.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplvu9ta31\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmplvu9ta31.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006129976 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.13 tests/s, 326.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq1j6a39m\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpq1j6a39m.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005259008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.15 tests/s, 380.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkk5g86up\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpkk5g86up.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004878163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.00 tests/s, 409.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeh9ti3we\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpeh9ti3we.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004846752 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.32 tests/s, 206.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6kubwdyw\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp6kubwdyw.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004723453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.71 tests/s, 211.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk6i43r5z\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpk6i43r5z.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005346012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.06 tests/s, 187.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprqn1tnrg\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmprqn1tnrg.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005034486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.63 tests/s, 397.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphy2uh2bg\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmphy2uh2bg.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004815224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.67 tests/s, 207.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpewxmu8x7\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpewxmu8x7.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005534767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.68 tests/s, 361.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptm1xfd14\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmptm1xfd14.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005646397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.10 tests/s, 354.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_srtqmb2\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp_srtqmb2.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004800376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.32 tests/s, 208.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe69ikpk5\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpe69ikpk5.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005420772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.48 tests/s, 368.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpii8167lu\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpii8167lu.rb:23:in `test_select_words'\n\
    \     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.004705397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.52 tests/s, 1062.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6x2h4lme\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp6x2h4lme.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004872803 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.22 tests/s, 205.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjjzakcya\nStarted\n.\nFinished in 0.000450197 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2221.25 tests/s, 15548.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptjomuyno\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmptjomuyno.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006148891 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.63 tests/s, 325.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpde3fljx0\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpde3fljx0.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00502582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.97 tests/s, 397.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnou1vopj\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpnou1vopj.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005285799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.19 tests/s, 378.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpidgkfph9\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpidgkfph9.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005329841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.62 tests/s, 375.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0e3pa1n9\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp0e3pa1n9.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.006623655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.97 tests/s, 150.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdrqkpien\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpdrqkpien.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004776161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.37 tests/s, 418.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6fq_cgid\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp6fq_cgid.rb:23:in `test_select_words'\n\
    \     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.00671734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.87 tests/s, 744.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpekees18v\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpekees18v.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006023015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.03 tests/s, 332.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv5g0nnfg\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpv5g0nnfg.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005693115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.65 tests/s, 351.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmrie3u64\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpmrie3u64.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006262495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.68 tests/s, 319.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwqxlqwd3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpwqxlqwd3.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005595071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.73 tests/s, 357.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp48i4rb7l\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp48i4rb7l.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00519671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.43 tests/s, 384.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsj1e4o3h\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpsj1e4o3h.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006190971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.53 tests/s, 323.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpglx47f9i\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpglx47f9i.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004973111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.08 tests/s, 201.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp762mqvo\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpp762mqvo.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005081734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.78 tests/s, 393.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_2fyuoyv\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp_2fyuoyv.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005128292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.00 tests/s, 195.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1n8ahn04\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp1n8ahn04.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005240443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.82 tests/s, 190.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1y0ezz95\nStarted\n.\nFinished in 0.000423116 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2363.42 tests/s, 16543.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbovsmt5v\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpbovsmt5v.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004999251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.03 tests/s, 400.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwc92f66l\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpwc92f66l.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.006062007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.96 tests/s, 164.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count('aeiou') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmper_lepkq\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmper_lepkq.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004842044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.52 tests/s, 206.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpejkniac5\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpejkniac5.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004914541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.48 tests/s, 406.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyf4ihpc8\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpyf4ihpc8.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005346313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.04 tests/s, 374.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfel8er1f\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpfel8er1f.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005163559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.66 tests/s, 387.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplboio4x7\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmplboio4x7.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005252244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.39 tests/s, 380.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8eqz4blm\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp8eqz4blm.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005133662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.79 tests/s, 389.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk_dfvkc8\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpk_dfvkc8.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005067558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.33 tests/s, 394.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnikl1pee\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpnikl1pee.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006043443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.47 tests/s, 330.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9jyq4yam\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp9jyq4yam.rb:23:in `test_select_words'\n\
    \     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.00645092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.02 tests/s, 775.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz3bvhhwm\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpz3bvhhwm.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005810285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.11 tests/s, 344.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5e9m6_92\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5e9m6_92.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005674429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.23 tests/s, 352.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxoomx_x2\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpxoomx_x2.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005751355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.87 tests/s, 347.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp0b91io0\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpp0b91io0.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.00526011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.11 tests/s, 190.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo1di6vf6\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpo1di6vf6.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004979784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.81 tests/s, 200.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp25pqy304\nStarted\n.\nFinished in 0.000365877 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2733.16 tests/s, 19132.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjyxgy0h_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjyxgy0h_.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004944306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.25 tests/s, 404.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdma8nb12\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpdma8nb12.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004987117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.52 tests/s, 200.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8gin3ova\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp8gin3ova.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005039345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.44 tests/s, 396.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu2cqkqbx\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpu2cqkqbx.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005424951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.33 tests/s, 184.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgroi_6am\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpgroi_6am.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005208272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.00 tests/s, 192.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn_ersimj\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpn_ersimj.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005183856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.91 tests/s, 385.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8wdt4ad2\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp8wdt4ad2.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004674919 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.91 tests/s, 213.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8fcoxorx\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp8fcoxorx.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004671183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.08 tests/s, 428.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkq4l9no_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpkq4l9no_.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005195579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.47 tests/s, 192.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5mjfdbq7\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5mjfdbq7.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005030388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.79 tests/s, 397.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.scan(/[^aeiou]/).size == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjivdnn6c\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjivdnn6c.rb:23:in `test_select_words'\n\
    \     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.004897117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.20 tests/s, 1021.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnddpuhwh\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpnddpuhwh.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004987108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.52 tests/s, 200.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwe0uh2jh\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpwe0uh2jh.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005039927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.42 tests/s, 396.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbs74u62c\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpbs74u62c.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00532378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.84 tests/s, 375.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprhmhi80g\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmprhmhi80g.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005475835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.62 tests/s, 365.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjthwpycp\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjthwpycp.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004757756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.18 tests/s, 210.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx1au1w6i\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpx1au1w6i.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.00585544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.78 tests/s, 170.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp9iinvyx\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpp9iinvyx.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005524938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.00 tests/s, 362.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpckaeh6cc\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpckaeh6cc.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005814122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.00 tests/s, 172.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn8iik6_4\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpn8iik6_4.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005979765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.23 tests/s, 334.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf5v9obn_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpf5v9obn_.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004981747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.73 tests/s, 401.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppvw0_ohb\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmppvw0_ohb.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006975917 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.35 tests/s, 286.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.scan(/[^aeiou]/).size == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyyhrb45i\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpyyhrb45i.rb:23:in `test_select_words'\n\
    \     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     22:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     24:     assert_equal([], candidate.call(\"\", 4))\n     25:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     26:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.004909531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.69 tests/s, 1018.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpleu4n88l\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpleu4n88l.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004977889 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.89 tests/s, 401.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe4_w94ie\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpe4_w94ie.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005036139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.56 tests/s, 397.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9otnv154\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp9otnv154.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005013758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.45 tests/s, 398.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpitr9rcgx\nStarted\n.\nFinished in 0.000398178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2511.44 tests/s, 17580.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppe5vpy7s\nStarted\n.\nFinished in 0.000370407 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2699.73 tests/s, 18898.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwz7rz9tn\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpwz7rz9tn.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005331695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.56 tests/s, 375.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7oawqf1z\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp7oawqf1z.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004684167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.49 tests/s, 426.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3xfy8lf9\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp3xfy8lf9.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00547283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.72 tests/s, 365.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr29pzt2_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpr29pzt2_.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004852224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.09 tests/s, 412.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmdol8ood\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpmdol8ood.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005082286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.76 tests/s, 393.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpilx4k57o\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpilx4k57o.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004794856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.56 tests/s, 417.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo2nwnei1\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpo2nwnei1.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005240704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.81 tests/s, 190.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjiqk81ca\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjiqk81ca.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005644073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.18 tests/s, 354.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split(' ').select\
    \ { |word| word.count('bcdfghjklmnpqrstvwxyz') == n }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5v3s8y2z\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5v3s8y2z.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005139314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.58 tests/s, 389.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq98n0ae2\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpq98n0ae2.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006425822 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.62 tests/s, 311.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8trzlfpn\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp8trzlfpn.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005192743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.58 tests/s, 385.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3phyb28_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp3phyb28_.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005360098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.56 tests/s, 373.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_sp6sfud\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp_sp6sfud.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005089268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.49 tests/s, 392.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp14tugr20\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp14tugr20.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004944677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.24 tests/s, 404.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn1h0jd4l\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpn1h0jd4l.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005022503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.10 tests/s, 398.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptwa7ft3l\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmptwa7ft3l.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006021632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.07 tests/s, 332.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy0sm86wm\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpy0sm86wm.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005191922 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.61 tests/s, 192.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyqic7_hl\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpyqic7_hl.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004847565 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.29 tests/s, 412.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp82m5_w92\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp82m5_w92.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005085232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.65 tests/s, 393.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpglc9ggys\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpglc9ggys.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004773226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.50 tests/s, 419.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt76_fc_t\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpt76_fc_t.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005491185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.11 tests/s, 182.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeso3_pqp\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpeso3_pqp.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005016042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.36 tests/s, 398.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5a78_uie\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5a78_uie.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00513258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.83 tests/s, 389.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp381v6ffr\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp381v6ffr.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005034046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.65 tests/s, 397.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbiykfb5w\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpbiykfb5w.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00494654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.16 tests/s, 404.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmoad7fja\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpmoad7fja.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004881909 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.84 tests/s, 409.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplcmtwopm\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmplcmtwopm.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005361531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.51 tests/s, 373.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk1mlrpac\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpk1mlrpac.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005343007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.16 tests/s, 187.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm6lnuoac\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpm6lnuoac.rb:19:in `test_select_words'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_select_words\n\
    \     18:     candidate = method(:select_words)\n  => 19:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     20:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     21:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     22:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.004981698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.73 tests/s, 200.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg3lzfiyi\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpg3lzfiyi.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004893953 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.33 tests/s, 408.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpufhm_et6\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpufhm_et6.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005193576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.55 tests/s, 385.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk9emfp70\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpk9emfp70.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005428998 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.20 tests/s, 368.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb9eqkd15\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpb9eqkd15.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005562529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.77 tests/s, 359.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvcht0h6z\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpvcht0h6z.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006338167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.77 tests/s, 315.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxhtwmqdp\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpxhtwmqdp.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005464706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.99 tests/s, 365.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpys8s7jfc\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpys8s7jfc.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004918087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.33 tests/s, 406.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcw34fp6z\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpcw34fp6z.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004869376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.37 tests/s, 410.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5t383isn\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5t383isn.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004779076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.25 tests/s, 418.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpahe8zm7g\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpahe8zm7g.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00479749 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.44 tests/s, 416.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5fvoudft\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5fvoudft.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004882461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.81 tests/s, 409.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppy605ovp\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmppy605ovp.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00506326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.50 tests/s, 395.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu3_3qxbj\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpu3_3qxbj.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004856101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.93 tests/s, 411.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv7_z01yd\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpv7_z01yd.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004958293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.68 tests/s, 403.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph_th46e9\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmph_th46e9.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004720286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.85 tests/s, 423.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp717jqyzx\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp717jqyzx.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004433165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.57 tests/s, 451.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_shlivfu\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp_shlivfu.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004656425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.76 tests/s, 429.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvasf6lew\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpvasf6lew.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004877621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.02 tests/s, 410.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz1kk3gez\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpz1kk3gez.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004676253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.85 tests/s, 427.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprygom4um\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmprygom4um.rb:20:in `test_select_words'\n\
    \     17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \     19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004417987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.35 tests/s, 452.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
