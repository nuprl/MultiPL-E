name: HumanEval_117_select_words
language: ruby
results:
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp55gld05\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3kfix1op\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3kfix1op.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.014024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.31 tests/s, 71.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_4a7rxb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_4a7rxb.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.57 tests/s, 585.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.scan(/[^aeiou]/).size == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5gaq6jsd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5gaq6jsd.rb:23:in\
    \ `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"\
    simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:\
    \     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\"\
    , 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"\
    ]\n===============================================================================\n\
    \nFinished in 0.008584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.50 tests/s, 582.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdya8t1bu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdya8t1bu.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.14 tests/s, 570.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2zd33kr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2zd33kr.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.037022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.01 tests/s, 54.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphc90ult8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphc90ult8.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003452 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.69 tests/s, 579.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoc1bxov0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoc1bxov0.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.81 tests/s, 565.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbq46k5lr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbq46k5lr.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.31 tests/s, 614.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprxq3_7wp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprxq3_7wp.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.60 tests/s, 587.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2byqny3y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2byqny3y.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.09 tests/s, 568.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2m6j5_a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu2m6j5_a.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.33 tests/s, 596.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdfj1fji\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdfj1fji.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.60 tests/s, 597.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqkjq0lj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqkjq0lj.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.77 tests/s, 495.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxse0mpp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxse0mpp.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.76 tests/s, 367.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpar1rfbs8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpar1rfbs8.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.027224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.73 tests/s, 36.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnrxaiz6r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnrxaiz6r.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.08 tests/s, 586.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsk4lls1x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsk4lls1x.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003576 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.64 tests/s, 279.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdk070p38\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdk070p38.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.79 tests/s, 385.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbusnp9ag\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbusnp9ag.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.007416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.84 tests/s, 134.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmfigl7_1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmfigl7_1.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003387 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.25 tests/s, 590.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpznbe9ijl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpznbe9ijl.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.16 tests/s, 295.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelrdmjyz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelrdmjyz.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003492 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.37 tests/s, 572.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2yd3flx2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2yd3flx2.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003398 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.29 tests/s, 588.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4hzwo3o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4hzwo3o.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.58 tests/s, 599.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg13gwhkc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg13gwhkc.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.85 tests/s, 563.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6612qc0e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6612qc0e.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.83 tests/s, 495.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5jjv5246\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5jjv5246.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.71 tests/s, 557.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvpmgj3op\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvpmgj3op.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.03 tests/s, 592.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo70u25_l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo70u25_l.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.76 tests/s, 447.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi_xe9xjg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi_xe9xjg.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003451 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.77 tests/s, 579.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count('aeiou') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5u310bm4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5u310bm4.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.49 tests/s, 303.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4vsxfc3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4vsxfc3.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.005037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.53 tests/s, 198.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnbta165\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnbta165.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.81 tests/s, 589.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpte71zwix\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpte71zwix.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.31 tests/s, 598.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusg_yyld\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusg_yyld.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.025074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.88 tests/s, 79.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv61j1t4i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv61j1t4i.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.67 tests/s, 303.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfhhbfg2m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfhhbfg2m.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 585.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0bao91qh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0bao91qh.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.02688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.20 tests/s, 37.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam7bpoci\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam7bpoci.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.95 tests/s, 427.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp90z47dhh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp90z47dhh.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.04 tests/s, 256.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpma7rmjmq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpma7rmjmq.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.21 tests/s, 600.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3d679y4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3d679y4.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003928 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.58 tests/s, 509.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0af4pnss\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0af4pnss.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.51 tests/s, 357.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpufs93571\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpufs93571.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003791 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.78 tests/s, 263.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9is2n5ne\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9is2n5ne.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.27 tests/s, 620.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vg7dg01\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vg7dg01.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.84 tests/s, 603.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe58z5sxd\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbs28nhqi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbs28nhqi.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 585.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  words = s.split\n \
    \ words.select { |word| word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
    \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvs7ttl8v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvs7ttl8v.rb:21:in\
    \ `test_select_words'\n     18:   def test_select_words\n     19:     candidate\
    \ = method(:select_words)\n     20:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 21:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     22:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     23:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     24:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.86 tests/s, 597.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbbfqdaqv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbbfqdaqv.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003358 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.80 tests/s, 595.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_xkcq8vt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_xkcq8vt.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.86 tests/s, 557.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpky7oqcm6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpky7oqcm6.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.00323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.60 tests/s, 309.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9b3nclt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9b3nclt.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.30 tests/s, 312.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphpn1e0bw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphpn1e0bw.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.41 tests/s, 558.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpej3ulewx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpej3ulewx.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.94 tests/s, 299.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv58tmsw4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv58tmsw4.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003488 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.70 tests/s, 573.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2zopq3d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2zopq3d.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.35 tests/s, 478.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4cwxdt4f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4cwxdt4f.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.017812 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.14 tests/s, 112.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttr26xfg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttr26xfg.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.98 tests/s, 309.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy1cbl5os\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy1cbl5os.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.005808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.18 tests/s, 172.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpil_isylj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpil_isylj.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.39 tests/s, 301.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split(' ').select\
    \ { |word| word.count('aeiou') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4lqtcmd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4lqtcmd.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.09 tests/s, 306.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj4a3zdo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplj4a3zdo.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.47 tests/s, 390.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5gom3x8y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5gom3x8y.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.016469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.72 tests/s, 60.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw963x0fp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw963x0fp.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.60 tests/s, 483.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbqjda1m3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbqjda1m3.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.52 tests/s, 575.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizkulsm5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpizkulsm5.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.12 tests/s, 309.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3abl7ch\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3abl7ch.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.007836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.62 tests/s, 255.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl2tp67m7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl2tp67m7.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.10 tests/s, 320.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghnvwcgj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghnvwcgj.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003373 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.47 tests/s, 592.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo1l83vef\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo1l83vef.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.78 tests/s, 553.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf10g5i3p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf10g5i3p.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.94 tests/s, 557.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt0xv11d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt0xv11d.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.015892 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.92 tests/s, 125.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7mfe_1h9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7mfe_1h9.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.77 tests/s, 575.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gsvenk5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gsvenk5.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.009152 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.27 tests/s, 218.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp8pp1cuk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp8pp1cuk.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.67 tests/s, 262.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ceggqbo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ceggqbo.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.020079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.80 tests/s, 49.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03f5s1yf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03f5s1yf.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.76 tests/s, 302.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvcvo28tq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvcvo28tq.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003451 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.77 tests/s, 579.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f26bt8r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f26bt8r.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.37 tests/s, 310.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzzrdeum0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzzrdeum0.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.009907 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.94 tests/s, 201.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbf5qjj_1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbf5qjj_1.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.51 tests/s, 309.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8nolrspa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8nolrspa.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.011988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.42 tests/s, 83.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5oksswi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5oksswi.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005932 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.58 tests/s, 337.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp25kqq521\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp25kqq521.rb:23:in\
    \ `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"\
    simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:\
    \     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\"\
    , 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.79 tests/s, 1523.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe96zy88h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe96zy88h.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.72 tests/s, 279.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp968_pfgj\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply0uq4ox\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply0uq4ox.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.31 tests/s, 570.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptqg96od\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptqg96od.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.41 tests/s, 446.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzq6wkym\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzq6wkym.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.016722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.80 tests/s, 119.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd_0uvf6a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd_0uvf6a.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003897 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.61 tests/s, 513.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4kok_hn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4kok_hn.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.33 tests/s, 275.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6h3sb1_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6h3sb1_.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004012 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.25 tests/s, 498.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4_u1fo1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4_u1fo1.rb:23:in\
    \ `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"\
    simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:\
    \     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\"\
    , 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.63 tests/s, 1383.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaw700r37\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaw700r37.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.021048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.51 tests/s, 95.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9bzk3hu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9bzk3hu.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.42 tests/s, 596.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprez2m2cz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprez2m2cz.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.018292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.67 tests/s, 109.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphcf5899_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphcf5899_.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.24 tests/s, 554.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsgr5654j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsgr5654j.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.006268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.54 tests/s, 319.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18_yb2af\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18_yb2af.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.84 tests/s, 601.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0024n0d9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0024n0d9.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.004823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.34 tests/s, 207.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tryblpv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6tryblpv.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.007219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.52 tests/s, 277.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdd4sn34p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdd4sn34p.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.13 tests/s, 321.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk392z06\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk392z06.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.76 tests/s, 317.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7s4zetxs\n\
    Started\n.\nFinished in 0.00031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3225.81 tests/s, 22580.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfd7dhjaj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfd7dhjaj.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.22 tests/s, 598.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5fkmvkpu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5fkmvkpu.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.09 tests/s, 306.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count('aeiou') == n }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwsp7he2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwsp7he2.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.59 tests/s, 319.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8r7gbvuc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8r7gbvuc.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.55 tests/s, 589.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfqs5i87t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfqs5i87t.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.14 tests/s, 570.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vy5f7x2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vy5f7x2.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.53 tests/s, 581.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9elhqspm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9elhqspm.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.60 tests/s, 597.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1vbv49dp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1vbv49dp.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.48 tests/s, 600.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdi0qgeh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdi0qgeh.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.30 tests/s, 600.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_j84cd_q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_j84cd_q.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.53 tests/s, 595.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsp97q2a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsp97q2a.rb:23:in\
    \ `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"\
    simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:\
    \     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\"\
    , 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.48 tests/s, 1502.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkt6jv0ej\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkt6jv0ej.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.77 tests/s, 591.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_wh3ru2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_wh3ru2.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003304 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.66 tests/s, 605.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31szzchy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31szzchy.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.28 tests/s, 612.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqu7j9vuh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqu7j9vuh.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.82 tests/s, 320.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwbkzz0nc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwbkzz0nc.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.79 tests/s, 309.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt51wvnpi\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91_vqlti\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91_vqlti.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.02 tests/s, 374.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf93kdxfb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf93kdxfb.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.00327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.81 tests/s, 305.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0urngep\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0urngep.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.70 tests/s, 581.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5vgx8rau\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5vgx8rau.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.009312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.39 tests/s, 107.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpex73euy2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpex73euy2.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.37 tests/s, 310.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2dvua1z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf2dvua1z.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.30 tests/s, 604.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1phk1nc3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1phk1nc3.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.50 tests/s, 309.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppempohxx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppempohxx.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.89 tests/s, 595.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcwyzfg1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcwyzfg1.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.27 tests/s, 289.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7g1zt6_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7g1zt6_.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.024777 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.36 tests/s, 80.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.scan(/[^aeiou]/).size == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk21dcqhm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk21dcqhm.rb:23:in\
    \ `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"\
    simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:\
    \     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\"\
    , 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.52 tests/s, 1442.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2zlhfof\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2zlhfof.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.27 tests/s, 297.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2668x5a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2668x5a.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.16 tests/s, 590.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6a8ob2z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6a8ob2z.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.32 tests/s, 556.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp935fk1dz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp935fk1dz.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.86 tests/s, 573.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wnzjfy2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wnzjfy2.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.008475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.99 tests/s, 117.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0t_crgn2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0t_crgn2.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.56 tests/s, 317.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06xly30b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06xly30b.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.045941 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.77 tests/s, 43.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjow2yxtl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjow2yxtl.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.60 tests/s, 307.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtq6ndmq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmtq6ndmq.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.41 tests/s, 568.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4wxyaz9q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4wxyaz9q.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.78 tests/s, 581.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyuysgxni\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyuysgxni.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.55 tests/s, 589.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.scan(/[^aeiou]/).size == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3vr8mdc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3vr8mdc.rb:23:in\
    \ `test_select_words'\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"\
    simple white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n  => 23:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n     24:     assert_equal([], candidate.call(\"\", 4))\n     25:\
    \     assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\"\
    , 1))\n     26:   end\n<[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"\
    ]\n===============================================================================\n\
    \nFinished in 0.00346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.02 tests/s, 1445.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdjf70t9y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdjf70t9y.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.35 tests/s, 594.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmple9whc5n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmple9whc5n.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.87 tests/s, 257.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjup1eav\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjup1eav.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.29 tests/s, 562.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp85n_3zq6\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"^aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfadvpkj3\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkpd05j05\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkpd05j05.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.016788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    59.57 tests/s, 119.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2fdlvcs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2fdlvcs.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.80 tests/s, 583.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn11j7axl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn11j7axl.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.12 tests/s, 572.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphac79g3d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphac79g3d.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.52 tests/s, 469.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppg24yr6a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppg24yr6a.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.00 tests/s, 594.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxdmjl22\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxdmjl22.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003535 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.89 tests/s, 565.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxk7_tz5e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxk7_tz5e.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.004378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.41 tests/s, 228.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_p_9la_9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_p_9la_9.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.72 tests/s, 559.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split(' ').select\
    \ { |word| word.count('bcdfghjklmnpqrstvwxyz') == n }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqc7v3fl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqc7v3fl.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.27 tests/s, 576.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1kzzbh3e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1kzzbh3e.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003877 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    257.93 tests/s, 515.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3c3dzr7h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3c3dzr7h.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003436 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.04 tests/s, 582.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplsamcxg4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplsamcxg4.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.0053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.68 tests/s, 377.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf6u07rpn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf6u07rpn.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.01026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.47 tests/s, 194.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3e8d6303\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3e8d6303.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.94 tests/s, 579.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpafrltqox\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpafrltqox.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.62 tests/s, 611.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfq2m4ll\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfq2m4ll.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.017867 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.97 tests/s, 111.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx4ovtt9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx4ovtt9.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.55 tests/s, 308.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeum98chv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeum98chv.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.74 tests/s, 585.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiudvom_y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiudvom_y.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.03668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.26 tests/s, 54.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3csazl1c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3csazl1c.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.90 tests/s, 569.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_c4q9s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe_c4q9s.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.11 tests/s, 290.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmj1v_9yy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmj1v_9yy.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.023369 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.79 tests/s, 85.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa9ya9x0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa9ya9x0.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.90 tests/s, 589.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn873bg95\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn873bg95.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.85 tests/s, 575.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptero49ma\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptero49ma.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.007469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.89 tests/s, 267.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n3mt3jb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5n3mt3jb.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.00 tests/s, 594.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr8qt22h2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr8qt22h2.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.77 tests/s, 575.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0if36ouk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0if36ouk.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.66 tests/s, 300.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1mf8ftd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1mf8ftd.rb:19:in\
    \ `test_select_words'\n     16: class TestHumanEval < Test::Unit::TestCase\n \
    \    17:   def test_select_words\n     18:     candidate = method(:select_words)\n\
    \  => 19:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n     20:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     21:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     22:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n<[\"little\"]> expected but was\n<[]>\n\ndiff:\n? [\"little\"\
    ]\n===============================================================================\n\
    \nFinished in 0.003347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.78 tests/s, 298.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5mtje1wg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5mtje1wg.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.43 tests/s, 576.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppynupt5n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppynupt5n.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.66 tests/s, 569.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg67mjkhc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg67mjkhc.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.008134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.94 tests/s, 245.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5hiu_72\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5hiu_72.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.95 tests/s, 591.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w|\
    \ w.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc0fmr2s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc0fmr2s.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.005053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.90 tests/s, 395.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cdyy3hq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0cdyy3hq.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003967 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.08 tests/s, 504.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppznhuzgq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppznhuzgq.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.69 tests/s, 597.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3d6lora\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3d6lora.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.94 tests/s, 579.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjt7wss2d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjt7wss2d.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.011668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.70 tests/s, 171.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8gilparw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8gilparw.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.07 tests/s, 450.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0psa8hw8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0psa8hw8.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.039543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.29 tests/s, 50.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5wy_ts_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5wy_ts_.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.015549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.31 tests/s, 128.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_moes_5q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_moes_5q.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.94 tests/s, 579.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmlw06rsi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmlw06rsi.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.00351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.90 tests/s, 569.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_1srnv9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_1srnv9.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.84 tests/s, 601.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpys1tuii1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpys1tuii1.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.30 tests/s, 592.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_5776ut\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_5776ut.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.004314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.80 tests/s, 463.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbd_q8eo6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbd_q8eo6.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.00 tests/s, 645.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkgpwlf4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkgpwlf4.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.43 tests/s, 622.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
    Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\",\
    \ 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word|\
    \ word.count(\"bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3hqyl6h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3hqyl6h.rb:20:in\
    \ `test_select_words'\n     17:   def test_select_words\n     18:     candidate\
    \ = method(:select_words)\n     19:     assert_equal([\"little\"], candidate.call(\"\
    Mary had a little lamb\", 4))\n  => 20:     assert_equal([\"Mary\", \"lamb\"],\
    \ candidate.call(\"Mary had a little lamb\", 3))\n     21:     assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n     22:     assert_equal([\"world\"\
    ], candidate.call(\"Hello world\", 4))\n     23:     assert_equal([\"Uncle\"],\
    \ candidate.call(\"Uncle sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n\
    <[\"lamb\"]>\n\ndiff:\n? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.003339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.49 tests/s, 598.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
