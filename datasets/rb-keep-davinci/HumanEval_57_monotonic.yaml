name: HumanEval_57_monotonic
language: ruby
prompt: "# Return True is list elements are monotonically increasing or decreasing.\n\
  # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
  # >>> monotonic([4, 1, 0, -10])\n# True\ndef monotonic(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
  \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2,\
  \ 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
  \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
  \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
  \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
  end\n"
completions: ["  if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n  \
    \  return true\n  else\n    return false\n  end\nend", "  if l.sort == l\n   \
    \ return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend", "  return false if l.length <= 1\n  return true if l.length\
    \ == 2\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length\
    \ == 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\nend", " \
    \ return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n\
    \      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n\
    \  else\n    return false\n  end\nend", "  return true if l.length == 1\n  if\
    \ l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length <= 1\n  if\
    \ l[0] < l[1]\n    for i in 0..l.length-2\n      return false if l[i] > l[i+1]\n\
    \    end\n  else\n    for i in 0..l.length-2\n      return false if l[i] < l[i+1]\n\
    \    end\n  end\n  return true\nend", "  return true if l.length == 1\n  if l[0]\
    \ < l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length <= 1\n  if\
    \ l[0] < l[1]\n    for i in 1..l.length-1\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    for i in 1..l.length-1\n      return false if l[i] > l[i-1]\n\
    \    end\n  end\n  return true\nend", "  if l.sort == l\n    return true\n  elsif\
    \ l.sort.reverse == l\n    return true\n  else\n    return false\n  end\nend",
  "  if l.sort == l || l.sort.reverse == l\n    return true\n  else\n    return false\n\
    \  end\nend", "  if l.sort == l || l.sort.reverse == l\n    return true\n  else\n\
    \    return false\n  end\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  if l.sort ==\
    \ l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n \
    \   return false\n  end\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  if l.sort ==\
    \ l || l.sort.reverse == l\n    return true\n  else\n    return false\n  end\n\
    end", "  if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return\
    \ true\n  else\n    return false\n  end\nend", "  if l.sort == l\n    return true\n\
    \  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n  end\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ l.each_with_index do |e, i|\n    if i != 0\n      if l[i-1] > e\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend", "  return false if l.length\
    \ < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  return true if l.sort == l || l.sort.reverse\
    \ == l\n  false\nend", "  # TODO: implement\nend", "  return true if l.length\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend", "  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_cons(2).all? { |a, b| a <= b }\n  else\n\
    \    l.each_cons(2).all? { |a, b| a >= b }\n  end\nend", "  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_cons(2).all? { |a, b| a <= b }\n  else\n\
    \    l.each_cons(2).all? { |a, b| a >= b }\n  end\nend", "  return true if l.size\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.size).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.size).each do |i|\n      return false\
    \ if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true if l.size <=\
    \ 1\n  return l.sort == l || l.sort.reverse == l\nend", "  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n\
    \  else\n    return false\n  end\nend", "  return true if l.length == 1\n  if\
    \ l[0] < l[1]\n    l.each_with_index do |num, i|\n      return false if i > 0\
    \ && num < l[i-1]\n    end\n  else\n    l.each_with_index do |num, i|\n      return\
    \ false if i > 0 && num > l[i-1]\n    end\n  end\n  true\nend", "  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend", "  return\
    \ true if l.length == 1\n  if l[0] < l[1]\n    l.each_with_index do |num, i|\n\
    \      return false if i != l.length - 1 && num > l[i + 1]\n    end\n  else\n\
    \    l.each_with_index do |num, i|\n      return false if i != l.length - 1 &&\
    \ num < l[i + 1]\n    end\n  end\n  true\nend", "  if l.sort == l\n    return\
    \ true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n\
    \  end\nend", "  return true if l.length <= 1\n  return l.sort == l || l.sort.reverse\
    \ == l\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ # TODO: implement\nend", "  return false if l.length <= 1\n  return true if\
    \ l.length == 2\n  if l[0] < l[1]\n    for i in 1..l.length-1\n      return false\
    \ if l[i] < l[i-1]\n    end\n  else\n    for i in 1..l.length-1\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  return true\nend", "  return true\
    \ if l.length == 1\n  return true if l.length == 2 && l[0] == l[1]\n  return true\
    \ if l.length == 2 && l[0] < l[1]\n  return true if l.length == 2 && l[0] > l[1]\n\
    \  return true if l.length == 3 && l[0] < l[1] && l[1] < l[2]\n  return true if\
    \ l.length == 3 && l[0] > l[1] && l[1] > l[2]\n  return false if l.length == 3\
    \ && l[0] < l[1] && l[1] > l[2]\n  return false if l.length == 3 && l[0] > l[1]\
    \ && l[1] < l[2]\n  return false if l.length == 3 && l[0] == l[1] && l[1] == l[2]\n\
    \  return false if l.length == 3 && l[0] == l[1] && l[1] != l[2]\n  return false\
    \ if l.length == 3 && l[0] != l[1] && l[1] == l[2]\n  return false if l.length\
    \ == 3 && l[0] != l[1] && l[1] != l[2]\n  return false if l.length == 3 && l[0]\
    \ == l[1] && l[1] < l[2]\n  return false if l.length == 3 && l[0] == l[1] && l[1]\
    \ > l[2]\n  return false if l.length == 3 && l[0] < l[1] && l[1] == l[2]\n  return\
    \ false if l.length == 3 && l[0] > l[1] && l[1] == l[2]\n  return false if l.length\
    \ == 3 && l[0] < l[1] && l[1] < l[2]\n  return false if l.length == 3 && l[0]\
    \ > l[1] && l[1] > l[2]\n  return false if l.length == 3 && l[0] > l[1] && l",
  "  return false if l.length < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n\
    \    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n    end\n\
    \  else\n    (1...l.length).each do |i|\n      return false if l[i] > l[i-1]\n\
    \    end\n  end\n  true\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n\
    \    return true if l.each_cons(2).all? { |a, b| a <= b }\n  elsif l[0] > l[1]\n\
    \    return true if l.each_cons(2).all? { |a, b| a >= b }\n  end\n  false\nend",
  "  return true if l.length <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each do\
    \ |i|\n      return false if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each\
    \ do |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", " \
    \ return true if l.size == 1\n  return true if l.size == 2 && l[0] == l[1]\n \
    \ return false if l.size == 2 && l[0] != l[1]\n  if l[0] < l[1]\n    (1...l.size).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.size).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n\
    \  else\n    return false\n  end\nend", "  if l.sort == l\n    return true\n \
    \ elsif l.sort.reverse == l\n    return true\n  else\n    return false\n  end\n\
    end", "  l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all? { |a, b|\
    \ a >= b }\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse ==\
    \ l\n    return true\n  else\n    return false\n  end\nend", "  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  if l.sort ==\
    \ l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n \
    \   return false\n  end\nend", "  return true if l.length <= 1\n  return false\
    \ if l[0] == l[1]\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend", "  return\
    \ true if l.length <= 1\n  if l[0] < l[1]\n    l.each_with_index do |num, i|\n\
    \      return false if i != l.length - 1 && num > l[i + 1]\n    end\n  else\n\
    \    l.each_with_index do |num, i|\n      return false if i != l.length - 1 &&\
    \ num < l[i + 1]\n    end\n  end\n  true\nend", "  if l.sort == l\n    return\
    \ true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n\
    \  end\nend", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : false if l[0] <= l[1]\n  return l[0] >= l[1] ? monotonic(l[1..-1]) : false\
    \ if l[0] >= l[1]\nend", "  return true if l.length <= 1\n  return l[0] <= l[1]\
    \ ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if\
    \ l.length <= 1\n  return false if l[0] == l[1]\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b\
    \ }\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length == 1\n  if l[0] < l[1]\n    l.each_with_index do |num,\
    \ i|\n      return false if i != l.length - 1 && num > l[i + 1]\n    end\n  else\n\
    \    l.each_with_index do |num, i|\n      return false if i != l.length - 1 &&\
    \ num < l[i + 1]\n    end\n  end\n  true\nend", "  if l.sort == l\n    return\
    \ true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n\
    \  end\nend", "  return true if l.size <= 1\n  if l[0] < l[1]\n    (1...l.size).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.size).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n\
    \    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n    end\n\
    \  else\n    (1...l.length).each do |i|\n      return false if l[i] > l[i-1]\n\
    \    end\n  end\n  true\nend", "  l.each_cons(2).all? { |x, y| x <= y } || l.each_cons(2).all?\
    \ { |x, y| x >= y }\nend", "  return true if l.length <= 1\n  return l[0] <= l[1]\
    \ ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if\
    \ l.length == 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true\
    \ if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true\
    \ if l.length == 1\n  return true if l.length == 2 && l[0] == l[1]\n  return true\
    \ if l.length == 2 && l[0] != l[1]\n  return false if l.length == 2 && l[0] >\
    \ l[1]\n  return false if l.length == 2 && l[0] < l[1]\n  return false if l.length\
    \ == 3 && l[0] == l[1] && l[1] == l[2]\n  return false if l.length == 3 && l[0]\
    \ == l[1] && l[1] != l[2]\n  return false if l.length == 3 && l[0] != l[1] &&\
    \ l[1] == l[2]\n  return false if l.length == 3 && l[0] != l[1] && l[1] != l[2]\n\
    \  return false if l.length == 3 && l[0] > l[1] && l[1] > l[2]\n  return false\
    \ if l.length == 3 && l[0] < l[1] && l[1] < l[2]\n  return false if l.length ==\
    \ 3 && l[0] > l[1] && l[1] < l[2]\n  return false if l.length == 3 && l[0] < l[1]\
    \ && l[1] > l[2]\n  return true if l.length == 3 && l[0] > l[1] && l[1] == l[2]\n\
    \  return true if l.length == 3 && l[0] < l[1] && l[1] == l[2]\n  return true\
    \ if l.length == 3 && l[0] == l[1] && l[1] > l[2]\n  return true if l.length ==\
    \ 3 && l[0] == l[1] && l[1] < l[2]\n  return false if l.length == 4 && l[0] ==\
    \ l[1] && l[1] == l[2] && l[2] == l[3]\n  return false if l.length == 4 && l[0]\
    \ == l[1] && l", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length == 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n\
    \      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) :\
    \ monotonic(l[1..-1].reverse)\nend", "  return true if l.length <= 1\n  return\
    \ true if l.sort == l || l.sort.reverse == l\n  false\nend", "  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend", "  return true if l.length <= 1\n  return l[0] <= l[1] ?\
    \ monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  l.each_cons(2).all?\
    \ { |x, y| x <= y } || l.each_cons(2).all? { |x, y| x >= y }\nend", "  # Your\
    \ code here\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  return true\
    \ if l.length <= 1\n  return l.sort == l || l.sort.reverse == l\nend", "  if l.sort\
    \ == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n\
    \    return false\n  end\nend", "  return true if l.length == 1\n  return false\
    \ if l.length == 0\n  if l[0] < l[1]\n    for i in 0..l.length-2\n      return\
    \ false if l[i] > l[i+1]\n    end\n  else\n    for i in 0..l.length-2\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  return true\nend", "  return true\
    \ if l.length == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  elsif l[0] > l[1]\n\
    \    (1...l.length).each do |i|\n      return false if l[i] > l[i-1]\n    end\n\
    \  end\n  true\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n    for\
    \ i in 0..l.length-2\n      return false if l[i] > l[i+1]\n    end\n  else\n \
    \   for i in 0..l.length-2\n      return false if l[i] < l[i+1]\n    end\n  end\n\
    \  return true\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  return true\
    \ if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true\
    \ if l.length <= 1\n  if l[0] < l[1]\n    l.each_with_index do |e, i|\n      return\
    \ false if i < l.length - 1 && e > l[i + 1]\n    end\n  else\n    l.each_with_index\
    \ do |e, i|\n      return false if i < l.length - 1 && e < l[i + 1]\n    end\n\
    \  end\n  true\nend", "  return true if l.length <= 1\n  return l[0] <= l[1] ?\
    \ monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if l.length\
    \ <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    l.each_with_index\
    \ do |e, i|\n      return false if i > 0 && e < l[i-1]\n    end\n  else\n    l.each_with_index\
    \ do |e, i|\n      return false if i > 0 && e > l[i-1]\n    end\n  end\n  true\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each do\
    \ |i|\n      return false if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each\
    \ do |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", " \
    \ if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n\
    \  else\n    return false\n  end\nend", "  l.each_cons(2).all? { |a, b| a <= b\
    \ } || l.each_cons(2).all? { |a, b| a >= b }\nend", "  if l.sort == l\n    return\
    \ true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n\
    \  end\nend", "  return true if l.length == 1\n  if l[0] < l[1]\n    l.each_with_index\
    \ do |e, i|\n      return false if i > 0 && e < l[i-1]\n    end\n  else\n    l.each_with_index\
    \ do |e, i|\n      return false if i > 0 && e > l[i-1]\n    end\n  end\n  true\n\
    end", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each\
    \ do |i|\n      return false if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each\
    \ do |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", " \
    \ return true if l.length <= 1\n  if l[0] < l[1]\n    l.each_with_index do |num,\
    \ i|\n      return false if i < l.length - 1 && num > l[i + 1]\n    end\n  else\n\
    \    l.each_with_index do |num, i|\n      return false if i < l.length - 1 &&\
    \ num < l[i + 1]\n    end\n  end\n  true\nend", "  if l.sort == l\n    return\
    \ true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n\
    \  end\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b\
    \ }\nend", "  if l.sort == l || l.sort.reverse == l\n    return true\n  else\n\
    \    return false\n  end\nend", "  return true if l.length == 1\n  return true\
    \ if l.length == 2 && l[0] == l[1]\n  return false if l.length == 2 && l[0] !=\
    \ l[1]\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if\
    \ l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    (0...l.length - 1).each do |i|\n      return false\
    \ if l[i] > l[i + 1]\n    end\n  else\n    (0...l.length - 1).each do |i|\n  \
    \    return false if l[i] < l[i + 1]\n    end\n  end\n  true\nend", "  if l.sort\
    \ == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n\
    \    return false\n  end\nend", "  return true if l.length <= 1\n  return l[0]\
    \ <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  if l.sort\
    \ == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n\
    \    return false\n  end\nend", "  return true if l.length <= 1\n  return l[0]\
    \ <= l[1] ? monotonic(l[1..-1]) : false if l[0] <= l[1]\n  return l[0] >= l[1]\
    \ ? monotonic(l[1..-1]) : false if l[0] >= l[1]\nend", "  if l.sort == l\n   \
    \ return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  return true\
    \ if l.length == 1\n  if l[0] < l[1]\n    (0...l.length-1).each do |i|\n     \
    \ return false if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each do\
    \ |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", "  l.each_cons(2).all?\
    \ { |a, b| a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend", "  return\
    \ true if l.length == 1\n  return true if l.sort == l || l.sort.reverse == l\n\
    \  false\nend", "  return true if l.length <= 1\n  return true if l.sort == l\n\
    \  return true if l.sort.reverse == l\n  false\nend", "  return true if l.length\
    \ <= 1\n  return l.sort == l || l.sort.reverse == l\nend", "  if l.sort == l ||\
    \ l.sort.reverse == l\n    return true\n  else\n    return false\n  end\nend",
  "  if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n\
    \  else\n    return false\n  end\nend", "  return true if l.length <= 1\n  if\
    \ l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  return true if l.size == 1\n  return\
    \ l.sort == l || l.sort.reverse == l\nend", "  return true if l.length <= 1\n\
    \  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend",
  "  if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n\
    \  else\n    return false\n  end\nend", "  return true if l.length <= 1\n  if\
    \ l[0] < l[1]\n    l.each_cons(2).all? { |a, b| a <= b }\n  else\n    l.each_cons(2).all?\
    \ { |a, b| a >= b }\n  end\nend", "  return true if l.length <= 1\n  return l.sort\
    \ == l || l.sort.reverse == l\nend", "  return true if l.length <= 1\n  if l[0]\
    \ < l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length <= 1\n  if\
    \ l[0] < l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  return true if l.length == 1\n  return\
    \ true if l.length == 2 && l[0] == l[1]\n  return true if l.length == 2 && l[0]\
    \ < l[1]\n  return true if l.length == 2 && l[0] > l[1]\n  return false if l.length\
    \ == 2 && l[0] != l[1]\n  if l[0] < l[1]\n    l.each_with_index do |num, i|\n\
    \      return false if i != l.length - 1 && num > l[i + 1]\n    end\n  elsif l[0]\
    \ > l[1]\n    l.each_with_index do |num, i|\n      return false if i != l.length\
    \ - 1 && num < l[i + 1]\n    end\n  end\n  true\nend", "  return true if l.length\
    \ <= 1\n  if l[0] < l[1]\n    l.each_cons(2).all? { |a, b| a <= b }\n  else\n\
    \    l.each_cons(2).all? { |a, b| a >= b }\n  end\nend", "  return true if l.length\
    \ == 1\n  return true if l.sort == l\n  return true if l.sort.reverse == l\n \
    \ false\nend", "  l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all?\
    \ { |a, b| a >= b }\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n\
    \    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n    end\n\
    \  else\n    (1...l.length).each do |i|\n      return false if l[i] > l[i-1]\n\
    \    end\n  end\n  true\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  return true\
    \ if l.length == 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true\
    \ if l.size <= 1\n  if l[0] < l[1]\n    (1...l.size).each { |i| return false if\
    \ l[i] < l[i-1] }\n  else\n    (1...l.size).each { |i| return false if l[i] >\
    \ l[i-1] }\n  end\n  true\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  return true\
    \ if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true\
    \ if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  return true if l.size <= 1\n  if l[0] < l[1]\n    (1...l.size).each do\
    \ |i|\n      return false if l[i] < l[i-1]\n    end\n  else\n    (1...l.size).each\
    \ do |i|\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", " \
    \ return false if l.length < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n\
    \    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n    end\n\
    \  else\n    (1...l.length).each do |i|\n      return false if l[i] > l[i-1]\n\
    \    end\n  end\n  true\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n\
    \    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n    end\n\
    \  else\n    (1...l.length).each do |i|\n      return false if l[i] > l[i-1]\n\
    \    end\n  end\n  true\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n\
    \    (0...l.length - 1).each do |i|\n      return false if l[i] > l[i + 1]\n \
    \   end\n  else\n    (0...l.length - 1).each do |i|\n      return false if l[i]\
    \ < l[i + 1]\n    end\n  end\n  true\nend", "  if l.sort == l\n    return true\n\
    \  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n  end\n\
    end", "  # your code here\nend", "  return true if l.length <= 1\n  if l[0] <=\
    \ l[1]\n    (1...l.length).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.length).each do |i|\n      return false if l[i] >\
    \ l[i-1]\n    end\n  end\n  true\nend", "  if l.sort == l\n    return true\n \
    \ elsif l.sort.reverse == l\n    return true\n  else\n    return false\n  end\n\
    end", "  l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all? { |a, b|\
    \ a >= b }\nend", "  return true if l.size <= 1\n  return l.sort == l || l.sort.reverse\
    \ == l\nend", "  return true if l.size <= 1\n  return l.sort == l || l.sort.reverse\
    \ == l\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n    (0...l.length\
    \ - 1).each do |i|\n      return false if l[i] > l[i + 1]\n    end\n  else\n \
    \   (0...l.length - 1).each do |i|\n      return false if l[i] < l[i + 1]\n  \
    \  end\n  end\n  true\nend", "  return true if l.length <= 1\n  if l[0] < l[1]\n\
    \    for i in 0..l.length-2\n      return false if l[i] > l[i+1]\n    end\n  else\n\
    \    for i in 0..l.length-2\n      return false if l[i] < l[i+1]\n    end\n  end\n\
    \  return true\nend", "  return true if l.length <= 1\n  return l[0] <= l[1] ?\
    \ monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\nend", "  return true if l.length\
    \ <= 1\n  return true if l.sort == l || l.sort.reverse == l\n  false\nend", " \
    \ return true if l.length <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each do\
    \ |i|\n      return false if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each\
    \ do |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", " \
    \ if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n\
    \  else\n    return false\n  end\nend", "  return false if l.length < 2\n  return\
    \ true if l.length == 2\n  if l[0] < l[1]\n    for i in 0..l.length-2\n      return\
    \ false if l[i] > l[i+1]\n    end\n  else\n    for i in 0..l.length-2\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  return true\nend", "  return true\
    \ if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1]) : monotonic(l[1..-1].reverse)\n\
    end", "  if l == l.sort\n    return true\n  elsif l == l.sort.reverse\n    return\
    \ true\n  else\n    return false\n  end\nend", "  return true if l.length == 1\n\
    \  if l[0] < l[1]\n    for i in 0..l.length-2\n      return false if l[i] > l[i+1]\n\
    \    end\n  else\n    for i in 0..l.length-2\n      return false if l[i] < l[i+1]\n\
    \    end\n  end\n  return true\nend", "  l.each_with_index do |e, i|\n    next\
    \ if i == 0\n    if l[i] > l[i-1]\n      return false if l[i] < l[i-1]\n    elsif\
    \ l[i] < l[i-1]\n      return false if l[i] > l[i-1]\n    end\n  end\n  true\n\
    end", "  return true if l.length == 1\n  if l[0] < l[1]\n    for i in 1..l.length-1\n\
    \      return false if l[i] < l[i-1]\n    end\n  else\n    for i in 1..l.length-1\n\
    \      return false if l[i] > l[i-1]\n    end\n  end\n  return true\nend", " \
    \ return true if l.length == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n\
    \    for i in 0..l.length-2\n      return false if l[i] > l[i+1]\n    end\n  elsif\
    \ l[0] > l[1]\n    for i in 0..l.length-2\n      return false if l[i] < l[i+1]\n\
    \    end\n  end\n  return true\nend", "  l.each_cons(2).all? { |a, b| a <= b }\
    \ || l.each_cons(2).all? { |a, b| a >= b }\nend", "  return false if l.length\
    \ < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    for i in 1..l.length-2\n\
    \      return false if l[i] > l[i+1]\n    end\n  else\n    for i in 1..l.length-2\n\
    \      return false if l[i] < l[i+1]\n    end\n  end\n  return true\nend", " \
    \ return true if l.size <= 1\n  return l.each_cons(2).all? { |a, b| a <= b } ||\
    \ l.each_cons(2).all? { |a, b| a >= b }\nend", "  l.each_cons(2).all? { |a, b|\
    \ a <= b } || l.each_cons(2).all? { |a, b| a >= b }\nend", "  return false if\
    \ l.length < 2\n  return true if l.length == 2\n  if l[0] < l[1]\n    (0..l.length-2).each\
    \ do |i|\n      return false if l[i] > l[i+1]\n    end\n  elsif l[0] > l[1]\n\
    \    (0..l.length-2).each do |i|\n      return false if l[i] < l[i+1]\n    end\n\
    \  end\n  true\nend", "  return true if l.length <= 1\n  return true if l.sort\
    \ == l || l.sort.reverse == l\n  false\nend", "  return true if l.length <= 1\n\
    \  if l[0] < l[1]\n    (0...l.length - 1).each do |i|\n      return false if l[i]\
    \ > l[i + 1]\n    end\n  else\n    (0...l.length - 1).each do |i|\n      return\
    \ false if l[i] < l[i + 1]\n    end\n  end\n  true\nend", "  if l.sort == l\n\
    \    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n    return\
    \ false\n  end\nend", "  return true if l.length == 1\n  return false if l.length\
    \ == 0\n  if l[0] < l[1]\n    (0..l.length-2).each do |i|\n      return false\
    \ if l[i] > l[i+1]\n    end\n  else\n    (0..l.length-2).each do |i|\n      return\
    \ false if l[i] < l[i+1]\n    end\n  end\n  true\nend", "  return true if l.length\
    \ == 1\n  return true if l.length == 2 && l[0] == l[1]\n  if l[0] < l[1]\n   \
    \ (0..l.length-2).each do |i|\n      return false if l[i] > l[i+1]\n    end\n\
    \  else\n    (0..l.length-2).each do |i|\n      return false if l[i] < l[i+1]\n\
    \    end\n  end\n  true\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  return true\
    \ if l.size <= 1\n  if l[0] < l[1]\n    (0..l.size-2).each do |i|\n      return\
    \ false if l[i] > l[i+1]\n    end\n  else\n    (0..l.size-2).each do |i|\n   \
    \   return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", "  if l.sort\
    \ == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n\
    \    return false\n  end\nend", "  return true if l.length == 1\n  if l[0] < l[1]\n\
    \    l.each_with_index do |e, i|\n      return false if i > 0 && e < l[i-1]\n\
    \    end\n  else\n    l.each_with_index do |e, i|\n      return false if i > 0\
    \ && e > l[i-1]\n    end\n  end\n  true\nend", "  if l.sort == l\n    return true\n\
    \  elsif l.sort.reverse == l\n    return true\n  else\n    return false\n  end\n\
    end", "  return true if l.length <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[1..-1].reverse)\nend", "  return true if l.length == 1\n  if l[0]\
    \ < l[1]\n    (0..l.length-2).each do |i|\n      return false if l[i] > l[i+1]\n\
    \    end\n  else\n    (0..l.length-2).each do |i|\n      return false if l[i]\
    \ < l[i+1]\n    end\n  end\n  true\nend", "  return true if l.size <= 1\n  if\
    \ l[0] < l[1]\n    (1...l.size).each do |i|\n      return false if l[i] < l[i-1]\n\
    \    end\n  else\n    (1...l.size).each do |i|\n      return false if l[i] > l[i-1]\n\
    \    end\n  end\n  true\nend", "  return true if l.length <= 1\n  return l.sort\
    \ == l || l.sort.reverse == l\nend", "  # TODO: implement this function\nend",
  "  if l.sort == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n\
    \  else\n    return false\n  end\nend", "  if l.sort == l\n    return true\n \
    \ elsif l.sort.reverse == l\n    return true\n  else\n    return false\n  end\n\
    end", "  return true if l.size <= 1\n  return l[0] <= l[1] ? monotonic(l[1..-1])\
    \ : monotonic(l[0..-2])\nend", "  l.each_cons(2).all? { |a, b| a < b } || l.each_cons(2).all?\
    \ { |a, b| a > b }\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  if l.sort ==\
    \ l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n \
    \   return false\n  end\nend", "  return false if l.length < 2\n  return true\
    \ if l.length == 2\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  if l.sort\
    \ == l\n    return true\n  elsif l.sort.reverse == l\n    return true\n  else\n\
    \    return false\n  end\nend", "  l.each_cons(2).all? { |a, b| a <= b } || l.each_cons(2).all?\
    \ { |a, b| a >= b }\nend", "  return true if l.length == 1\n  if l[0] < l[1]\n\
    \    (0..l.length-2).each do |i|\n      return false if l[i] > l[i+1]\n    end\n\
    \  else\n    (0..l.length-2).each do |i|\n      return false if l[i] < l[i+1]\n\
    \    end\n  end\n  true\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  return true\
    \ if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  return true\
    \ if l.length <= 1\n  if l[0] < l[1]\n    (0...l.length-1).each do |i|\n     \
    \ return false if l[i] > l[i+1]\n    end\n  else\n    (0...l.length-1).each do\
    \ |i|\n      return false if l[i] < l[i+1]\n    end\n  end\n  true\nend", "  return\
    \ true if l.length == 1\n  return false if l.length == 0\n  if l[0] < l[1]\n \
    \   l.each_with_index do |e, i|\n      return false if i < l.length - 1 && e >\
    \ l[i + 1]\n    end\n  elsif l[0] > l[1]\n    l.each_with_index do |e, i|\n  \
    \    return false if i < l.length - 1 && e < l[i + 1]\n    end\n  else\n    return\
    \ false\n  end\n  true\nend", "  if l.sort == l\n    return true\n  elsif l.sort.reverse\
    \ == l\n    return true\n  else\n    return false\n  end\nend", "  return true\
    \ if l.length <= 1\n  if l[0] < l[1]\n    (1...l.length).each do |i|\n      return\
    \ false if l[i] < l[i-1]\n    end\n  else\n    (1...l.length).each do |i|\n  \
    \    return false if l[i] > l[i-1]\n    end\n  end\n  true\nend", "  l.each_cons(2).all?\
    \ { |x, y| x <= y } || l.each_cons(2).all? { |x, y| x >= y }\nend", "  return\
    \ true if l.length <= 1\n  if l[0] < l[1]\n    (0...l.length - 1).each do |i|\n\
    \      return false if l[i] > l[i + 1]\n    end\n  else\n    (0...l.length - 1).each\
    \ do |i|\n      return false if l[i] < l[i + 1]\n    end\n  end\n  true\nend",
  "  return true if l.length <= 1\n  if l[0] < l[1]\n    for i in 1..l.length-1\n\
    \      return false if l[i] < l[i-1]\n    end\n  else\n    for i in 1..l.length-1\n\
    \      return false if l[i] > l[i-1]\n    end\n  end\n  return true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
