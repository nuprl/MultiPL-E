name: HumanEval_132_is_nested
language: ruby
prompt: "# Create a function that takes a string as input which contains only square\
  \ brackets.\n# The function should return True if and only if there is a valid subsequence\
  \ of brackets \n# where at least one bracket in the subsequence is nested.\n# is_nested('[[]]')\
  \ \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E False\n# is_nested('[][]') \u279E\
  \ False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]') \u279E True\n# is_nested('[[]][[')\
  \ \u279E True\ndef is_nested(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
  \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"\
  ))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
  \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n \
  \   assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"\
  []]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
  \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n \
  \   assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
  [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
  \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
  ))\n  end\nend\n"
completions: ["  return false if string.length == 0\n  return false if string.length\
    \ == 1\n  return false if string.length.odd?\n  return false if string.count('[')\
    \ != string.count(']')\n  return true if string.count('[') == string.count(']')\n\
    \  return true if string.count('[') > string.count(']')\n  return true if string.count('[')\
    \ < string.count(']')\nend", "  string.gsub!(/\\[\\]/, '')\n  string.empty?\n\
    end", "  string.count('[') == string.count(']') && string.count('[') != 0\nend",
  "  string.scan(/\\[\\]/).size > 0\nend", "  string.scan(/\\[\\]/).size > 0\nend",
  "    string.scan(/\\[\\]/).size > 0\nend", "    string.scan(/\\[\\]/).length > 0\n\
    end", "  return false if string.length == 0\n  return false if string.length %\
    \ 2 != 0\n  return false if string.count('[') != string.count(']')\n  return false\
    \ if string.start_with?(']') || string.end_with?('[')\n  return true if string.include?('[[')\
    \ || string.include?(']]')\n  false\nend", "\tstring.scan(/\\[\\]/).length > 0\n\
    end", "\tstring.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "    string.count('[') == string.count(']') && string.count('[') > 1\nend", "  return\
    \ true if string.include?('[]')\n  return false if string.length == 0\n  return\
    \ false if string.length == 1\n  return false if string.length == 2 && string\
    \ != '[]'\n  return false if string.length == 3 && string != '[[]]'\n  return\
    \ false if string.length == 4 && string != '[[][]]'\n  return false if string.length\
    \ == 5 && string != '[[[]]]'\n  return false if string.length == 6 && string !=\
    \ '[[[]][]]'\n  return false if string.length == 7 && string != '[[[][]]]'\n \
    \ return false if string.length == 8 && string != '[[[][][]]]'\n  return false\
    \ if string.length == 9 && string != '[[[[]]][]]'\n  return false if string.length\
    \ == 10 && string != '[[[[][]]]]'\n  return false if string.length == 11 && string\
    \ != '[[[[][][]]]]'\n  return false if string.length == 12 && string != '[[[[][][][]]]]'\n\
    \  return false if string.length == 13 && string != '[[[[[]]][]]]'\n  return false\
    \ if string.length == 14 && string != '[[[[[]]][][]]]'\n  return false if string.length\
    \ == 15 && string != '[[[[[][]]]]]'\n  return false if string.length == 16 &&\
    \ string != '[[[[[][][]]]]]'\n  return false if string.length == 17 && string\
    \ != '[[[[[][][][]]]]]'\n  return false if string.length == 18 && string != '[[[[[][][][][]]]]]'\n\
    \  return false if string.length == 19 && string != '[[[[[[]]][]]]]'\n  return\
    \ false if string.length == 20 && string != '[[[[[[]]][][]]]]'\n  return false\
    \ if string.length == 21 && string != '[[[[[[][]]]]]]'\n  return false if string.length\
    \ == 22 && string != '[[[[[[][][]]]]]]'\n  return false if string.length == 23\
    \ && string != '[[[[[[][][][]]]]]]'\n  return false if string.length == 24 &&\
    \ string != '[[[[[[][][][][]]]]", "\tstring.gsub!(/\\[\\]/, \"\")\n\tstring.length\
    \ == 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')", " \
    \ string.scan(/\\[\\]/).size > 0\nend", "    stack = []\n    string.each_char\
    \ do |char|\n        if char == '['\n            stack.push(char)\n        else\n\
    \            if stack.empty?\n                return false\n            else\n\
    \                stack.pop\n            end\n        end\n    end\n    return\
    \ stack.empty?\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "  string.count('[') == string.count(']') && string.count('[') > 1\nend", "  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend", "  string.scan(/\\[\\]/).size > 0\nend", " \
    \ string.scan(/\\[\\]/).size > 0\nend", "  string.count('[') == string.count(']')\
    \ && string.count('[') != 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend", " \
    \   string.scan(/\\[\\]/).length > 0\nend", "  string.scan(/\\[\\]/).size > 0\n\
    end", "  # if string.include?(\"[]\")\n  #   return true\n  # else\n  #   return\
    \ false\n  # end\n  string.include?(\"[]\")\nend", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "  string.count('[') == string.count(']') && string.count('[') >\
    \ 1\nend", "\tstring.count('[') == string.count(']') && string.count('[') > 1\n\
    end", "  string.scan(/\\[\\]/).size > 0\nend", "    string.scan(/\\[\\]/).length\
    \ > 0\nend", "  string.scan(/\\[\\]/).size > 0\nend", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend", "    string.count('[') ==\
    \ string.count(']')\nend", "\tstring.scan(/\\[\\]/).length > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.scan(/\\[\\]/).length\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "\tstring.scan(/\\[\\]/).size\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\nend", "  string.scan(/\\[\\\
    ]/).size > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\nend", "  string.scan(/\\\
    [\\]/).size > 0\nend", "  string.count('[') == string.count(']') && string.count('[')\
    \ > 1\nend", "\tstring.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "    string.scan(/\\[\\]/).length\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend", "  return false if string.length\
    \ == 0\n  return false if string.length == 1\n  return false if string.length\
    \ % 2 != 0\n  return false if string.count('[') != string.count(']')\n  return\
    \ true if string.count('[') == string.count(']') && string.count('[') > 1\nend",
  "\tstring.scan(/\\[\\]/).length > 0\nend", "  string.scan(/\\[\\]/).size > 0\nend",
  "\tstring.scan(/\\[\\]/).length > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\n\
    end", "  string.gsub!(/\\[\\]/, '')\n  string.empty?\nend", "  string.count('[')\
    \ == string.count(']') && string.count('[') > 0\nend", "  string.gsub!(/\\[\\\
    ]/, \"\")\n  string.empty?\nend", "  return false if string.length == 0\n  return\
    \ false if string.length == 1\n  return false if string.length == 2 && string[0]\
    \ == string[1]\n  return true if string.length == 2 && string[0] != string[1]\n\
    \  return true if string.length == 3 && string[0] == string[2]\n  return false\
    \ if string.length == 3 && string[0] != string[2]\n  return true if string.length\
    \ == 4 && string[0] == string[2] && string[1] == string[3]\n  return false if\
    \ string.length == 4 && string[0] == string[2] && string[1] != string[3]\n  return\
    \ false if string.length == 4 && string[0] != string[2] && string[1] == string[3]\n\
    \  return false if string.length == 4 && string[0] != string[2] && string[1] !=\
    \ string[3]\n  return true if string.length == 5 && string[0] == string[2] &&\
    \ string[1] == string[3] && string[4] == string[2]\n  return true if string.length\
    \ == 5 && string[0] == string[2] && string[1] == string[3] && string[4] == string[0]\n\
    \  return true if string.length == 5 && string[0] == string[2] && string[1] ==\
    \ string[4] && string[3] == string[2]\n  return true if string.length == 5 &&\
    \ string[0] == string[2] && string[1] == string[4] && string[3] == string[0]\n\
    \  return true if string.length == 5 && string[0] == string[4] && string[1] ==\
    \ string[3] && string[2] == string[0]\n  return true if string.length == 5 &&\
    \ string[0] == string[4] && string[1] == string[3] && string[2] == string[1]\n\
    \  return true if string.length == 5 && string[0] == string[4] && string[1] ==\
    \ string[2] && string[3] == string[0]\n  return true if string.length == 5 &&\
    \ string", "\tstring.scan(/\\[\\]/).length > 0\nend", "  string.gsub!(/\\[\\]/,\
    \ '')\n  string.empty?\nend", "    if string.count('[') == string.count(']')\n\
    \        return false\n    else\n        return true\n    end\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "    string.gsub!(/\\[\\\
    ]/, \"\")\n    string.length == 0\nend", "  string.scan(/\\[\\]/).size > 0\nend",
  "  string.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend",
  "\topen_brackets = []\n\tstring.each_char do |char|\n\t\tif char == \"[\"\n\t\t\t\
    open_brackets << char\n\t\telsif char == \"]\"\n\t\t\tif open_brackets.empty?\n\
    \t\t\t\treturn false\n\t\t\telse\n\t\t\t\topen_brackets.pop\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn true\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "\tstring.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "\tstring.scan(/\\[\\]/).size > 0\nend", "    stack = []\n    string.each_char do\
    \ |char|\n        if char == '['\n            stack.push(char)\n        else\n\
    \            if stack.length == 0\n                return false\n            else\n\
    \                stack.pop\n            end\n        end\n    end\n    return\
    \ stack.length == 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "\tstring.scan(/\\[\\]/).length > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "\tstring.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\nend",
  "\tstring.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "\tstring.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend",
  "  string.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "    stack = []\n    string.each_char do |char|\n        if char == '['\n      \
    \      stack.push(char)\n        else\n            if stack.length == 0\n    \
    \            return false\n            else\n                stack.pop\n     \
    \       end\n        end\n    end\n    return stack.length == 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.gsub!(/\\[\\]/,\
    \ '')\n  string.empty?\nend", "  return false if string.length == 0\n  return\
    \ false if string.length == 1\n  return false if string.length.odd?\n  return\
    \ false if string.count('[') != string.count(']')\n  return true if string.count('[')\
    \ == string.count(']')\n  return true if string.count('[') > string.count(']')\n\
    \  return true if string.count('[') < string.count(']')\nend", "  string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend", "  return false if string.length\
    \ == 0\n  return false if string.length == 1\n  return false if string.length.odd?\n\
    \  return false if string.count('[') != string.count(']')\n  return true if string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend", "  string.scan(/\\[\\]/).length\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "\tif string.include?(\"\
    []\")\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.gsub!(/\\[\\]/,\
    \ '')\n  string.empty?\nend", "\tstring.count('[') == string.count(']') && string.count('[')\
    \ > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')", " \
    \ string.scan(/\\[\\]/).size > 0\nend", "\tstring.gsub!(/\\[\\]/, '')\n\tstring.empty?\n\
    end", "  string.scan(/\\[\\]/).size > 0\nend", "    string.scan(/\\[\\]/).size\
    \ > 0\nend", "  string.scan(/\\[\\]/).size > 0\nend", "  string.count('[') ==\
    \ string.count(']') && string.count('[') > 0\nend", "\tstring.scan(/\\[\\]/).size\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "    string.scan(/\\[\\]/).size\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "  return false if string.length < 2\n  return false if string.count('[')\
    \ != string.count(']')\n  string.gsub!('[]', '')\n  return true if string.empty?\n\
    \  is_nested(string)\nend", "\tstring.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "    string.gsub!(/\\[\\]/, '')\n    string.empty?\nend\np is_nested('[[]]')\np\
    \ is_nested('[]]]]]]][[[[[]')\np is_nested('[][]')\np is_nested('[]')\np is_nested('[[][]]')\n\
    p is_nested('[[]][[')", "    stack = []\n    string.each_char do |char|\n    \
    \    if char == '['\n            stack.push(char)\n        else\n            if\
    \ stack.empty?\n                return false\n            else\n             \
    \   stack.pop\n            end\n        end\n    end\n    return stack.empty?\n\
    end\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')", "\t\
    string.scan(/\\[\\]/).length > 0\nend", "  string.scan(/\\[\\]/).size > 0\nend",
  "  return false if string.length < 2\n  return false if string.length.odd?\n  return\
    \ false if string.count('[') != string.count(']')\n  return false if string.count('[')\
    \ == 1 && string.count(']') == 1\n  return true if string.count('[') > 1 && string.count(']')\
    \ > 1\nend", "  string.scan(/\\[\\]/).size > 0\nend", "    # if string.count('[')\
    \ == string.count(']')\n    #     return false\n    # else\n    #     return true\n\
    \    # end\n    string.count('[') != string.count(']')\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  return false if string.length\
    \ == 0\n  return false if string.length == 1\n  return false if string.length\
    \ == 2 && string[0] == '[' && string[1] == ']'\n  return true if string.length\
    \ == 2 && string[0] == '[' && string[1] == '['\n  return true if string.length\
    \ == 2 && string[0] == ']' && string[1] == ']'\n  return true if string.length\
    \ == 2 && string[0] == ']' && string[1] == '['\n  return false if string.length\
    \ == 2 && string[0] == ']' && string[1] == ']'\n  return true if string.length\
    \ == 3 && string[0] == '[' && string[1] == '[' && string[2] == ']'\n  return true\
    \ if string.length == 3 && string[0] == '[' && string[1] == ']' && string[2] ==\
    \ ']'\n  return true if string.length == 3 && string[0] == '[' && string[1] ==\
    \ ']' && string[2] == '['\n  return true if string.length == 3 && string[0] ==\
    \ ']' && string[1] == '[' && string[2] == '['\n  return true if string.length\
    \ == 3 && string[0] == ']' && string[1] == '[' && string[2] == ']'\n  return true\
    \ if string.length == 3 && string[0] == ']' && string[1] == ']' && string[2] ==\
    \ '['\n  return true if string.length == 3 && string[0] == ']' && string[1] ==\
    \ ']' && string[2] == ']'\n  return true if string.length == 4 && string[0] ==\
    \ '[' && string[1] == '[' && string[2] == ']' && string[3] == ']'\n  return true\
    \ if string.length == 4 && string[0] == '[' && string[1] == '[' && string[2] ==\
    \ ']' && string[3] == '['\n  return true if string.length == 4 && string[0] ==\
    \ '[' && string[1] == '[' && string[2] == '[' && string[3] ==", "  return false\
    \ if string.length == 0\n  return false if string.length == 1\n  return false\
    \ if string.length == 2 && string[0] == string[1]\n  return true if string.length\
    \ == 2 && string[0] != string[1]\n  return false if string.length == 3 && string[0]\
    \ == string[1] && string[1] == string[2]\n  return true if string.length == 3\
    \ && string[0] == string[1] && string[1] != string[2]\n  return true if string.length\
    \ == 3 && string[0] != string[1] && string[1] == string[2]\n  return true if string.length\
    \ == 3 && string[0] != string[1] && string[1] != string[2]\n  return false if\
    \ string.length == 4 && string[0] == string[1] && string[1] == string[2] && string[2]\
    \ == string[3]\n  return true if string.length == 4 && string[0] == string[1]\
    \ && string[1] == string[2] && string[2] != string[3]\n  return true if string.length\
    \ == 4 && string[0] == string[1] && string[1] != string[2] && string[2] == string[3]\n\
    \  return true if string.length == 4 && string[0] == string[1] && string[1] !=\
    \ string[2] && string[2] != string[3]\n  return true if string.length == 4 &&\
    \ string[0] != string[1] && string[1] == string[2] && string[2] == string[3]\n\
    \  return true if string.length == 4 && string[0] != string[1] && string[1] ==\
    \ string[2] && string[2] != string[3]\n  return true if string.length == 4 &&\
    \ string[0] != string[1] && string[1] != string[2] && string[2] == string[3]\n\
    \  return true if string.length == 4 && string[0] != string[1] && string[1] !=\
    \ string[2] && string[2] != string[3]\n  return false if string.length == 5 &&\
    \ string", "  string.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).size\
    \ > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')", " \
    \ string.scan(/\\[\\]/).size > 0\nend", "    string.scan(/\\[\\]/).length > 0\n\
    end", "  string.count('[') == string.count(']') && string.count('[') != 0\nend",
  "\tstring.scan(/\\[\\]/).length > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend",
  "\tif string.include?(\"[\") && string.include?(\"]\")\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "  string.gsub!(/\\[\\]/, '')\n  string.empty?\nend", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "    string.scan(/\\[\\]/).size > 0\nend", "  string.gsub!(/\\[\\\
    ]/, '')\n  string.empty?\nend", "\tstring.count('[') == string.count(']') && string.count('[')\
    \ > 0\nend", "    return false if string.length == 0\n    return false if string.length\
    \ == 1\n    return false if string.length == 2 && string[0] == '[' && string[1]\
    \ == ']'\n    return true if string.length == 2 && string[0] == '[' && string[1]\
    \ == '['\n    return true if string.length == 2 && string[0] == ']' && string[1]\
    \ == ']'\n    return true if string.length == 3 && string[0] == '[' && string[1]\
    \ == '[' && string[2] == ']'\n    return true if string.length == 3 && string[0]\
    \ == ']' && string[1] == ']' && string[2] == ']'\n    return true if string.length\
    \ == 3 && string[0] == '[' && string[1] == ']' && string[2] == ']'\n    return\
    \ true if string.length == 3 && string[0] == ']' && string[1] == '[' && string[2]\
    \ == ']'\n    return true if string.length == 3 && string[0] == ']' && string[1]\
    \ == ']' && string[2] == '['\n    return true if string.length == 3 && string[0]\
    \ == '[' && string[1] == ']' && string[2] == '['\n    return true if string.length\
    \ == 3 && string[0] == '[' && string[1] == '[' && string[2] == '['\n    return\
    \ true if string.length == 3 && string[0] == ']' && string[1] == ']' && string[2]\
    \ == ']'\n    return true if string.length == 3 && string[0] == ']' && string[1]\
    \ == '[' && string[2] == '['\n    return true if string.length == 3 && string[0]\
    \ == '[' && string[1] == ']' && string[2] == ']'\n    return true if string.length\
    \ == 3 && string[0] == '[' && string[1] == '[' && string[2] == ']'\n    return\
    \ true if string.length == 3 && string[0] == ']' && string[1] == '[' && string[2]\
    \ == ']'\n    return true if string", "  string.split('').each_with_index do |char,\
    \ index|\n    if char == '[' && string[index + 1] == ']'\n      return true\n\
    \    end\n  end\n  false\nend", "  string.count('[') == string.count(']') && string.count('[')\
    \ > 1\nend", "  return false if string.length == 0\n  return false if string.length\
    \ == 1\n  return false if string.length.odd?\n  return false if string.count('[')\
    \ != string.count(']')\n  return true if string.count('[') == string.count(']')\
    \ && string.count('[') > 1\nend", "\tstring.scan(/\\[\\]/).size > 0\nend", " \
    \   string.count('[') == string.count(']')\nend", "\tstring.scan(/\\[\\]/).size\
    \ > 0\nend", "\t# return false if string.length % 2 != 0\n\t# return false if\
    \ string.length == 0\n\t# return false if string.length == 2\n\t# return true\
    \ if string.length > 2\n\t# return true if string.length == 4\n\t# return true\
    \ if string.length == 6\n\t# return true if string.length == 8\n\t# return true\
    \ if string.length == 10\n\t# return true if string.length == 12\n\t# return true\
    \ if string.length == 14\n\t# return true if string.length == 16\n\t# return true\
    \ if string.length == 18\n\t# return true if string.length == 20\n\t# return true\
    \ if string.length == 22\n\t# return true if string.length == 24\n\t# return true\
    \ if string.length == 26\n\t# return true if string.length == 28\n\t# return true\
    \ if string.length == 30\n\t# return true if string.length == 32\n\t# return true\
    \ if string.length == 34\n\t# return true if string.length == 36\n\t# return true\
    \ if string.length == 38\n\t# return true if string.length == 40\n\t# return true\
    \ if string.length == 42\n\t# return true if string.length == 44\n\t# return true\
    \ if string.length == 46\n\t# return true if string.length == 48\n\t# return true\
    \ if string.length == 50\n\t# return true if string.length == 52\n\t# return true\
    \ if string.length == 54\n\t# return true if string.length == 56\n\t# return true\
    \ if string.length == 58\n\t# return true if string.length == 60\n\t# return true\
    \ if string.length == 62\n\t# return true if string.length == 64\n\t# return true\
    \ if string.length == 66\n\t# return true if string.length == 68\n\t# return true\
    \ if string.length == 70\n\t# return true if string.length == 72\n\t# return true\
    \ if string.length == 74\n\t# return true if string.length == 76\n\t# return true\
    \ if string.length == 78\n\t# return true if string.length == 80\n\t# return true\
    \ if string.length == 82\n\t# return true if string.length == 84\n\t# return true\
    \ if string.length == 86\n\t# return", "  string.scan(/\\[\\]/).size == string.size\
    \ / 2\nend", "  string.gsub!(/\\[\\]/, '')\n  string.empty?\nend", "  string.scan(/\\\
    [\\]/).size > 0\nend", "  string.scan(/\\[\\]/).length > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "    string.count('[') == string.count(']') && string.count('[')\
    \ > 1\nend", "  string.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).size\
    \ > 0\nend", "    if string.count('[') == string.count(']')\n        return false\n\
    \    else\n        return true\n    end\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "\tstring.count('[') == string.count(']') && string.count('[') > 1\nend", "  string.scan(/\\\
    [\\]/).length > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "    string.gsub!(/\\[\\\
    ]/, '')\n    string.empty?\nend", "\tstring.scan(/\\[\\]/).size > 0\nend", " \
    \ string.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\n\
    end", "  string.count('[') == string.count(']') && string.count('[') > 1\nend",
  "  string.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\nend\n\
    puts is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')", " \
    \   string.scan(/\\[\\]/).size > 0\nend", "  string.scan(/\\[\\]/).size > 0\n\
    end", "\tstring.scan(/\\[\\]/).size > 0\nend", "  string.scan(/\\[\\]/).size >\
    \ 0\nend", "  string.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).size\
    \ > 0\nend", "  string.count('[') == string.count(']') && string.count('[') >\
    \ 1\nend", "  string.scan(/\\[\\]/).size > 0\nend", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "    stack = []\n    string.each_char do |char|\n        if char\
    \ == '['\n            stack.push(char)\n        else\n            if stack.empty?\n\
    \                return false\n            else\n                stack.pop\n \
    \           end\n        end\n    end\n    return stack.empty?\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.scan(/\\[\\]/).size\
    \ > 0\nend", "  string.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).length\
    \ > 0\nend", "  string.count('[') == string.count(']') ? false : true\nend", "\t\
    string.scan(/\\[\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')",
  "\tstring.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).size > 0\nend",
  "\tstring.scan(/\\[\\]/).length > 0\nend", "  string.scan(/\\[\\]/).size > 0\nend",
  "\tstring.scan(/\\[\\]/).size > 0\nend", "\tstring.gsub!(/\\[\\]/, '')\n\tstring.empty?\n\
    end", "    return false if string.length == 0\n    return false if string.length\
    \ == 1\n    return true if string.length == 2 && string[0] == \"[\" && string[1]\
    \ == \"]\"\n    return false if string.length == 2 && string[0] != \"[\" && string[1]\
    \ != \"]\"\n    return false if string.length == 2 && string[0] == \"[\" && string[1]\
    \ != \"]\"\n    return false if string.length == 2 && string[0] != \"[\" && string[1]\
    \ == \"]\"\n    return true if string.length == 3 && string[0] == \"[\" && string[1]\
    \ == \"[\" && string[2] == \"]\"\n    return true if string.length == 3 && string[0]\
    \ == \"[\" && string[1] == \"]\" && string[2] == \"]\"\n    return true if string.length\
    \ == 3 && string[0] == \"[\" && string[1] == \"]\" && string[2] == \"[\"\n   \
    \ return true if string.length == 3 && string[0] == \"]\" && string[1] == \"[\"\
    \ && string[2] == \"]\"\n    return true if string.length == 3 && string[0] ==\
    \ \"]\" && string[1] == \"]\" && string[2] == \"[\"\n    return true if string.length\
    \ == 3 && string[0] == \"]\" && string[1] == \"]\" && string[2] == \"]\"\n   \
    \ return true if string.length == 3 && string[0] == \"]\" && string[1] == \"[\"\
    \ && string[2] == \"[\"\n    return true if string.length == 3 && string[0] ==\
    \ \"[\" && string[1] == \"[\" && string[2] == \"[\"\n    return true if string.length\
    \ == 3 && string[0] == \"[\" && string[1] == \"[\" && string[2] == \"]\"\n   \
    \ return true if string.length == 3 && string[0] == \"[\" && string[1] == \"]\"\
    \ && string[2] == \"[\"\n    return true if string.length == 3 && string[0] ==\
    \ \"]\" && string[1] == \"[\" && string[2] == \"[\"\n    return true if string.length\
    \ == 3 && string[0", "  string.scan(/\\[\\]/).length > 0\nend", "  string.scan(/\\\
    [\\]/).size > 0\nend", "  string.gsub!(/\\[\\]/, '') until string.gsub!(/\\[\\\
    ]/, '').nil?\n  string.empty?\nend", "    count = 0\n    string.each_char do |char|\n\
    \        if char == '['\n            count += 1\n        elsif char == ']'\n \
    \           count -= 1\n        end\n        if count < 0\n            return\
    \ false\n        end\n    end\n    return count == 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  return false if string.length\
    \ == 0\n  return false if string.length == 1\n  return false if string.length\
    \ % 2 != 0\n  return false if string.count('[') != string.count(']')\n  return\
    \ true if string.count('[') == string.count(']')\nend", "  string.count('[') ==\
    \ string.count(']')\nend", "  return false if string.length < 2\n  return false\
    \ if string.length.odd?\n  return false if string.count('[') != string.count(']')\n\
    \  return true if string.count('[') == 1 && string.count(']') == 1\n  return true\
    \ if string.count('[') == 2 && string.count(']') == 2\n  return true if string.count('[')\
    \ == 3 && string.count(']') == 3\n  return true if string.count('[') == 4 && string.count(']')\
    \ == 4\n  return true if string.count('[') == 5 && string.count(']') == 5\n  return\
    \ true if string.count('[') == 6 && string.count(']') == 6\n  return true if string.count('[')\
    \ == 7 && string.count(']') == 7\n  return true if string.count('[') == 8 && string.count(']')\
    \ == 8\n  return true if string.count('[') == 9 && string.count(']') == 9\n  return\
    \ true if string.count('[') == 10 && string.count(']') == 10\n  return true if\
    \ string.count('[') == 11 && string.count(']') == 11\n  return true if string.count('[')\
    \ == 12 && string.count(']') == 12\n  return true if string.count('[') == 13 &&\
    \ string.count(']') == 13\n  return true if string.count('[') == 14 && string.count(']')\
    \ == 14\n  return true if string.count('[') == 15 && string.count(']') == 15\n\
    \  return true if string.count('[') == 16 && string.count(']') == 16\n  return\
    \ true if string.count('[') == 17 && string.count(']') == 17\n  return true if\
    \ string.count('[') == 18 && string.count(']') == 18\n  return true if string.count('[')\
    \ == 19 && string.count(']') == 19\n  return true if string.count('[') == 20 &&\
    \ string.count(']') == 20\n  return true if string.count('[') == 21 && string.count(']')\
    \ == 21\n  return true if string.count('[')", "\tif string.include?(\"[[\") ||\
    \ string.include?(\"]]\")\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')", " \
    \   return false if string.length == 0\n    return false if string.length == 1\n\
    \    return false if string.length.odd?\n    return false if string.count('[')\
    \ != string.count(']')\n    return true if string.include?('[[')\n    return true\
    \ if string.include?(']]')\n    return true if string.include?('][')\n    return\
    \ true if string.include?('][')\n    return false\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "    return false if string.length\
    \ == 0\n    return false if string.length == 1\n    return false if string.length\
    \ % 2 != 0\n    return false if string.count('[') != string.count(']')\n    return\
    \ true\nend", "\treturn true if string.include?(\"[]\")\n\treturn false\nend\n\
    puts is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')", " \
    \ string.scan(/\\[\\]/).size > 0\nend", "\tstring.scan(/\\[\\]/).length > 0\n\
    end", "  string.count('[') == string.count(']') ? false : true\nend", "  string.scan(/\\\
    [\\]/).size > 0\nend", "  string.count('[') == string.count(']') && string.count('[')\
    \ > 0\nend", "    stack = []\n    string.each_char do |char|\n        if char\
    \ == '['\n            stack.push(char)\n        else\n            if stack.length\
    \ == 0\n                return false\n            else\n                stack.pop\n\
    \            end\n        end\n    end\n    return stack.length == 0\nend\nputs\
    \ is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')", " \
    \ return false if string.length < 2\n  return false if string.length % 2 != 0\n\
    \  return false if string.count('[') != string.count(']')\n  return true if string.count('[')\
    \ == string.count(']')\nend", "  string.scan(/\\[\\]/).size > 0\nend", "  return\
    \ false if string.length == 0\n  return true if string.length == 2\n  return false\
    \ if string.length == 1\n  return true if string.length == 4\n  return false if\
    \ string.length == 3\n  return true if string.length == 6\n  return false if string.length\
    \ == 5\n  return true if string.length == 8\n  return false if string.length ==\
    \ 7\n  return true if string.length == 10\n  return false if string.length ==\
    \ 9\n  return true if string.length == 12\n  return false if string.length ==\
    \ 11\n  return true if string.length == 14\n  return false if string.length ==\
    \ 13\n  return true if string.length == 16\n  return false if string.length ==\
    \ 15\n  return true if string.length == 18\n  return false if string.length ==\
    \ 17\n  return true if string.length == 20\n  return false if string.length ==\
    \ 19\n  return true if string.length == 22\n  return false if string.length ==\
    \ 21\n  return true if string.length == 24\n  return false if string.length ==\
    \ 23\n  return true if string.length == 26\n  return false if string.length ==\
    \ 25\n  return true if string.length == 28\n  return false if string.length ==\
    \ 27\n  return true if string.length == 30\n  return false if string.length ==\
    \ 29\n  return true if string.length == 32\n  return false if string.length ==\
    \ 31\n  return true if string.length == 34\n  return false if string.length ==\
    \ 33\n  return true if string.length == 36\n  return false if string.length ==\
    \ 35\n  return true if string.length == 38\n  return false if string.length ==\
    \ 37\n  return true if string.length == 40\n  return false if string.length ==\
    \ 39\n  return true if string.length == 42\n  return false if string.length ==\
    \ 41\n  return true if string.length == 44\n  return false if string.length ==\
    \ 43\n  return true if string.length == 46\n  return false if string.length ==\
    \ 45\n  return true if string.length == 48\n  return false if string.length ==\
    \ 47\n  return true if string.length == 50\n  return false if string.length ==\
    \ 49\n ", "\tstring.scan(/\\[\\]/).size > 0\nend\np is_nested('[[]]')\np is_nested('[]]]]]]][[[[[]')\n\
    p is_nested('[][]')\np is_nested('[]')\np is_nested('[[][]]')\np is_nested('[[]][[')",
  "  string.scan(/\\[\\]/).size > 0\nend", "    if string.count('[') == string.count(']')\n\
    \        return false\n    else\n        return true\n    end\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')", "  string.count('[') == string.count(']')\
    \ && string.count('[') > 1\nend", "    string.scan(/\\[\\]/).length > 0\nend\n\
    puts is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
