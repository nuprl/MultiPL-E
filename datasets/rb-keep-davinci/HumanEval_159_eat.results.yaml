name: HumanEval_159_eat
language: ruby
results:
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoxb7e79n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoxb7e79n.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.012532 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.80 tests/s, 79.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  number + need > remaining ? [remaining, 0] : [number + need, remaining\
    \ - (number + need)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5,\
    \ 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpai54uprn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpai54uprn.rb:30:in\
    \ `test_eat'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:  \
    \ def test_eat\n     29:     candidate = method(:eat)\n  => 30:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     31:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     32:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 33:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00335 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.51 tests/s, 298.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4anfwqz5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4anfwqz5.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.020865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.93 tests/s, 47.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  # Your code here\n  if number + need <= remaining\n    [number\
    \ + need, remaining - (number + need)]\n  else\n    [remaining + number, 0]\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5,\
    \ 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qt33tin\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2qt33tin.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.58 tests/s, 221.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg7tgjoe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg7tgjoe.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.71 tests/s, 297.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskhs8tbd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpskhs8tbd.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.018272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.73 tests/s, 54.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps0owg7rr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps0owg7rr.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.011494 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.00 tests/s, 87.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qqohljw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qqohljw.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.011663 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.74 tests/s, 85.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  # your code here\n  if number + need <= remaining\n    [number\
    \ + need, remaining - (number + need)]\n  else\n    [number + remaining, 0]\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5,\
    \ 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2em6pglr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2em6pglr.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.005186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.83 tests/s, 192.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxrnw0ncw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxrnw0ncw.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.30 tests/s, 300.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz_x20jk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsz_x20jk.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.38 tests/s, 296.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq71t3zkl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq71t3zkl.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.030409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.89 tests/s, 32.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv0m80xnj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv0m80xnj.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 292.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwxd_z91\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwxd_z91.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.72 tests/s, 218.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1aao96x2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1aao96x2.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.017058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.62 tests/s, 58.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt157iyad\n\
    Started\n.\nFinished in 0.000188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5319.15 tests/s, 31914.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqayy_6w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqayy_6w.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.86 tests/s, 295.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_t7a3gs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_t7a3gs.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.27 tests/s, 288.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  # your code here\n  if number + need > remaining\n    [remaining,\
    \ 0]\n  else\n    [number + need, remaining - (number + need)]\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n  \
    \  candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n\
    \    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0],\
    \ candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n\
    \    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4,\
    \ 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoat5ifv0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoat5ifv0.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.018899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.91 tests/s, 52.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_bjuedy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_bjuedy.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.09 tests/s, 284.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuk9ab5kk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuk9ab5kk.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003936 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.07 tests/s, 254.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6qcmel1e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6qcmel1e.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.85 tests/s, 287.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15zi982t\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 28846.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining < need\n    [number + remaining, 0]\n  else\n   \
    \ [number + need, remaining - need]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2rmg7lvb\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 30150.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    return [number + need, remaining\
    \ - (number + need)]\n  else\n    return [number + remaining, 0]\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n\
    \    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6,\
    \ 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6_1druf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6_1druf.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.027969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.75 tests/s, 35.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    return [number + need, remaining\
    \ - (number + need)]\n  else\n    return [number + remaining, 0]\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n\
    \    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6,\
    \ 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeh9fmyfy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeh9fmyfy.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.024624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.61 tests/s, 40.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1vpxfdd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv1vpxfdd.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.009347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.99 tests/s, 106.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_db50ec\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_db50ec.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.03 tests/s, 300.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75ahf_a9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75ahf_a9.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 290.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx1n0rpm5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx1n0rpm5.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.60 tests/s, 295.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__bge432\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__bge432.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.02 tests/s, 301.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpimj1qhuq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpimj1qhuq.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.77 tests/s, 295.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - number - need]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydghlpo_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydghlpo_.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003445 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.28 tests/s, 290.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1vj1yc9\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 25862.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_w1h3im\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_w1h3im.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.005497 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.92 tests/s, 181.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxxm0w57c\n\
    Started\n.\nFinished in 0.00749 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    133.51 tests/s, 801.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpshsqj091\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpshsqj091.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.42 tests/s, 274.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfq3pbcw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsfq3pbcw.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.68 tests/s, 288.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  total = number + need\n  if total > remaining\n    return [remaining,\
    \ 0]\n  else\n    return [total, remaining - total]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprjbblm60\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprjbblm60.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.48 tests/s, 264.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6gljlqs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6gljlqs.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.45 tests/s, 281.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_bq_lws\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_bq_lws.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.03 tests/s, 287.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyrmybxdz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyrmybxdz.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.31 tests/s, 299.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  number + need <= remaining ? [number + need, remaining - (number\
    \ + need)] : [remaining + number, 0]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq95zgx8k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq95zgx8k.rb:30:in\
    \ `test_eat'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:  \
    \ def test_eat\n     29:     candidate = method(:eat)\n  => 30:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     31:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     32:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 33:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.34 tests/s, 293.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7573v_gs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7573v_gs.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003454 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.52 tests/s, 289.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyc0zcn1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyc0zcn1.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.006211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.00 tests/s, 161.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8f9j0g7g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8f9j0g7g.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.30 tests/s, 301.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatmfqex4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpatmfqex4.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.98 tests/s, 284.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgo79ohg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgo79ohg.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.34 tests/s, 293.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if (number + need) <= remaining\n    [number + need, remaining\
    \ - (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n  \
    \  candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n\
    \    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0],\
    \ candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n\
    \    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4,\
    \ 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd0ba6g__\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd0ba6g__.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.93 tests/s, 301.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12txwm8i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12txwm8i.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.55 tests/s, 294.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - number - need]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfh_81ef9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfh_81ef9.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.65 tests/s, 282.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzoalqol\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzoalqol.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.81 tests/s, 282.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusvvayx7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusvvayx7.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.65 tests/s, 292.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwep_qak3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwep_qak3.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.83 tests/s, 269.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz1vg21gu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz1vg21gu.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.008123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.11 tests/s, 123.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycozytbz\n\
    Started\n.\nFinished in 0.001029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    971.82 tests/s, 5830.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqehfv_c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqehfv_c.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.01 tests/s, 278.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwg3vf9ho\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwg3vf9ho.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.80 tests/s, 285.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0bx87cxb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0bx87cxb.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004528 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.85 tests/s, 220.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ojyk_jx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ojyk_jx.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.53 tests/s, 290.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  # your code here\n  if number + need <= remaining\n    [number\
    \ + need, remaining - (number + need)]\n  else\n    [number + remaining, 0]\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5,\
    \ 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb5nuacds\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb5nuacds.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003452 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.69 tests/s, 289.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ number - need]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzstqnqhc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzstqnqhc.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.85 tests/s, 235.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp669fjwhd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp669fjwhd.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.12 tests/s, 286.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxa7t1st\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxa7t1st.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.27 tests/s, 287.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining < need\n    [number + remaining, 0]\n  else\n   \
    \ [number + need, remaining - need]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwj2zzwiy\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 30303.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4z6iuux4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4z6iuux4.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.28 tests/s, 155.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps7ywbrsx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps7ywbrsx.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.62 tests/s, 277.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa41zblae\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa41zblae.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.41 tests/s, 279.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem1onpaq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpem1onpaq.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.60 tests/s, 293.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp_ux78t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqp_ux78t.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.16 tests/s, 181.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfrgux5zp\n\
    Started\n.\nFinished in 0.000636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1572.33 tests/s, 9433.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ipqr8bt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ipqr8bt.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.020341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.16 tests/s, 49.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnr0dkkkv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnr0dkkkv.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.006115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.53 tests/s, 163.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhqtbowg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhqtbowg.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.046816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.36 tests/s, 21.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d1tysy8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6d1tysy8.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.91 tests/s, 296.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuk761a6f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuk761a6f.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.005227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.31 tests/s, 191.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvn9ao35\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvn9ao35.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003733 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.88 tests/s, 267.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  # your code here\n  if number + need <= remaining\n    [number\
    \ + need, remaining - (number + need)]\n  else\n    [number + remaining, 0]\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5,\
    \ 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckuz6gq4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckuz6gq4.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003839 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.48 tests/s, 260.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcj_ubho1\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 30456.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpth6emuox\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpth6emuox.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.40 tests/s, 292.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeg7hynlm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeg7hynlm.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.005561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.82 tests/s, 179.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphii9hidm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphii9hidm.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.80 tests/s, 244.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ number - need]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ytue3o9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ytue3o9.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003601 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.70 tests/s, 277.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpupazb8\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 29556.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsi2xcty\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsi2xcty.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.30 tests/s, 296.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxh5a1u47\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxh5a1u47.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.025908 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.60 tests/s, 38.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72kw2prb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72kw2prb.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.30 tests/s, 100.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  # your code here\n  if remaining >= need\n    [number + need,\
    \ remaining - need]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n  \
    \  candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n\
    \    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0],\
    \ candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n\
    \    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4,\
    \ 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppfu35lbf\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 30000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp177vhf7s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp177vhf7s.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    271.74 tests/s, 271.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_14o2u_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk_14o2u_.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.007689 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.06 tests/s, 130.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1re91rq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1re91rq.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.12 tests/s, 286.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgb09of2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgb09of2.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.023956 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    41.74 tests/s, 41.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rqmhgz2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rqmhgz2.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003917 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.30 tests/s, 255.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcpddf_pi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcpddf_pi.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.17 tests/s, 293.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_i1n7bqo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_i1n7bqo.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.61 tests/s, 290.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgsdl5567\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgsdl5567.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.22 tests/s, 299.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnk_v2cy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnk_v2cy.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.82 tests/s, 182.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - number - need]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiaeviflk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiaeviflk.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.52 tests/s, 200.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if (number + need) > remaining\n    [remaining, 0]\n  else\n \
    \   [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3tz5jqte\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3tz5jqte.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.018863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.01 tests/s, 53.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71wupf6b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp71wupf6b.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.94 tests/s, 275.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxyrue5mu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxyrue5mu.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.033728 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    29.65 tests/s, 29.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_gtz8h0l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_gtz8h0l.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003387 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.25 tests/s, 295.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    return [number + need, remaining\
    \ - (number + need)]\n  else\n    return [number + remaining, 0]\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n\
    \    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6,\
    \ 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwq6mfylb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwq6mfylb.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003498 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.88 tests/s, 285.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_i6utr5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_i6utr5.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.006417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.84 tests/s, 155.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5avuivd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5avuivd.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.010004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.96 tests/s, 99.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqylhj34_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqylhj34_.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.89 tests/s, 291.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnhmqv36\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnhmqv36.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.95 tests/s, 290.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  # your code here\n  if number + need <= remaining\n    [number\
    \ + need, remaining - (number + need)]\n  else\n    [number + remaining, 0]\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5,\
    \ 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1ni5qjh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1ni5qjh.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.007516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.05 tests/s, 133.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    return [number + need, remaining - need]\n\
    \  else\n    return [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpscw99tes\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 28571.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpukhmi403\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpukhmi403.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.008681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.19 tests/s, 115.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkziedyi2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkziedyi2.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.36 tests/s, 290.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3gjglcg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3gjglcg.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.27 tests/s, 280.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh19yl0j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh19yl0j.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.15 tests/s, 233.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9yiszs8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9yiszs8.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.68 tests/s, 202.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurfxevms\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurfxevms.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.79 tests/s, 275.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpevlimjpr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpevlimjpr.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.006282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.18 tests/s, 159.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  number + need <= remaining ? [number + need, remaining - (number\
    \ + need)] : [remaining + number, 0]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_1y4qu1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_1y4qu1.rb:30:in\
    \ `test_eat'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:  \
    \ def test_eat\n     29:     candidate = method(:eat)\n  => 30:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     31:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     32:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 33:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.17 tests/s, 293.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi51u7knf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi51u7knf.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.051302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    19.49 tests/s, 19.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_lw9_lq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_lw9_lq.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.93 tests/s, 283.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvfsgdya7\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 28985.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2jeymmi9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2jeymmi9.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.29 tests/s, 286.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpely1n5n9\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 30303.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzboavqc2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzboavqc2.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.42 tests/s, 295.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3v9h365\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe3v9h365.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.039359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.41 tests/s, 25.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo4okuvkt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo4okuvkt.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003404 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.77 tests/s, 293.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmjzgdxu\n\
    Started\n.\nFinished in 0.000765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1307.19 tests/s, 7843.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdaerv6q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcdaerv6q.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.012751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    78.43 tests/s, 78.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo6rhnim0\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 29411.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpndn324sg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpndn324sg.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.048661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    20.55 tests/s, 20.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2kma0oh_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2kma0oh_.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.66 tests/s, 280.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18keywmb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp18keywmb.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.026402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.88 tests/s, 37.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8k702tkq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8k702tkq.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.53 tests/s, 290.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2eqjo8l5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2eqjo8l5.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.013788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.53 tests/s, 72.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvg3957um\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp379u9ius\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp379u9ius.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.27 tests/s, 297.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0x538_k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0x538_k.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.84 tests/s, 300.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjkl2zhc9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjkl2zhc9.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.010074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.27 tests/s, 99.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ number - need]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe414aq1a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe414aq1a.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004943 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.31 tests/s, 202.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  number + need <= remaining ? [number + need, remaining - (number\
    \ + need)] : [remaining + number, 0]\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps46j136g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps46j136g.rb:30:in\
    \ `test_eat'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:  \
    \ def test_eat\n     29:     candidate = method(:eat)\n  => 30:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     31:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     32:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 33:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003409 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.34 tests/s, 293.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6iah42p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6iah42p.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.029067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    34.40 tests/s, 34.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cbu62gx\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 29411.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbrdlvxh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbrdlvxh.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.008417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.81 tests/s, 118.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjkut4x6p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjkut4x6p.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003451 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.77 tests/s, 289.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6b5h8ni\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6b5h8ni.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    251.57 tests/s, 251.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_0jlmso\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_0jlmso.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004792 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.68 tests/s, 208.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk10ib02h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk10ib02h.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.02 tests/s, 290.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeswkarll\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeswkarll.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.57 tests/s, 292.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6d_ys0y\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 28846.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4454w30p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4454w30p.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.009263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.96 tests/s, 107.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0qos_7d\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 26315.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8clsk2xz\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 30927.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  # your code here\n  if number + need > remaining\n    [remaining,\
    \ 0]\n  else\n    [number + need, remaining - (number + need)]\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n  \
    \  candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n\
    \    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0],\
    \ candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n\
    \    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4,\
    \ 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp72vk2i6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp72vk2i6.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.86 tests/s, 286.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkynq8bi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptkynq8bi.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.046678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.42 tests/s, 21.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpautd2zs2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpautd2zs2.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.72 tests/s, 294.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if (number + need) > remaining\n    [remaining, 0]\n  else\n \
    \   [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpayce5x83\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpayce5x83.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.0412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.27 tests/s, 24.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyqt_2wh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyqt_2wh.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004866 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.51 tests/s, 205.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmlgp0cso\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmlgp0cso.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.93 tests/s, 300.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmdks5kr4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmdks5kr4.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.66 tests/s, 300.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptz6_596w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptz6_596w.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.47 tests/s, 209.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zht5ke7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zht5ke7.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003509 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.98 tests/s, 284.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3dzt_on\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3dzt_on.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.63 tests/s, 248.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  total = number + need\n  if total > remaining\n    [remaining,\
    \ 0]\n  else\n    [total, remaining - total]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyd7svf9s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyd7svf9s.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.014764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.73 tests/s, 67.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1xx5t0zd\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 28037.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl80qty03\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl80qty03.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.019332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.73 tests/s, 51.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvlescu4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvlescu4.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.00363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.48 tests/s, 275.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9guh5cos\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9guh5cos.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003824 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    261.51 tests/s, 261.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3s5r6hqr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3s5r6hqr.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003663 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.00 tests/s, 273.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmccj80zi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmccj80zi.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.55 tests/s, 294.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmponmxnidt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmponmxnidt.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.025628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.02 tests/s, 39.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5as0bgpx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5as0bgpx.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.60 tests/s, 288.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltggb14y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpltggb14y.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.022519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.41 tests/s, 44.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcl1elae4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcl1elae4.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.009623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.92 tests/s, 103.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  # your code here\n  if number + need <= remaining\n    [number\
    \ + need, remaining - (number + need)]\n  else\n    [remaining + number, 0]\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_eat\n    candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5,\
    \ 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11,\
    \ 0], candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11,\
    \ 5))\n    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5,\
    \ 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdutc4e9b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdutc4e9b.rb:35:in\
    \ `test_eat'\n     32: class TestHumanEval < Test::Unit::TestCase\n     33:  \
    \ def test_eat\n     34:     candidate = method(:eat)\n  => 35:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     36:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     37:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 38:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.27 tests/s, 288.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqztzm4sd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqztzm4sd.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.37 tests/s, 283.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps45kdy5g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps45kdy5g.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.51 tests/s, 202.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88keqxx1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88keqxx1.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.62 tests/s, 286.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3jwevgd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo3jwevgd.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.007258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.78 tests/s, 137.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyeno87l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsyeno87l.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.005226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.35 tests/s, 191.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if (number + need) <= remaining\n    [number + need, remaining\
    \ - (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_eat\n  \
    \  candidate = method(:eat)\n    assert_equal([11, 4], candidate.call(5, 6, 10))\n\
    \    assert_equal([12, 1], candidate.call(4, 8, 9))\n    assert_equal([11, 0],\
    \ candidate.call(1, 10, 10))\n    assert_equal([7, 0], candidate.call(2, 11, 5))\n\
    \    assert_equal([9, 2], candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4,\
    \ 5, 1))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp49lk97y4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp49lk97y4.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.045041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    22.20 tests/s, 22.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphcfm2951\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphcfm2951.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.034834 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    28.71 tests/s, 28.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoavuzpsf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoavuzpsf.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.006463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.73 tests/s, 154.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi7u00u59\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 26905.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5abm77b0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5abm77b0.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.41 tests/s, 304.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ynvyodk\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 25210.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if (number + need) > remaining\n    [remaining, 0]\n  else\n \
    \   [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7lggeqez\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7lggeqez.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.0035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.71 tests/s, 285.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjivmmpea\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjivmmpea.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.43 tests/s, 293.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_xa8jqv3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_xa8jqv3.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.56 tests/s, 296.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqh266zv7\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 28436.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vliasc8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vliasc8.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.71 tests/s, 278.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsug1ahmy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsug1ahmy.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.74 tests/s, 262.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2w3v_es\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2w3v_es.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.44 tests/s, 297.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpafqedsn4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpafqedsn4.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.011991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    83.40 tests/s, 83.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need > remaining\n    [remaining, 0]\n  else\n   \
    \ [number + need, remaining - (number + need)]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel5715wj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel5715wj.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[10, 0]>\n\ndiff:\n? [11, 4]\n?   0  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.004382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.21 tests/s, 228.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcilx87si\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcilx87si.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 292.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if remaining >= need\n    [number + need, remaining - need]\n\
    \  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n    assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1], candidate.call(4, 8,\
    \ 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n    assert_equal([7,\
    \ 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2], candidate.call(4, 5,\
    \ 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7y3e0y2b\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 29702.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06nyienx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06nyienx.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.005842 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    171.17 tests/s, 171.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4_eenl1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4_eenl1.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.56 tests/s, 296.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1cq0e7_d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1cq0e7_d.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.66 tests/s, 315.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76hhoj2m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76hhoj2m.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.25 tests/s, 324.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
    # you should return an array of [ total number of eaten carrots after your meals,\n\
    # the number of carrots left after your meals ]\n# if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
    # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10)\
    \ -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n\
    # the number of carrots that you have eaten.\n# @need : integer\n# the number\
    \ of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
    \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <=\
    \ need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need,\
    \ remaining)\n  if number + need <= remaining\n    [number + need, remaining -\
    \ (number + need)]\n  else\n    [number + remaining, 0]\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_eat\n    candidate = method(:eat)\n\
    \    assert_equal([11, 4], candidate.call(5, 6, 10))\n    assert_equal([12, 1],\
    \ candidate.call(4, 8, 9))\n    assert_equal([11, 0], candidate.call(1, 10, 10))\n\
    \    assert_equal([7, 0], candidate.call(2, 11, 5))\n    assert_equal([9, 2],\
    \ candidate.call(4, 5, 7))\n    assert_equal([5, 0], candidate.call(4, 5, 1))\n\
    \  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4iojbuf5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_eat(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4iojbuf5.rb:34:in\
    \ `test_eat'\n     31: class TestHumanEval < Test::Unit::TestCase\n     32:  \
    \ def test_eat\n     33:     candidate = method(:eat)\n  => 34:     assert_equal([11,\
    \ 4], candidate.call(5, 6, 10))\n     35:     assert_equal([12, 1], candidate.call(4,\
    \ 8, 9))\n     36:     assert_equal([11, 0], candidate.call(1, 10, 10))\n    \
    \ 37:     assert_equal([7, 0], candidate.call(2, 11, 5))\n<[11, 4]> expected but\
    \ was\n<[15, 0]>\n\ndiff:\n? [11, 4]\n?   5  0 \n?   ?  ? \n===============================================================================\n\
    \nFinished in 0.003602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.62 tests/s, 277.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
