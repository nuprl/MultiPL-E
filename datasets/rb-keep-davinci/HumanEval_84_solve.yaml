name: HumanEval_84_solve
language: ruby
prompt: "# Given a positive integer N, return the total sum of its digits in binary.\n\
  # Example\n# For N = 1000, the sum of digits will be 1 the output should be \"1\"\
  .\n# For N = 150, the sum of digits will be 6 the output should be \"110\".\n# For\
  \ N = 147, the sum of digits will be 12 the output should be \"1100\".\n# Variables:\n\
  # @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of\
  \ binary number\ndef solve(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"1\", candidate.call(1000))\n\
  \    assert_equal(\"110\", candidate.call(150))\n    assert_equal(\"1100\", candidate.call(147))\n\
  \    assert_equal(\"1001\", candidate.call(333))\n    assert_equal(\"10010\", candidate.call(963))\n\
  \  end\nend\n"
completions: ["  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  # Write your code\
    \ here\n  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  # write your code here\n  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  # Write your code here\n  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  # write your code here\n  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend",
  "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  # write your code here\n  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  # Write your code\
    \ here\n  # convert n to binary\n  # split the binary number into an array\n \
    \ # sum the array\n  # return the sum\n  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  # write your code\
    \ here\n  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  # Write your code here\n  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  # Write your code\
    \ here\n  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  # write your code here\n  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  # write your code here\n  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  # Write your code here\n  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  # Write your code here\n  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  # Write your code here\n  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  # Write your code\
    \ here\n  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  # write your code here\n\
    \  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  # Write your code here\n  n.to_s(2).chars.map(&:to_i).inject(:+)\nend",
  "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  # write your code\
    \ here\n  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  # Write your code here\n\
    \  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  # Write your code\
    \ here\n  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  # convert to binary\n\
    \  # split into array\n  # sum the array\n  # return the sum\n  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  # Write your code here\n  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').inject(0)\
    \ { |sum, i| sum + i.to_i }\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  # write your code\
    \ here\n  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).chars.map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "    n.to_s(2).chars.map(&:to_i).reduce(:+)\n\
    end", "  # Write your code here\n  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend",
  "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).chars.map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).reduce(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend", "  n.to_s(2).split('').map(&:to_i).inject(:+)\n\
    end", "  n.to_s(2).split('').map(&:to_i).inject(:+)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
