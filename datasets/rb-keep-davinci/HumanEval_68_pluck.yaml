name: HumanEval_68_pluck
language: ruby
prompt: "# \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
  \ plucked node should be the node with the smallest even value.\n# If multiple nodes\
  \ with the same smallest even value are found return the node that has smallest\
  \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n# If there are no even values or the given array is empty, return [].\n\
  # Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 2:\n# Input: [1,2,3]\n# Output:\
  \ [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\
  \ \n# Example 3:\n# Input: []\n# Output: []\n# Example 4:\n# Input: [5, 0, 3, 0,\
  \ 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest value, but  there are\
  \ two zeros,\n# so we will choose the first zero, which has the smallest index.\n\
  # Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\ndef pluck(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
  \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
  \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
  \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n\
  \    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
  \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
  \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
completions: ["  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n \
    \ return [] if evens.empty?\n  min = evens.min\n  min_idx = arr.index(min)\n \
    \ [min, min_idx]\nend", "  return [] if arr.empty?\n  evens = arr.select { |n|\
    \ n.even? }\n  return [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n\
    \  [min, idx]\nend", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", " \
    \ return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select { |n| n.even?\
    \ }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", " \
    \ return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  evens.min\nend", "  evens = arr.select { |x|\
    \ x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", " \
    \ return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  evens = arr.select { |x|\
    \ x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |e| e.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  index = arr.index(min)\n  [min, index]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  idx = arr.index(min)\n  [min, idx]\nend", "  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  min_idx = arr.index(min)\n  [min, min_idx]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min_even\
    \ = evens.min\n  min_even_index = arr.index(min_even)\n  [min_even, min_even_index]\n\
    end", "  # your code here\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  evens = arr.select { |x|\
    \ x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  idx = arr.index(min)\n  [min, idx]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend",
  "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min_even = evens.min\n  min_even_idx = arr.index(min_even)\n  [min_even, min_even_idx]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min_even = evens.min\n  min_even_index = arr.index(min_even)\n\
    \  [min_even, min_even_index]\nend", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select(&:even?)\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select(&:even?)\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  even_arr = arr.select { |x| x.even? }\n  return [] if even_arr.empty?\n\
    \  even_arr.min\nend", "  evens = arr.select { |n| n.even? }\n  evens.empty? ?\
    \ [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n \
    \ evens = arr.select(&:even?)\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n  [min, idx]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  arr.each_with_index { |x, i| return [min, i] if x == min }\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend", "  # your code here\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  evens = arr.select { |x|\
    \ x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min_even = evens.min\n  min_even_index\
    \ = arr.index(min_even)\n  [min_even, min_even_index]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select(&:even?)\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  arr.each_with_index do |x, i|\n    return [x, i] if x.even?\n  end\n\
    \  []\nend", "  return [] if arr.empty?\n  evens = arr.select { |num| num.even?\
    \ }\n  return [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  idx = arr.index(min)\n  [min, idx]\nend", "  return [] if\
    \ arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\nend", "  evens\
    \ = arr.select { |e| e.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min_even = evens.min\n  min_even_index\
    \ = arr.index(min_even)\n  [min_even, min_even_index]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\nend",
  "  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  arr.each_with_index do |n,\
    \ i|\n    return [n, i] if n.even?\n  end\n  []\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min_even\
    \ = evens.min\n  min_even_idx = arr.index(min_even)\n  [min_even, min_even_idx]\n\
    end", "  # your code here\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min <=> arr.index(evens.min)\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select(&:even?)\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  # your code here\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.sort!\n  [evens.first, arr.index(evens.first)]\n\
    end", "  arr.each_with_index do |x, i|\n    return [x, i] if x.even?\n  end\n\
    \  []\nend", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select { |e| e.even? }\n  return [] if evens.empty?\n  evens.min\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  even_nums\
    \ = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n  even_nums.min\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  idx = arr.index(min)\n\
    \  [min, idx]\nend", "  return [] if arr.empty?\n  evens = arr.select { |num|\
    \ num.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return [] if\
    \ arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  arr.each_with_index do |x, i|\n\
    \    return [x, i] if x.even?\n  end\n  []\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end", "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select(&:even?)\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  min_index = arr.index(min)\n  [min,\
    \ min_index]\nend", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select { |x| x.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  # your code here\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |e| e.even? }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select { |n| n.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even?\
    \ }\n  return [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  evens = arr.select { |x| x.even? }\n\
    \  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  evens\
    \ = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |e| e.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select(&:even?)\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend", "  evens = arr.select { |x| x.even? }\n  evens.empty? ? []\
    \ : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  evens.min == evens.max\
    \ ? [evens.min, arr.index(evens.min)] : [evens.min, arr.index(evens.min)]\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select { |n| n.even? }\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.sort!\n  [evens[0], arr.index(evens[0])]\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  evens\
    \ = arr.select(&:even?)\n  return [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens =\
    \ arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  idx = arr.index(min)\n  [min, idx]\nend", "  return [] if\
    \ arr.empty?\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  # your code here\nend",
  "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if\
    \ evens.empty?\n  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  evens =\
    \ arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend", "  return\
    \ [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  evens.min\nend", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n\
    \  return [] if evens.empty?\n  evens.sort!\n  [evens.first, arr.index(evens.first)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  [evens.min, arr.index(evens.min)]\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  min = evens.min\n\
    \  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n  evens = arr.select\
    \ { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\nend", "  return []\
    \ if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n\
    \  min = evens.min\n  [min, arr.index(min)]\nend", "  return [] if arr.empty?\n\
    \  evens = arr.select { |x| x.even? }\n  return [] if evens.empty?\n  evens.min\n\
    end", "  return [] if arr.empty?\n  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  min = evens.min\n  [min, arr.index(min)]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
