name: HumanEval_143_words_in_sentence
language: ruby
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# Input: sentence = \"This is a test\"\n# Output: \"is\"\n# Example\
  \ 2:\n# Input: sentence = \"lets go for swimming\"\n# Output: \"go for\"\n# Constraints:\n\
  # * 1 <= len(sentence) <= 100\n# * sentence contains only letters\ndef words_in_sentence(sentence)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_words_in_sentence\n\
  \    candidate = method(:words_in_sentence)\n    assert_equal(\"is\", candidate.call(\"\
  This is a test\"))\n    assert_equal(\"go for\", candidate.call(\"lets go for swimming\"\
  ))\n    assert_equal(\"there is no place\", candidate.call(\"there is no place available\
  \ here\"))\n    assert_equal(\"Hi am Hussein\", candidate.call(\"Hi I am Hussein\"\
  ))\n    assert_equal(\"go for it\", candidate.call(\"go for it\"))\n    assert_equal(\"\
  \", candidate.call(\"here\"))\n    assert_equal(\"is\", candidate.call(\"here is\"\
  ))\n  end\nend\n"
completions: ["  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(\" \")\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  words\
    \ = sentence.split\n  result = []\n  words.each do |word|\n    result << word\
    \ if prime?(word.length)\n  end\n  result.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split\n \
    \ primes = []\n  words.each do |word|\n    primes << word if is_prime?(word.length)\n\
    \  end\n  primes.join(' ')\nend", "  words = sentence.split(\" \")\n  prime_words\
    \ = []\n  words.each do |word|\n    prime_words << word if is_prime?(word.length)\n\
    \  end\n  prime_words.join(\" \")\nend", "  words = sentence.split(' ')\n  primes\
    \ = []\n  words.each do |word|\n    primes << word if is_prime?(word.length)\n\
    \  end\n  primes.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split(\" \").select { |w| is_prime?(w.length)\
    \ }.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  words\
    \ = sentence.split(' ')\n  result = []\n  words.each do |word|\n    result <<\
    \ word if is_prime?(word.length)\n  end\n  result.join(' ')\nend", "  words =\
    \ sentence.split\n  words.select { |word| word.length.prime? }.join(' ')\nend",
  "  words = sentence.split\n  words.select { |w| w.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.size.prime? }.join(\" \")\nend", "  sentence.split.select\
    \ { |word| prime?(word.size) }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  words = sentence.split\n  words.select\
    \ { |w| w.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split(' ')\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(' ')\nend",
  "  sentence.split.select { |w| w.size.prime? }.join(\" \")\nend", "  sentence.split.select\
    \ { |word| word.size.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.size.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n  result\
    \ = []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n\
    \  end\n  result.join(' ')\nend", "  sentence.split.select { |word| word.size.prime?\
    \ }.join(' ')\nend", "  words = sentence.split\n  primes = []\n  words.each do\
    \ |word|\n    primes << word if is_prime?(word.length)\n  end\n  primes.join('\
    \ ')\nend", "  sentence.split.select { |w| w.size.prime? }.join(' ')\nend", " \
    \ sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |w| w.size.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(\" \")\nend", "  sentence.split.select {\
    \ |w| is_prime?(w.size) }.join(' ')\nend", "  words = sentence.split\n  words.select\
    \ { |w| w.length.prime? }.join(' ')\nend", "  sentence.split(' ').select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  words = sentence.split(' ')\n  words.select { |w| is_prime?(w.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split\n  words.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(\"\
    \ \")\n  result = []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n\
    \  end\n  result.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(\" \"\
    )\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  words = sentence.split\n  words.select { |w| prime?(w.length) }.join(' ')\nend",
  "  return sentence if sentence.length <= 2\n  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |w| w.size.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(\"\
    \ \")\n  result = []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n\
    \  end\n  result.join(\" \")\nend", "  words = sentence.split(\" \")\n  result\
    \ = []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n\
    \  end\n  result.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(' ')\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  words\
    \ = sentence.split\n  res = []\n  words.each do |word|\n    res << word if is_prime?(word.length)\n\
    \  end\n  res.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |w| prime?(w.size) }.join(' ')\n\
    end", "  sentence.split(\" \").select { |word| word.length.prime? }.join(\" \"\
    )\nend", "  sentence.split(\" \").select { |word| word.length.prime? }.join(\"\
    \ \")\nend", "  words = sentence.split(\" \")\n  primes = []\n  words.each do\
    \ |word|\n    primes << word if is_prime?(word.length)\n  end\n  primes.join(\"\
    \ \")\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.size.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  words = sentence.split\n  primes = []\n  words.each do\
    \ |word|\n    primes << word if prime?(word.length)\n  end\n  primes.join(' ')\n\
    end", "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(\" \")\nend",
  "  sentence.split.select { |word| prime?(word.size) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.size.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.size.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(\"\
    \ \")\nend", "  words = sentence.split\n  primes = (2..100).select { |n| (2..Math.sqrt(n)).none?\
    \ { |d| n % d == 0 } }\n  words.select { |w| primes.include?(w.size) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(\" \"\
    )\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97, 101]\n  words = sentence.split(\" \")\n  words.select {\
    \ |word| primes.include?(word.length) }.join(\" \")\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split\n \
    \ prime_words = words.select { |word| prime?(word.length) }\n  prime_words.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(\" \")\nend", "  sentence.split.select {\
    \ |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(\" \"\
    )\n  words.select { |word| word.length.prime? }.join(\" \")\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split\n \
    \ primes = words.select { |word| word.length.prime? }\n  primes.join(' ')\nend",
  "  sentence.split.select { |w| w.size.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n\
    \  result = []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n\
    \  end\n  result.join(' ')\nend", "  words = sentence.split(\" \")\n  primes =\
    \ []\n  words.each do |word|\n    primes << word if is_prime?(word.length)\n \
    \ end\n  primes.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  words = sentence.split(\" \")\n  words.select { |word|\
    \ is_prime?(word.length) }.join(\" \")\nend", "  words = sentence.split(\" \"\
    )\n  prime_words = []\n  words.each do |word|\n    prime_words << word if is_prime?(word.length)\n\
    \  end\n  prime_words.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split\n  words.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |w| w.size.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  words = sentence.split\n  result = []\n  words.each do |word|\n    result <<\
    \ word if prime?(word.length)\n  end\n  result.join(' ')\nend", "  words = sentence.split\n\
    \  words.select { |w| is_prime?(w.length) }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  words = sentence.split(\" \")\n  result\
    \ = []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n\
    \  end\n  result.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(' ')\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(' ')\nend",
  "  words = sentence.split(' ')\n  words.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |w| w.size.prime? }.join(' ')\nend", "  words = sentence.split\n  words.select\
    \ { |word| is_prime?(word.length) }.join(' ')\nend", "  words = sentence.split(\"\
    \ \")\n  primes = []\n  words.each do |word|\n    primes << word if prime?(word.length)\n\
    \  end\n  primes.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| is_prime?(word.length)\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(\" \")\n  words.select { |word| is_prime?(word.length)\
    \ }.join(\" \")\nend", "  return sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| prime?(word.size) }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  words\
    \ = sentence.split(\" \")\n  primes = []\n  words.each do |word|\n    primes <<\
    \ word if is_prime?(word.length)\n  end\n  primes.join(\" \")\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  words = sentence.split(' ')\n\
    \  result = []\n  words.each do |word|\n    result << word if is_prime(word.length)\n\
    \  end\n  result.join(' ')\nend", "  words = sentence.split(\" \")\n  result =\
    \ []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n \
    \ end\n  result.join(\" \")\nend", "  words = sentence.split(\" \")\n  result\
    \ = []\n  words.each do |word|\n    if is_prime(word.length)\n      result <<\
    \ word\n    end\n  end\n  result.join(\" \")\nend", "  sentence.split.select {\
    \ |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime(word.length)\n  end\n  result.join(\" \")\nend",
  "  sentence.split.select { |w| prime?(w.size) }.join(' ')\nend", "  words = sentence.split\n\
    \  words.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(\" \")\nend", "  sentence.split.select {\
    \ |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  sentence.split.select { |w| w.size.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| is_prime?(word.length) }.join(\"\
    \ \")\nend", "  words = sentence.split\n  words.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |w| prime?(w.size) }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |w| prime?(w.size) }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  words = sentence.split(' ')\n  words.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  words = sentence.split(\" \")\n  result\
    \ = []\n  words.each do |word|\n    result << word if is_prime?(word.length)\n\
    \  end\n  result.join(\" \")\nend", "  sentence.split.select { |word| word.length.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split\n  words.select { |word| word.length.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split\n  words.select { |word| word.length.prime? }.join(\"\
    \ \")\nend", "  sentence.split.select { |word| word.length.prime? }.join(' ')\n\
    end", "  words = sentence.split(\" \")\n  result = []\n  words.each do |word|\n\
    \    result << word if is_prime?(word.length)\n  end\n  result.join(\" \")\nend",
  "  sentence.split.select { |w| prime?(w.size) }.join(\" \")\nend", "  sentence.split.select\
    \ { |word| word.length.prime? }.join(\" \")\nend", "  sentence.split.select {\
    \ |word| word.length.prime? }.join(' ')\nend", "  sentence.split.select { |word|\
    \ word.length.prime? }.join(' ')\nend", "  words = sentence.split(\" \")\n  primes\
    \ = []\n  words.each do |word|\n    primes << word if is_prime?(word.length)\n\
    \  end\n  primes.join(\" \")\nend", "  sentence.split.select { |word| word.size.prime?\
    \ }.join(' ')\nend", "  sentence.split.select { |word| word.size.prime? }.join('\
    \ ')\nend", "  sentence.split.select { |word| word.size.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.size.prime? }.join(' ')\nend", "  words =\
    \ sentence.split\n  words.select { |word| word.length.prime? }.join(' ')\nend",
  "  sentence.split.select { |word| word.size.prime? }.join(' ')\nend", "  words =\
    \ sentence.split\n  primes = []\n  words.each do |word|\n    primes << word if\
    \ prime?(word.length)\n  end\n  primes.join(' ')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
