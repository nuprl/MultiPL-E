name: HumanEval_124_valid_date
language: ruby
prompt: "# You have to write a function which validates a given date string and\n\
  # returns True if the date is valid otherwise False.\n# The date is valid if all\
  \ of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2.\
  \ The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\n# for example: \n# valid_date('03-11-2000') => True\n\
  # valid_date('15-01-2012') => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020')\
  \ => True\n# valid_date('06/04/2020') => False\ndef valid_date(date)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_valid_date\n\
  \    candidate = method(:valid_date)\n    assert_equal(true, candidate.call(\"03-11-2000\"\
  ))\n    assert_equal(false, candidate.call(\"15-01-2012\"))\n    assert_equal(false,\
  \ candidate.call(\"04-0-2040\"))\n    assert_equal(true, candidate.call(\"06-04-2020\"\
  ))\n    assert_equal(true, candidate.call(\"01-01-2007\"))\n    assert_equal(false,\
  \ candidate.call(\"03-32-2011\"))\n    assert_equal(false, candidate.call(\"\"))\n\
  \    assert_equal(false, candidate.call(\"04-31-3000\"))\n    assert_equal(true,\
  \ candidate.call(\"06-06-2005\"))\n    assert_equal(false, candidate.call(\"21-31-2000\"\
  ))\n    assert_equal(true, candidate.call(\"04-12-2003\"))\n    assert_equal(false,\
  \ candidate.call(\"04122003\"))\n    assert_equal(false, candidate.call(\"20030412\"\
  ))\n    assert_equal(false, candidate.call(\"2003-04\"))\n    assert_equal(false,\
  \ candidate.call(\"2003-04-12\"))\n    assert_equal(false, candidate.call(\"04-2003\"\
  ))\n  end\nend\n"
completions: []
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
