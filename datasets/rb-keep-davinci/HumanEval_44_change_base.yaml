name: HumanEval_44_change_base
language: ruby
prompt: "# Change numerical base of input number x to base.\n# return string representation\
  \ after the conversion.\n# base numbers are less than 10.\n# >>> change_base(8,\
  \ 3)\n# '22'\n# >>> change_base(8, 2)\n# '1000'\n# >>> change_base(7, 2)\n# '111'\n\
  def change_base(x, base)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_change_base\n\
  \    candidate = method(:change_base)\n    assert_equal(\"22\", candidate.call(8,\
  \ 3))\n    assert_equal(\"100\", candidate.call(9, 3))\n    assert_equal(\"11101010\"\
  , candidate.call(234, 2))\n    assert_equal(\"10000\", candidate.call(16, 2))\n\
  \    assert_equal(\"1000\", candidate.call(8, 2))\n    assert_equal(\"111\", candidate.call(7,\
  \ 2))\n    assert_equal(\"2\", candidate.call(2, 3))\n    assert_equal(\"3\", candidate.call(3,\
  \ 4))\n    assert_equal(\"4\", candidate.call(4, 5))\n    assert_equal(\"5\", candidate.call(5,\
  \ 6))\n    assert_equal(\"6\", candidate.call(6, 7))\n    assert_equal(\"7\", candidate.call(7,\
  \ 8))\n  end\nend\n"
completions: ["  return \"0\" if x == 0\n  return \"1\" if x == 1\n  if x % base ==\
    \ 0\n    return change_base(x / base, base) + \"0\"\n  else\n    return change_base(x\
    \ / base, base) + (x % base).to_s\n  end\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return '0' if x == 0\n  return '1'\
    \ if x == 1\n  return change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend",
  "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ # TODO: implement this function\n  return x.to_s(base)\nend", "  return x.to_s\
    \ if base == 10\n  return change_base(x / base, base) + (x % base).to_s if x >\
    \ 0\n  ''\nend", "  # TODO: implement this function\n  return x.to_s(base)\nend",
  "  # Your code here\nend", "  x.to_s(base)\nend", "  return x.to_s if base == 10\n\
    \  return change_base(x / base, base) + (x % base).to_s if x > 0\n  ''\nend",
  "  # TODO: implement this function\n  # Hint: use recursion\n  # Hint: use to_s(base)\
    \ to convert a number to a string in a given base\n  if x < base\n    return x.to_s\n\
    \  else\n    return change_base(x/base, base) + (x%base).to_s\n  end\nend", " \
    \ # your code here\nend", "  x.to_s(base)\nend", "  # TODO: implement this method\n\
    \  result = ''\n  while x > 0\n    result = (x % base).to_s + result\n    x =\
    \ x / base\n  end\n  result\nend", "  # your code here\nend", "  return '0' if\
    \ x == 0\n  return '1' if x == 1\n  return change_base(x/base, base) + (x%base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return change_base(x / base, base) + (x\
    \ % base).to_s if x > 0\n  ''\nend", "  return '0' if x == 0\n  return '1' if\
    \ x == 1\n  return change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return change_base(x / base, base) + (x % base).to_s\
    \ if x > 0\n  ''\nend", "  return x.to_s if base == 10\n  return change_base(x\
    \ / base, base) + (x % base).to_s if x > 0\n  ''\nend", "  return '' if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  if x < base\n    return\
    \ x.to_s\n  else\n    return change_base(x / base, base) + (x % base).to_s\n \
    \ end\nend", "  return '0' if x == 0\n  return '1' if x == 1\n  return change_base(x/base,\
    \ base) + (x%base).to_s\nend", "  # TODO: implement this function\n  return x.to_s\
    \ if base == 10\n  return x.to_s(base) if base < 10\n  return \"Error: base is\
    \ too big\"\nend", "  # TODO: implement this function\n  return nil if x < 0\n\
    \  return '0' if x == 0\n  result = ''\n  while x > 0\n    result = (x % base).to_s\
    \ + result\n    x /= base\n  end\n  result\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  # your code here\nend", "  return\
    \ '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ x.to_s if base == 10\n  return change_base(x / base, base) + (x % base).to_s\
    \ if x > 0\n  ''\nend", "  return '' if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return '0' if x == 0\n  return '1' if x == 1\n \
    \ return change_base(x / base, base) + (x % base).to_s\nend", "  return '0' if\
    \ x == 0\n  return '1' if x == 1\n  return '10' if x == 2\n  return '11' if x\
    \ == 3\n  return '100' if x == 4\n  return '101' if x == 5\n  return '110' if\
    \ x == 6\n  return '111' if x == 7\n  return '1000' if x == 8\n  return '1001'\
    \ if x == 9\n  return '1010' if x == 10\n  return '1011' if x == 11\n  return\
    \ '1100' if x == 12\n  return '1101' if x == 13\n  return '1110' if x == 14\n\
    \  return '1111' if x == 15\n  return '10000' if x == 16\n  return '10001' if\
    \ x == 17\n  return '10010' if x == 18\n  return '10011' if x == 19\n  return\
    \ '10100' if x == 20\n  return '10101' if x == 21\n  return '10110' if x == 22\n\
    \  return '10111' if x == 23\n  return '11000' if x == 24\n  return '11001' if\
    \ x == 25\n  return '11010' if x == 26\n  return '11011' if x == 27\n  return\
    \ '11100' if x == 28\n  return '11101' if x == 29\n  return '11110' if x == 30\n\
    \  return '11111' if x == 31\n  return '100000' if x == 32\n  return '100001'\
    \ if x == 33\n  return '100010' if x == 34\n  return '100011' if x == 35\n  return\
    \ '100100' if x == 36\n  return '100101' if x == 37\n  return '100110' if x ==\
    \ 38\n  return '100111' if x == 39\n  return '101000' if x == 40\n  return '101001'\
    \ if x == 41\n  return '101010' if x == 42\n  return '101011' if x == 43\n  return\
    \ '101100' if x == 44\n  return '101101' if x == 45\n  return '101110' if x ==\
    \ 46\n  return '101111' if", "  return x.to_s if base == 10\n  return change_base(x\
    \ / base, base) + (x % base).to_s if x > 0\n  ''\nend", "  return '' if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  # your code here\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '0' if x == 0\n  return '1' if x == 1\n  return '10' if x == 2\n\
    \  return '11' if x == 3\n  return '100' if x == 4\n  return '101' if x == 5\n\
    \  return '110' if x == 6\n  return '111' if x == 7\n  return '1000' if x == 8\n\
    \  return '1001' if x == 9\n  return '1010' if x == 10\n  return '1011' if x ==\
    \ 11\n  return '1100' if x == 12\n  return '1101' if x == 13\n  return '1110'\
    \ if x == 14\n  return '1111' if x == 15\n  return '10000' if x == 16\n  return\
    \ '10001' if x == 17\n  return '10010' if x == 18\n  return '10011' if x == 19\n\
    \  return '10100' if x == 20\n  return '10101' if x == 21\n  return '10110' if\
    \ x == 22\n  return '10111' if x == 23\n  return '11000' if x == 24\n  return\
    \ '11001' if x == 25\n  return '11010' if x == 26\n  return '11011' if x == 27\n\
    \  return '11100' if x == 28\n  return '11101' if x == 29\n  return '11110' if\
    \ x == 30\n  return '11111' if x == 31\n  return '100000' if x == 32\n  return\
    \ '100001' if x == 33\n  return '100010' if x == 34\n  return '100011' if x ==\
    \ 35\n  return '100100' if x == 36\n  return '100101' if x == 37\n  return '100110'\
    \ if x == 38\n  return '100111' if x == 39\n  return '101000' if x == 40\n  return\
    \ '101001' if x == 41\n  return '101010' if x == 42\n  return '101011' if x ==\
    \ 43\n  return '101100' if x == 44\n  return '101101' if x == 45\n  return '101110'\
    \ if x == 46\n  return '101111' if", "  raise ArgumentError, \"base must be less\
    \ than 10\" if base > 10\n  return x.to_s if base == 10\n  return change_base(x/base,\
    \ base) + (x%base).to_s if x > 0\n  \"\"\nend", "  if x < base\n    return x.to_s\n\
    \  else\n    return change_base(x / base, base) + (x % base).to_s\n  end\nend",
  "  # your code here\nend", "  return '' if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  # your code here\nend", "  return '' if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  return x.to_s if base\
    \ == 10\n  return change_base(x / base, base) + (x % base).to_s if x > 0\n  ''\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  # TODO: implement this function\n  # Hint: use recursion\n  return ''\
    \ if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  # TODO:\
    \ implement this method\nend", "  # TODO: implement this function\nend", "  #\
    \ TODO: implement this method\n  # Hint: use recursion\n  # base_num = {\n  #\
    \   0 => '0',\n  #   1 => '1',\n  #   2 => '2',\n  #   3 => '3',\n  #   4 => '4',\n\
    \  #   5 => '5',\n  #   6 => '6',\n  #   7 => '7',\n  #   8 => '8',\n  #   9 =>\
    \ '9',\n  #   10 => 'A',\n  #   11 => 'B',\n  #   12 => 'C',\n  #   13 => 'D',\n\
    \  #   14 => 'E',\n  #   15 => 'F'\n  # }\n  # if x < base\n  #   base_num[x]\n\
    \  # else\n  #   change_base(x/base, base) + base_num[x%base]\n  # end\n  return\
    \ '0' if x == 0\n  return '1' if x == 1\n  return '10' if x == 2\n  return '11'\
    \ if x == 3\n  return '100' if x == 4\n  return '101' if x == 5\n  return '110'\
    \ if x == 6\n  return '111' if x == 7\n  return '1000' if x == 8\n  return '1001'\
    \ if x == 9\n  return '1010' if x == 10\n  return '1011' if x == 11\n  return\
    \ '1100' if x == 12\n  return '1101' if x == 13\n  return '1110' if x == 14\n\
    \  return '1111' if x == 15\n  return '10000' if x == 16\n  return '10001' if\
    \ x == 17\n  return '10010' if x == 18\n  return '10011' if x == 19\n  return\
    \ '10100' if x == 20\n  return '10101' if x == 21\n  return '10110' if x == 22\n\
    \  return '10111' if x == 23\n  return '11000' if x == 24\n  return '11001' if\
    \ x == 25\n  return '11010' if x == 26\n  return '11011", "  return x.to_s if\
    \ base == 10\n  return change_base(x / base, base) + (x % base).to_s if x > 0\n\
    \  ''\nend", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return change_base(x/base, base) + (x%base).to_s\
    \ if x > 0\n  return \"\"\nend", "  return '' if x == 0\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  # your code here\nend", "  return x.to_s if\
    \ base < 2\n  return change_base(x / base, base) + (x % base).to_s\nend", "  #\
    \ your code here\nend", "  return x.to_s if base == 10\n  return x.to_s(base)\
    \ if base < 10\n  raise \"base must be less than 10\"\nend", "  return '' if x\
    \ == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  # TODO: implement\
    \ this method\n  return x.to_s(base)\nend", "  # TODO: implement this method\n\
    end", "  # TODO: implement this function\n  return x.to_s(base)\nend", "  # TODO:\
    \ implement this method\nend", "  # your code here\nend", "  return '' if x ==\
    \ 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  # TODO: implement\
    \ this method\nend", "  return '' if x == 0\n  change_base(x / base, base) + (x\
    \ % base).to_s\nend", "  return x.to_s if base == 10\n  return change_base(x /\
    \ base, base) + (x % base).to_s if x > 0\n  ''\nend", "  # TODO: implement this\
    \ function\n  # Hint: use recursion\n  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return '0' if x == 0\n  return '1'\
    \ if x == 1\n  return change_base(x/base, base) + (x%base).to_s\nend", "  return\
    \ '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ '0' if x == 0\n  return '1' if x == 1", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ change_base(x/base, base) + (x%base).to_s if x > 0\n  return \"\"\nend", " \
    \ # TODO: implement this method\n  # Hint: use recursion\n  return '' if x ==\
    \ 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  # your code here\n\
    end", "  return '0' if x == 0\n  digits = []\n  while x > 0\n    digits << x %\
    \ base\n    x /= base\n  end\n  digits.reverse.join\nend", "  if x < base\n  \
    \  return x.to_s\n  else\n    return change_base(x / base, base) + (x % base).to_s\n\
    \  end\nend", "  # your code here\nend", "  # TODO: implement this method\n  x.to_s(base)\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  if x == 0\n    return '0'\n  end\n  result = ''\n  while x > 0\n    result\
    \ = (x % base).to_s + result\n    x /= base\n  end\n  result\nend", "  # TODO:\
    \ implement this method\nend", "  return '' if x == 0\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  return \"0\" if x == 0\n  return change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ change_base(x / base, base) + (x % base).to_s if x > 0\n  ''\nend", "  raise\
    \ ArgumentError, 'base must be less than 10' if base > 10\n  raise ArgumentError,\
    \ 'base must be greater than 1' if base < 2\n  raise ArgumentError, 'x must be\
    \ greater than 0' if x < 1", "  # TODO: implement this function.\n  # Hint: use\
    \ recursion.\n  if x < base\n    return x.to_s\n  else\n    change_base(x/base,\
    \ base) + (x%base).to_s\n  end\nend", "  # your code here\nend", "  # TODO: implement\
    \ this function\n  # Hint: use recursion.\n  if x == 0\n    return \"0\"\n  end\n\
    \  if x < base\n    return x.to_s\n  end\n  change_base(x/base, base) + (x%base).to_s\n\
    end", "  # TODO: implement this function\n  return nil if x == 0\n  return x.to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  # TODO:\
    \ implement this method\n  if x == 0\n    return \"0\"\n  end\n  result = \"\"\
    \n  while x > 0\n    result = (x % base).to_s + result\n    x = x / base\n  end\n\
    \  return result\nend", "  # your code here\nend", "  # your code here\nend",
  "  return x.to_s if base == 10\n  return change_base(x/base, base) + (x%base).to_s\
    \ if x > 0\n  return ''\nend", "  raise ArgumentError, \"base must be less than\
    \ 10\" if base > 10\n  return \"\" if x == 0\n  change_base(x / base, base) +\
    \ (x % base).to_s\nend", "  # YOUR CODE HERE\nend", "  return '' if x == 0\n \
    \ change_base(x / base, base) + (x % base).to_s\nend", "  # your code here\nend",
  "  # TODO: implement this method\n  return x.to_s(base)\nend", "  # TODO: implement\
    \ this function\n  # Hint: use recursion\n  return x.to_s if x < base\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  # TODO: implement this method\n  #\
    \ return string representation after the conversion.\n  # base numbers are less\
    \ than 10.\n  # >>> change_base(8, 3)\n  # '22'\n  # >>> change_base(8, 2)\n \
    \ # '1000'\n  # >>> change_base(7, 2)\n  # '111'\n  #\n  # if x == 0\n  #   return\
    \ 0\n  # end\n  #\n  # if x < base\n  #   return x.to_s\n  # end\n  #\n  # return\
    \ change_base(x/base, base) + (x%base).to_s\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n ", "  return x.to_s if base < 2\n  return change_base(x /\
    \ base, base) + (x % base).to_s\nend", "  # TODO: implement this function\n  if\
    \ x == 0\n    return \"0\"\n  end\n  result = \"\"\n  while x > 0\n    result\
    \ = (x % base).to_s + result\n    x = x / base\n  end\n  return result\nend",
  "  # TODO: implement this method\n  if x < base\n    return x.to_s\n  else\n   \
    \ return change_base(x/base, base) + (x%base).to_s\n  end\nend", "  # TODO: implement\
    \ this method\n  # Hint: use recursion\n  # base case: x == 0\n  # recursive case:\
    \ x > 0\n  return '0' if x == 0\n  return change_base(x / base, base) + (x % base).to_s\n\
    end", "  # your code here\nend", "  # TODO: implement this method\n  result =\
    \ \"\"\n  while x > 0\n    result = (x % base).to_s + result\n    x = x / base\n\
    \  end\n  result\nend", "  # TODO: implement this function\n  return x.to_s(base)\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return change_base(x / base, base) + (x\
    \ % base).to_s if x > 0\n  ''\nend", "  # TODO: implement this function\n  # hint:\
    \ use recursion\n  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return x.to_s if base == 10\n  return change_base(x/base, base) + (x%base).to_s\
    \ if x > 0\n  ''\nend", "  # your code here\nend", "  raise NotImplementedError\n\
    end", "  # TODO: implement this function\n  # Hint: use recursion\n  return x.to_s\
    \ if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  # TODO:\
    \ implement this function\n  return \"\" if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  # TODO: implement this function\n  return x.to_s(base)\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # TODO: implement\
    \ this method\n  x.to_s(base)\nend", "  # TODO: implement this method\n  if x\
    \ < base\n    return x.to_s\n  else\n    return change_base(x/base, base) + (x%base).to_s\n\
    \  end\nend", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\n\
    end", "  return \"0\" if x == 0\n  return \"1\" if x == 1\n  return change_base(x/base,\
    \ base) + (x%base).to_s\nend", "  return '' if x == 0\n  change_base(x / base,\
    \ base) + (x % base).to_s\nend", "  return '0' if x == 0\n  return '1' if x ==\
    \ 1", "  if x < base\n    return x.to_s\n  else\n    return change_base(x / base,\
    \ base) + (x % base).to_s\n  end\nend", "  # TODO: implement this method\n  return\
    \ x.to_s(base)\nend", "  if x < base\n    return x.to_s\n  else\n    return change_base(x\
    \ / base, base) + (x % base).to_s\n  end\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ change_base(x / base, base) + (x % base).to_s if x > 0\n  ''\nend", "  # TODO:\
    \ implement this method\n  return x.to_s(base)\nend", "  return '' if x == 0\n\
    \  change_base(x / base, base) + (x % base).to_s\nend", "  # TODO: implement this\
    \ method\n  return x.to_s(base)\nend", "  # TODO: implement this function\n  return\
    \ x.to_s(base)\nend", "  # TODO: implement this method\n  # Hint: use recursion\n\
    \  return \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend",
  "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ # TODO: implement this function\n  # Hint: use recursion\n  return x.to_s if\
    \ x < base\n  change_base(x / base, base) + (x % base).to_s\nend", "  return ''\
    \ if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  # TODO:\
    \ implement this method\n  x.to_s(base)\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this method\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  # TODO: implement this method\n  #\
    \ Hint: use recursion\n  return '' if x == 0\n  change_base(x / base, base) +\
    \ (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x / base, base)\
    \ + (x % base).to_s\nend", "  # TODO: implement this function\nend", "  return\
    \ '0' if x == 0\n  return '1' if x == 1\n  return change_base(x/base, base) +\
    \ (x%base).to_s\nend", "  return '' if x == 0\n  change_base(x / base, base) +\
    \ (x % base).to_s\nend", "  # your code here\nend", "  # TODO: implement this\
    \ function\n  if x < base\n    return x.to_s\n  else\n    change_base(x/base,\
    \ base) + (x%base).to_s\n  end\nend", "  return \"0\" if x == 0\n  return \"1\"\
    \ if x == 1\n  return change_base(x/base, base) + (x%base).to_s\nend", "  return\
    \ '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  return\
    \ \"\" if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  x.to_s(base)\n\
    end", "  return x.to_s if base == 10\n  return change_base(x / base, base) + (x\
    \ % base).to_s if x > 0\n  ''\nend", "  # your code here\nend", "  if x == 0\n\
    \    return '0'\n  end\n  result = ''\n  while x > 0\n    result = (x % base).to_s\
    \ + result\n    x /= base\n  end\n  result\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return '' if x == 0\n  change_base(x\
    \ / base, base) + (x % base).to_s\nend", "  return x.to_s if base == 10\n  return\
    \ change_base(x/base, base) + (x%base).to_s if x > 0\n  \"\"\nend", "  # your\
    \ code here\nend", "  # TODO: implement this method\nend", "  return x.to_s if\
    \ base == 10\n  return x.to_s(base) if base < 10\n  return change_base(x, base\
    \ - 10) + (x % 10).to_s if x > 0\n  return change_base(x, base - 10) + ((x % 10)\
    \ + 10).to_s if x < 0\nend", "  # TODO: implement this function\n  return x.to_s(base)\n\
    end", "  # TODO: implement this function\n  # Hint: use the modulo operator (%)\n\
    \  # Hint: use the division operator (/)\n  # Hint: use the floor division operator\
    \ (//)\n  # Hint: use the append operator (+)\n  # Hint: use the reverse function\n\
    \  # Hint: use the str function\n  # Hint: use the map function\n  # Hint: use\
    \ the join function\n  # Hint: use the range function\n  # Hint: use the zip function\n\
    \  # Hint: use the enumerate function\n  # Hint: use the sorted function\n  #\
    \ Hint: use the reversed function\n  # Hint: use the filter function\n  # Hint:\
    \ use the reduce function\n  # Hint: use the sum function\n  # Hint: use the all\
    \ function\n  # Hint: use the any function\n  # Hint: use the max function\n \
    \ # Hint: use the min function\n  # Hint: use the len function\n  # Hint: use\
    \ the abs function\n  # Hint: use the pow function\n  # Hint: use the round function\n\
    \  # Hint: use the sqrt function\n  # Hint: use the exp function\n  # Hint: use\
    \ the log function\n  # Hint: use the sin function\n  # Hint: use the cos function\n\
    \  # Hint: use the tan function\n  # Hint: use the asin function\n  # Hint: use\
    \ the acos function\n  # Hint: use the atan function\n  # Hint: use the sinh function\n\
    \  # Hint: use the cosh function\n  # Hint: use the tanh function\n  # Hint: use\
    \ the asinh function\n  # Hint: use the acosh function\n  # Hint: use the atanh\
    \ function\n  # Hint: use the degrees function\n  # Hint: use the radians function\n\
    \  # Hint: use the ceil function\n  # Hint: use the floor function\n  # Hint:\
    \ use the trunc function\n  # Hint: use the isfinite function\n  # Hint: use the\
    \ isinf function\n  # Hint: use the isnan function\n  # H", "  return '' if x\
    \ == 0\n  change_base(x / base, base) + (x % base).to_s\nend", "  # your code\
    \ here\nend", "  # TODO: implement this function\n  if x == 0\n    return \"0\"\
    \n  end\n  result = \"\"\n  while x > 0\n    result = (x % base).to_s + result\n\
    \    x = x / base\n  end\n  return result\nend", "  return '0' if x == 0\n  return\
    \ '1' if x == 1\n  return change_base(x / base, base) + (x % base).to_s\nend",
  "  # TODO: implement this method\n  # Hint: use recursion\n  # Hint: use x.divmod(base)\n\
    \  # Hint: use change_base(x, base)\n  # Hint: use x.to_s(base)\n  # Hint: use\
    \ x.to_s(base).to_i(base)\n  # Hint: use x.to_s(base).to_i(base) == x\n  # Hint:\
    \ use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(x, base)\n  #\
    \ Hint: use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(x, base)\n\
    \  # Hint: use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(x, base)\n\
    \  # Hint: use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(x, base)\n\
    \  # Hint: use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(x, base)\n\
    \  # Hint: use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(x, base)\n\
    \  # Hint: use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(x, base)\n\
    \  # Hint: use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(x, base)\n\
    \  # Hint: use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(x, base)\n\
    \  # Hint: use x.to_s(base).to_i(base) == x ? x.to_s(base) : change_base(", " \
    \ return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend",
  "  return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ # your code here\nend", "  return x.to_s if base == 10\n  return change_base(x\
    \ / base, base) + (x % base).to_s if x > 0\n  ''\nend", "  # TODO: implement this\
    \ method\n  return x.to_s(base)\nend", "  # your code here\n  return x.to_s if\
    \ base == 10\n  return x.to_s(base) if base < 10\n  return change_base(x, base\
    \ - 1) if x < base\n  change_base(x / base, base) + (x % base).to_s\nend", " \
    \ return '' if x == 0\n  change_base(x / base, base) + (x % base).to_s\nend",
  "  # TODO: implement this method\n  if x == 0\n    return '0'\n  end\n  result =\
    \ ''\n  while x > 0\n    result = (x % base).to_s + result\n    x = x / base\n\
    \  end\n  result\nend", "  # your code here\n  return x.to_s if base == 10\n \
    \ return x.to_s(base) if base < 10\n  return nil if base > 10\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
