name: HumanEval_79_decimal_to_binary
language: ruby
results:
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  'db' + binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpocnpz7mp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpocnpz7mp.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.0225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.44 tests/s, 44.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kga5wva\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_kga5wva.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.01053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.97 tests/s, 94.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrtzsukz\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpte4zrxm5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpte4zrxm5.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.004893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.37 tests/s, 204.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknna7ir_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknna7ir_.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.004344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.20 tests/s, 230.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7x00cg2v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7x00cg2v.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.82 tests/s, 329.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wf856de\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wf856de.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.77 tests/s, 281.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3czp23y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3czp23y.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.70 tests/s, 312.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacp2uclu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacp2uclu.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.49 tests/s, 299.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_uhp2cx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_uhp2cx.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.07 tests/s, 308.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  binary += 'db'\n  while decimal > 0\n    binary += (decimal % 2).to_s\n   \
    \ decimal /= 2\n  end\n  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n   \
    \ candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91zby1yd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp91zby1yd.rb:23:in\
    \ `test_decimal_to_binary'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_decimal_to_binary\n     22:     candidate = method(:decimal_to_binary)\n\
    \  => 23:     assert_equal(\"db0db\", candidate.call(0))\n     24:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     25:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     26:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.49 tests/s, 299.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8hve_g_7\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 16949.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary = binary.reverse\n  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate\
    \ = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_s8cczw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_s8cczw.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.006963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.62 tests/s, 143.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsbn87gx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsbn87gx.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.005211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.90 tests/s, 191.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpod5j8dr_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpod5j8dr_.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.004117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.90 tests/s, 242.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvj8cvvr8\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5_bsp6yx\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 19417.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt77e6gv9\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4r3p8ozz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4r3p8ozz.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.96 tests/s, 314.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3wmgp26y\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 17621.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudeihhfo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudeihhfo.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.58 tests/s, 313.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = []\n\
    \  while decimal > 0\n    binary.unshift(decimal % 2)\n    decimal /= 2\n  end\n\
    \  binary.unshift('db').push('db').join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0sigyn2a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0sigyn2a.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.96 tests/s, 314.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6c64whlj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6c64whlj.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 321.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary.prepend(decimal % 2)\n    decimal /= 2\n  end\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpug65kne4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpug65kne4.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.75 tests/s, 300.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcr6bnz7e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcr6bnz7e.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.004575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.58 tests/s, 218.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxm7dbc9\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbsza0bw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkbsza0bw.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.26 tests/s, 315.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpldp92stn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpldp92stn.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003451 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.77 tests/s, 289.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary.prepend(decimal % 2)\n    decimal /= 2\n  end\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp793l5c0w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp793l5c0w.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.02258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.29 tests/s, 44.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary.prepend(decimal % 2)\n    decimal /= 2\n  end\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplktmh4if\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplktmh4if.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.010447 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    95.72 tests/s, 95.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  until decimal == 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary = binary.reverse\n  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate\
    \ = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpdnb5y3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpdnb5y3.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.19 tests/s, 313.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary = binary + (decimal % 2).to_s\n    decimal =\
    \ decimal / 2\n  end\n  binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjbw2aor\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjbw2aor.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.0033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.03 tests/s, 303.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8epmi_ml\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8epmi_ml.rb:16:in\
    \ `test_decimal_to_binary'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_decimal_to_binary\n     15:     candidate = method(:decimal_to_binary)\n\
    \  => 16:     assert_equal(\"db0db\", candidate.call(0))\n     17:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     18:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     19:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.01 tests/s, 195.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0s5l2nw\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 16806.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaurb_ahx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaurb_ahx.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.004437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.38 tests/s, 225.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnciep1a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnciep1a.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.67 tests/s, 299.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2i17weq7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2i17weq7.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.07 tests/s, 318.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2sd_x2qj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2sd_x2qj.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.014034 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.26 tests/s, 71.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  binary.prepend(\"db\")\n  binary.prepend(decimal.to_s(2))\n  binary.concat(\"\
    db\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4f165gs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4f165gs.rb:19:in\
    \ `test_decimal_to_binary'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_decimal_to_binary\n     18:     candidate = method(:decimal_to_binary)\n\
    \  => 19:     assert_equal(\"db0db\", candidate.call(0))\n     20:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     21:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     22:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"0dbdb\">\n\ndiff:\n? db0dbdb\n===============================================================================\n\
    \nFinished in 0.005799 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.44 tests/s, 172.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjhchf898\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu39hzp0l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu39hzp0l.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.53 tests/s, 297.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpva7x07wj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpva7x07wj.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.028507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.08 tests/s, 35.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  binary = \"db\"\n  while decimal > 0\n    binary << (decimal % 2).to_s\n  \
    \  decimal /= 2\n  end\n  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n   \
    \ candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_fbtp4f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_fbtp4f.rb:23:in\
    \ `test_decimal_to_binary'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_decimal_to_binary\n     22:     candidate = method(:decimal_to_binary)\n\
    \  => 23:     assert_equal(\"db0db\", candidate.call(0))\n     24:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     25:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     26:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 307.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpddrccfkm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpddrccfkm.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.00334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.40 tests/s, 299.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  binary.prepend(\"db\")\n  binary.prepend(\"0\") until binary.length == 8\n\
    \  binary.concat(\"db\")\n  binary\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0p4r2zs3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0p4r2zs3.rb:20:in\
    \ `test_decimal_to_binary'\n     17: class TestHumanEval < Test::Unit::TestCase\n\
    \     18:   def test_decimal_to_binary\n     19:     candidate = method(:decimal_to_binary)\n\
    \  => 20:     assert_equal(\"db0db\", candidate.call(0))\n     21:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     22:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     23:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"000000dbdb\">\n\ndiff:\n? db   0db  \n? 00000\
    \   db\n? ??   ++\n===============================================================================\n\
    \nFinished in 0.027116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.88 tests/s, 36.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgnay9hk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgnay9hk.rb:16:in\
    \ `test_decimal_to_binary'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_decimal_to_binary\n     15:     candidate = method(:decimal_to_binary)\n\
    \  => 16:     assert_equal(\"db0db\", candidate.call(0))\n     17:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     18:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     19:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.61 tests/s, 68.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8124bf21\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 17699.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7a2cbto\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7a2cbto.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.006562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.39 tests/s, 152.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6zwu184\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6zwu184.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003797 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.37 tests/s, 263.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv90ziafe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv90ziafe.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.004934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.68 tests/s, 202.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplgt7tk4s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplgt7tk4s.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.99 tests/s, 324.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6qbn15e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6qbn15e.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.45 tests/s, 281.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn39szcrt\n\
    Started\n.\nFinished in 0.00019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5263.16 tests/s, 21052.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3pkbnxu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3pkbnxu.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.80 tests/s, 319.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  until decimal == 0\n    binary.prepend(decimal % 2)\n    decimal /= 2\n  end\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4rzztcd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4rzztcd.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.89 tests/s, 309.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk1bckcrg\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 17777.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7zzpub92\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpom8ybce8\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5aqzm110\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmporwdc5g1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmporwdc5g1.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003055 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.33 tests/s, 327.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq0zbguks\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 17857.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  until decimal == 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4y1gsqnl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4y1gsqnl.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.27 tests/s, 289.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp435_2qqk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp435_2qqk.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.18 tests/s, 297.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_tm_n59\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_tm_n59.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.78 tests/s, 276.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1z51sz4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1z51sz4.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.004093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    244.32 tests/s, 244.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7_whf8w\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 17621.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwa7o426o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwa7o426o.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.006094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.10 tests/s, 164.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpex76zzq2\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0f6yy94t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0f6yy94t.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.93 tests/s, 308.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp6omf9t3\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 15564.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ggmljfk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ggmljfk.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003148 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.66 tests/s, 317.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj4y3ylpo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj4y3ylpo.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.004858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.85 tests/s, 205.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  binary.prepend(\"db\")\n  binary.prepend(\"1\") while decimal >= 1\n  binary.concat(\"\
    db\")\n  binary\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr9_v9yd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr9_v9yd.rb:20:in\
    \ `test_decimal_to_binary'\n     17: class TestHumanEval < Test::Unit::TestCase\n\
    \     18:   def test_decimal_to_binary\n     19:     candidate = method(:decimal_to_binary)\n\
    \  => 20:     assert_equal(\"db0db\", candidate.call(0))\n     21:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     22:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     23:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.006912 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.68 tests/s, 144.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary.prepend(decimal % 2)\n    decimal /= 2\n  end\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3e3hrby\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3e3hrby.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.006036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.67 tests/s, 165.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3cv05fb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3cv05fb.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.73 tests/s, 258.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  binary += \"db\"\n  while decimal > 0\n    binary += (decimal % 2).to_s\n \
    \   decimal /= 2\n  end\n  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n   \
    \ candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowt2cfd8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowt2cfd8.rb:23:in\
    \ `test_decimal_to_binary'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_decimal_to_binary\n     22:     candidate = method(:decimal_to_binary)\n\
    \  => 23:     assert_equal(\"db0db\", candidate.call(0))\n     24:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     25:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     26:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.004405 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.01 tests/s, 227.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7hh4iwr0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7hh4iwr0.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.00664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.60 tests/s, 150.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo15o1cqp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo15o1cqp.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003981 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    251.19 tests/s, 251.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpygf94tox\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpygf94tox.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.08 tests/s, 328.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvb_2xoq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvb_2xoq.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003855 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.40 tests/s, 259.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary.reverse + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnsk44b3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmnsk44b3.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bddb\">\n\ndiff:\n? bddb0db\n===============================================================================\n\
    \nFinished in 0.003233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.31 tests/s, 309.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4varm76\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv4varm76.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.018265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.75 tests/s, 54.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgo_f0_hr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgo_f0_hr.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.62 tests/s, 305.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdj1tzgn5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdj1tzgn5.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.010278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    97.30 tests/s, 97.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary = binary + (decimal % 2).to_s\n    decimal =\
    \ decimal / 2\n  end\n  binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_jgbxqvw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_jgbxqvw.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.62 tests/s, 305.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3xl6lbn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3xl6lbn.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.00327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.81 tests/s, 305.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyacjruz\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 18518.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcsfnt52b\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 17777.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgz2ixc7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgz2ixc7.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.20 tests/s, 320.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9417ft0e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9417ft0e.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.009003 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.07 tests/s, 111.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmttdc_xr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmttdc_xr.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.17 tests/s, 268.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0y5pj6zy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0y5pj6zy.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 307.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmh8vb2v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmh8vb2v.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.80 tests/s, 319.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjc_9q3f_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjc_9q3f_.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003114 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.13 tests/s, 321.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63dt6388\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63dt6388.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003318 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.39 tests/s, 301.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxj541ne\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqxj541ne.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.36 tests/s, 324.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt15k8x4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt15k8x4.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003387 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.25 tests/s, 295.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdj4fd212\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdj4fd212.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.00 tests/s, 306.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5e7epero\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5e7epero.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.52 tests/s, 287.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7al_2la1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7al_2la1.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.60 tests/s, 295.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4oekzm4r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4oekzm4r.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.35 tests/s, 288.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcsq2hn94\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 17543.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  # TODO: implement\
    \ this method\n  binary = \"\"\n  while decimal > 0\n    binary = (decimal % 2).to_s\
    \ + binary\n    decimal = decimal / 2\n  end\n  \"db\" + binary + \"db\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxg_a7ro\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxg_a7ro.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.60 tests/s, 293.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00wiihgp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp00wiihgp.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.03 tests/s, 272.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9ueu9im\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9ueu9im.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.004183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.06 tests/s, 239.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjf533ku3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjf533ku3.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.006529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.16 tests/s, 153.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27rl7b74\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbor1sf6x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbor1sf6x.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.75 tests/s, 321.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvent9g74\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvent9g74.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.94 tests/s, 275.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  binary = \"0\" + binary if binary.length < 7\n  binary = \"db\" + binary +\
    \ \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqwtpprl3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqwtpprl3.rb:18:in\
    \ `test_decimal_to_binary'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_decimal_to_binary\n     17:     candidate = method(:decimal_to_binary)\n\
    \  => 18:     assert_equal(\"db0db\", candidate.call(0))\n     19:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     20:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     21:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"db00db\">\n\ndiff:\n? db00db\n===============================================================================\n\
    \nFinished in 0.011399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.73 tests/s, 87.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzxnlpyig\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzxnlpyig.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.010159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.43 tests/s, 98.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd34syx6h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd34syx6h.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.006758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.97 tests/s, 147.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtsibrt7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtsibrt7.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.00332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.20 tests/s, 301.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmo426sst\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmo426sst.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003904 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.15 tests/s, 256.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzozsl55c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzozsl55c.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.86 tests/s, 286.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnuoeugxx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnuoeugxx.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.98 tests/s, 327.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpermfkh1i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpermfkh1i.rb:16:in\
    \ `test_decimal_to_binary'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_decimal_to_binary\n     15:     candidate = method(:decimal_to_binary)\n\
    \  => 16:     assert_equal(\"db0db\", candidate.call(0))\n     17:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     18:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     19:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.13 tests/s, 307.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6kd2vfwc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6kd2vfwc.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.90 tests/s, 294.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl4x_9ej\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl4x_9ej.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.63 tests/s, 291.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpocsmk1aq\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 18264.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  binary = \"db\" + decimal.to_s(2) + \"db\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate\
    \ = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsastrcs\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 17021.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfj2ln1l7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfj2ln1l7.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.00 tests/s, 320.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd_9_1k5a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd_9_1k5a.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.69 tests/s, 326.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppg43bm4y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppg43bm4y.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.006281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.21 tests/s, 159.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk6jz6aju\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk6jz6aju.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.008981 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.35 tests/s, 111.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgqmlkfe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdgqmlkfe.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.07 tests/s, 314.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  # TODO: implement\
    \ this method\n  binary = \"db\"\n  while decimal > 0\n    binary << (decimal\
    \ % 2).to_s\n    decimal /= 2\n  end\n  binary << \"db\"\n  binary.reverse\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89vyx4re\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp89vyx4re.rb:23:in\
    \ `test_decimal_to_binary'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_decimal_to_binary\n     22:     candidate = method(:decimal_to_binary)\n\
    \  => 23:     assert_equal(\"db0db\", candidate.call(0))\n     24:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     25:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     26:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.00309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.62 tests/s, 323.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1bi9gld\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1bi9gld.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.03 tests/s, 321.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppocw2ymd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppocw2ymd.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.014007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.39 tests/s, 71.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  binary << \"db\"\n  binary << decimal.to_s(2)\n  binary << \"db\"\n  binary\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpun6rtgf8\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp682up6yg\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary.prepend(decimal % 2)\n    decimal /= 2\n  end\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5c1_lr_1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5c1_lr_1.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.72 tests/s, 311.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6oivx_7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa6oivx_7.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.01 tests/s, 282.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpip71b_as\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpip71b_as.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.005522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.09 tests/s, 181.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  binary = '0' + binary if binary.length < 7\n  binary = 'db' + binary\
    \ + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbqd64lkl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbqd64lkl.rb:23:in\
    \ `test_decimal_to_binary'\n     20:   def test_decimal_to_binary\n     21:  \
    \   candidate = method(:decimal_to_binary)\n     22:     assert_equal(\"db0db\"\
    , candidate.call(0))\n  => 23:     assert_equal(\"db100000db\", candidate.call(32))\n\
    \     24:     assert_equal(\"db1100111db\", candidate.call(103))\n     25:   \
    \  assert_equal(\"db1111db\", candidate.call(15))\n     26:   end\n<\"db100000db\"\
    > expected but was\n<\"db0100000db\">\n\ndiff:\n? db0100000db\n===============================================================================\n\
    \nFinished in 0.003376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.21 tests/s, 592.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn2p9aaqo\n\
    Started\n.\nFinished in 0.001407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    710.73 tests/s, 2842.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  until decimal == 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lb0a6dw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lb0a6dw.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.82 tests/s, 311.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb1c8vd_l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb1c8vd_l.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.76 tests/s, 317.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary.reverse + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmax_rf0l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmax_rf0l.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bddb\">\n\ndiff:\n? bddb0db\n===============================================================================\n\
    \nFinished in 0.003361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.53 tests/s, 297.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wc90ox1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wc90ox1.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.58 tests/s, 313.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgc1ltil7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgc1ltil7.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.92 tests/s, 329.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7ze2ef5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7ze2ef5.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.57 tests/s, 318.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3939x7a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_3939x7a.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.40 tests/s, 303.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  binary = \"0\" + binary if binary.length < 8\n  \"db#{binary}db\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqe38b11i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqe38b11i.rb:18:in\
    \ `test_decimal_to_binary'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_decimal_to_binary\n     17:     candidate = method(:decimal_to_binary)\n\
    \  => 18:     assert_equal(\"db0db\", candidate.call(0))\n     19:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     20:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     21:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"db00db\">\n\ndiff:\n? db00db\n===============================================================================\n\
    \nFinished in 0.005224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.42 tests/s, 191.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88rlagx4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88rlagx4.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.004075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.40 tests/s, 245.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary.prepend(decimal % 2)\n    decimal /= 2\n  end\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpug0ltca7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpug0ltca7.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.72 tests/s, 294.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_g2xwly5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_g2xwly5.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.93 tests/s, 308.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhrh5sqq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprhrh5sqq.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.66 tests/s, 315.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuylbh1ww\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 15810.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcsjnwwj\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 17699.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvnhiipu4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvnhiipu4.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.31 tests/s, 307.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpceysjszk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpceysjszk.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.009136 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.46 tests/s, 109.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknneypa2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknneypa2.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.017179 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.21 tests/s, 58.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu30qjtt8\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 17241.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkkgn46x\n\
    Started\n.\nFinished in 0.00062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1612.90 tests/s, 6451.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmqtb21cp\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8lpixrj8\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 19417.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaio1t9gq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaio1t9gq.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 307.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzu34bfed\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuycvx1f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuycvx1f.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.17 tests/s, 310.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg2hwyq0i\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqm7q4at\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqm7q4at.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.87 tests/s, 313.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp606mtp5l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp606mtp5l.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.028848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    34.66 tests/s, 34.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = []\n\
    \  while decimal > 0\n    binary.unshift(decimal % 2)\n    decimal /= 2\n  end\n\
    \  binary.unshift('db').push('db').join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_76m0zlp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_76m0zlp.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003169 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.56 tests/s, 315.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnlj34ckb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnlj34ckb.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.85 tests/s, 283.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95a9_puy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp95a9_puy.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.69 tests/s, 309.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoky6syoz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoky6syoz.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.04657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.47 tests/s, 21.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi8yg_wyd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi8yg_wyd.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.021363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.81 tests/s, 46.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb98h1m1k\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 17699.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsiyckoz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxsiyckoz.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.012159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.24 tests/s, 82.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ao34q_s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ao34q_s.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.018951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.77 tests/s, 52.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  until decimal == 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  'db' + binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8zm94dcx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8zm94dcx.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.97 tests/s, 282.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6duf7ea\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6duf7ea.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.95 tests/s, 310.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = []\n\
    \  while decimal > 0\n    binary.unshift(decimal % 2)\n    decimal /= 2\n  end\n\
    \  binary.unshift('db').push('db').join\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wnjhwi7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0wnjhwi7.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.22 tests/s, 307.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiswxld11\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiswxld11.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.022767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.92 tests/s, 43.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary.reverse + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_w20j_6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_w20j_6.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bddb\">\n\ndiff:\n? bddb0db\n===============================================================================\n\
    \nFinished in 0.00322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.56 tests/s, 310.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_71cost\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_71cost.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.006848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.03 tests/s, 146.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa3pmtn48\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa3pmtn48.rb:16:in\
    \ `test_decimal_to_binary'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_decimal_to_binary\n     15:     candidate = method(:decimal_to_binary)\n\
    \  => 16:     assert_equal(\"db0db\", candidate.call(0))\n     17:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     18:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     19:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.03 tests/s, 307.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  until decimal == 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n \
    \ end\n  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94v15627\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94v15627.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.005243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.73 tests/s, 190.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bxnkqt7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6bxnkqt7.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.16 tests/s, 317.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9h_iu5jl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9h_iu5jl.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.006135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.00 tests/s, 163.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  binary << \"db\"\n  binary << decimal.to_s(2)\n  binary << \"db\"\n  binary\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4fxsqsg4\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary.prepend(decimal % 2)\n    decimal /= 2\n  end\n\
    \  binary = '0' * (8 - binary.length) + binary\n  \"db#{binary}db\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
    \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
    \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
    , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n \
    \ end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1eqmgbmo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1eqmgbmo.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"db00000000db\">\n\ndiff:\n? db00000000db\n===============================================================================\n\
    \nFinished in 0.018096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.26 tests/s, 55.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc5zibgv8\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 16393.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  'db' + binary + 'db'\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_s_j5c0d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_s_j5c0d.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.005161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.76 tests/s, 193.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = 'db'\n\
    \  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << 'db'\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcuz1wcwe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcuz1wcwe.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.85 tests/s, 321.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7x8ctkws\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 18181.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77r1n0u9\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpber0xjky\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpber0xjky.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.76 tests/s, 302.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiajeu0iy\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"\"\n\
    \  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /=\
    \ 2\n  end\n  \"db\" + binary + \"db\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6rh6nxwq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6rh6nxwq.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.003269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.90 tests/s, 305.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjd738smd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjd738smd.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.004293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.94 tests/s, 232.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplyrayzo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplyrayzo.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.00786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.23 tests/s, 127.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qhed4ie\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 17937.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3r7jcw1m\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 16194.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary += (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary += \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphw3ig2hq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphw3ig2hq.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003154 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.06 tests/s, 317.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp65lag0kx\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = decimal.to_s(2)\n\
    \  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1vur8pu\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 14598.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = ''\n\
    \  until decimal == 0\n    binary.prepend(decimal % 2).to_s\n    decimal /= 2\n\
    \  end\n  \"db#{binary}db\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n  \
    \  assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qb08j_t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qb08j_t.rb:21:in\
    \ `test_decimal_to_binary'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_decimal_to_binary\n     20:     candidate = method(:decimal_to_binary)\n\
    \  => 21:     assert_equal(\"db0db\", candidate.call(0))\n     22:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     23:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     24:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"dbdb\">\n\ndiff:\n? db0db\n===============================================================================\n\
    \nFinished in 0.002946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    339.44 tests/s, 339.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You will be given a number in decimal form and your task is to convert\
    \ it to\n# binary format. The function should return a string, with each character\
    \ representing a binary\n# number. Each character in the string will be '0' or\
    \ '1'.\n# There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n# The extra characters are there to help with the\
    \ format.\n# Examples:\n# decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)\
    \   # returns \"db100000db\"\ndef decimal_to_binary(decimal)\n  binary = \"db\"\
    \n  while decimal > 0\n    binary << (decimal % 2).to_s\n    decimal /= 2\n  end\n\
    \  binary << \"db\"\n  binary.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_decimal_to_binary\n    candidate = method(:decimal_to_binary)\n\
    \    assert_equal(\"db0db\", candidate.call(0))\n    assert_equal(\"db100000db\"\
    , candidate.call(32))\n    assert_equal(\"db1100111db\", candidate.call(103))\n\
    \    assert_equal(\"db1111db\", candidate.call(15))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xflqh62\n\
    Started\nF\n===============================================================================\n\
    Failure: test_decimal_to_binary(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xflqh62.rb:22:in\
    \ `test_decimal_to_binary'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_decimal_to_binary\n     21:     candidate = method(:decimal_to_binary)\n\
    \  => 22:     assert_equal(\"db0db\", candidate.call(0))\n     23:     assert_equal(\"\
    db100000db\", candidate.call(32))\n     24:     assert_equal(\"db1100111db\",\
    \ candidate.call(103))\n     25:     assert_equal(\"db1111db\", candidate.call(15))\n\
    <\"db0db\"> expected but was\n<\"bdbd\">\n\ndiff:\n? bdb0db\n===============================================================================\n\
    \nFinished in 0.003097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.89 tests/s, 322.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
