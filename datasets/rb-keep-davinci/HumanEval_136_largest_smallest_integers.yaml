name: HumanEval_136_largest_smallest_integers
language: ruby
prompt: "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as None.\n# Examples:\n\
  # largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n# largest_smallest_integers([])\
  \ == (None, None)\n# largest_smallest_integers([0]) == (None, None)\ndef largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  return [nil, nil] if lst.empty?\n  min = lst.min\n  max = lst.max\n\
    \  if min < 0 && max > 0\n    return [max, min]\n  elsif min < 0 && max < 0\n\
    \    return [max, nil]\n  elsif min > 0 && max > 0\n    return [nil, min]\n  else\n\
    \    return [nil, nil]\n  end\nend", "  # your code here\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  negative_numbers = []\n  positive_numbers = []\n\
    \  lst.each do |num|\n    if num < 0\n      negative_numbers << num\n    elsif\
    \ num > 0\n      positive_numbers << num\n    end\n  end\n  if negative_numbers.empty?\n\
    \    negative_numbers << nil\n  end\n  if positive_numbers.empty?\n    positive_numbers\
    \ << nil\n  end\n  [negative_numbers.max, positive_numbers.min]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  positive = lst.select { |num| num > 0 }\n  negative\
    \ = lst.select { |num| num < 0 }\n  if positive.empty?\n    return [negative.max,\
    \ nil]\n  elsif negative.empty?\n    return [nil, positive.min]\n  else\n    return\
    \ [negative.max, positive.min]\n  end\nend", "  if lst.empty?\n    return [nil,\
    \ nil]\n  end\n  negative_integers = lst.select { |num| num < 0 }\n  positive_integers\
    \ = lst.select { |num| num > 0 }\n  if negative_integers.empty?\n    negative_integers\
    \ = [nil]\n  end\n  if positive_integers.empty?\n    positive_integers = [nil]\n\
    \  end\n  [negative_integers.max, positive_integers.min]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  negatives = lst.select { |num| num < 0 }\n  positives\
    \ = lst.select { |num| num > 0 }\n  return [negatives.max, positives.min]\nend",
  "  # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  negative_numbers\
    \ = []\n  positive_numbers = []\n  lst.each do |number|\n    if number < 0\n \
    \     negative_numbers << number\n    elsif number > 0\n      positive_numbers\
    \ << number\n    end\n  end\n  if negative_numbers.empty?\n    negative_numbers\
    \ << nil\n  end\n  if positive_numbers.empty?\n    positive_numbers << nil\n \
    \ end\n  [negative_numbers.max, positive_numbers.min]\nend", "  # Your code here\n\
    end", "  # Your code here\nend", "  lst.select { |x| x < 0 }.max || nil\n  lst.select\
    \ { |x| x > 0 }.min || nil\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  return [nil, nil] if lst.empty?\n  return [nil, nil] if lst.all? { |num|\
    \ num == 0 }\n  neg_nums = lst.select { |num| num < 0 }\n  pos_nums = lst.select\
    \ { |num| num > 0 }\n  [neg_nums.max, pos_nums.min]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  positive = lst.select { |num| num > 0 }\n  negative\
    \ = lst.select { |num| num < 0 }\n  return [negative.max, positive.min]\nend",
  "  if lst.empty?\n    return [nil, nil]\n  end\n  negatives = lst.select { |num|\
    \ num < 0 }\n  positives = lst.select { |num| num > 0 }\n  [negatives.max, positives.min]\n\
    end", "  # your code here\nend", "  # your code here\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  neg_lst = []\n  pos_lst = []\n  lst.each do |num|\n\
    \    if num < 0\n      neg_lst << num\n    elsif num > 0\n      pos_lst << num\n\
    \    end\n  end\n  if neg_lst.empty?\n    neg_lst << nil\n  end\n  if pos_lst.empty?\n\
    \    pos_lst << nil\n  end\n  return [neg_lst.max, pos_lst.min]\nend", "  # your\
    \ code here\nend", "  min = nil\n  max = nil\n  lst.each do |i|\n    if i > 0\n\
    \      min = i if min.nil? || i < min\n    elsif i < 0\n      max = i if max.nil?\
    \ || i > max\n    end\n  end\n  [max, min]\nend", "  if lst.empty?\n    return\
    \ [nil, nil]\n  end\n  negs = lst.select { |x| x < 0 }\n  pos = lst.select { |x|\
    \ x > 0 }\n  if negs.empty?\n    neg = nil\n  else\n    neg = negs.max\n  end\n\
    \  if pos.empty?\n    pos = nil\n  else\n    pos = pos.min\n  end\n  [neg, pos]\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # Your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n\
    \  negatives = lst.select { |num| num < 0 }\n  positives = lst.select { |num|\
    \ num > 0 }\n  [negatives.max, positives.min]\nend", "  if lst.empty?\n    return\
    \ [nil, nil]\n  end\n  positive_numbers = lst.select { |number| number > 0 }\n\
    \  negative_numbers = lst.select { |number| number < 0 }\n  [negative_numbers.max,\
    \ positive_numbers.min]\nend", "  # your code here\nend", "  # your code here\n\
    end", "  if lst.empty?\n    return [nil, nil]\n  end\n  negatives = lst.select\
    \ { |num| num < 0 }\n  positives = lst.select { |num| num > 0 }\n  if negatives.empty?\n\
    \    return [nil, positives.min]\n  elsif positives.empty?\n    return [negatives.max,\
    \ nil]\n  else\n    return [negatives.max, positives.min]\n  end\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  return\
    \ [nil, nil] if lst.empty?\n  return [nil, nil] if lst.all? { |num| num == 0 }\n\
    \  lst.sort!\n  return [lst.last, lst.first] if lst.all? { |num| num > 0 }\n \
    \ return [lst.last, lst.first] if lst.all? { |num| num < 0 }\n  return [lst.last,\
    \ lst.first] if lst.any? { |num| num > 0 } && lst.any? { |num| num < 0 }\nend",
  "  if lst.empty?\n    return [nil, nil]\n  end\n  negative_numbers = []\n  positive_numbers\
    \ = []\n  lst.each do |number|\n    if number < 0\n      negative_numbers << number\n\
    \    elsif number > 0\n      positive_numbers << number\n    end\n  end\n  if\
    \ negative_numbers.empty?\n    negative_numbers << nil\n  end\n  if positive_numbers.empty?\n\
    \    positive_numbers << nil\n  end\n  [negative_numbers.max, positive_numbers.min]\n\
    end", "  # your code here\nend", "  # your code here\nend", "  return [nil, nil]\
    \ if lst.empty?\n  return [nil, nil] if lst.all? { |x| x == 0 }\n  lst.select!\
    \ { |x| x != 0 }\n  return [nil, lst.min] if lst.all? { |x| x > 0 }\n  return\
    \ [lst.max, nil] if lst.all? { |x| x < 0 }\n  [lst.max, lst.min]\nend", "  if\
    \ lst.length == 0\n    return [nil, nil]\n  end\n  a = lst.select { |x| x < 0\
    \ }.max\n  b = lst.select { |x| x > 0 }.min\n  if a == nil\n    a = nil\n  end\n\
    \  if b == nil\n    b = nil\n  end\n  return [a, b]\nend", "  return [nil, nil]\
    \ if lst.empty?\n  return [nil, nil] if lst.all? { |num| num == 0 }\n  negatives\
    \ = lst.select { |num| num < 0 }\n  positives = lst.select { |num| num > 0 }\n\
    \  [negatives.max, positives.min]\nend", "  if lst.empty?\n    [nil, nil]\n  else\n\
    \    [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  end\nend",
  "  # Your code here\nend", "  # your code here\nend", "  if lst.empty?\n    return\
    \ [nil, nil]\n  end\n  neg = []\n  pos = []\n  lst.each do |num|\n    if num <\
    \ 0\n      neg << num\n    elsif num > 0\n      pos << num\n    end\n  end\n \
    \ if neg.empty?\n    neg = nil\n  else\n    neg = neg.max\n  end\n  if pos.empty?\n\
    \    pos = nil\n  else\n    pos = pos.min\n  end\n  [neg, pos]\nend", "  # your\
    \ code here\nend", "  a = lst.select { |n| n < 0 }.max\n  b = lst.select { |n|\
    \ n > 0 }.min\n  a.nil? ? a = nil : a\n  b.nil? ? b = nil : b\n  return a, b\n\
    end", "  return [nil, nil] if lst.empty?\n  negative = lst.select { |num| num\
    \ < 0 }\n  positive = lst.select { |num| num > 0 }\n  [negative.max, positive.min]\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n\
    \  positives = []\n  negatives = []\n  lst.each do |num|\n    if num > 0\n   \
    \   positives << num\n    elsif num < 0\n      negatives << num\n    end\n  end\n\
    \  if positives.empty?\n    positives << nil\n  end\n  if negatives.empty?\n \
    \   negatives << nil\n  end\n  [negatives.max, positives.min]\nend", "  # Your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ Your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  lst.sort!\n\
    \  if lst.first >= 0\n    return [nil, lst.first]\n  elsif lst.last <= 0\n   \
    \ return [lst.last, nil]\n  else\n    return [lst.select { |x| x < 0 }.max, lst.select\
    \ { |x| x > 0 }.min]\n  end\nend", "  # your code here\nend", "  max = nil\n \
    \ min = nil\n  lst.each do |i|\n    if i < 0\n      max = i if max.nil? || i >\
    \ max\n    elsif i > 0\n      min = i if min.nil? || i < min\n    end\n  end\n\
    \  [max, min]\nend", "  # Your code here\nend", "  # Your code here\nend", " \
    \ # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  negatives\
    \ = lst.select { |num| num < 0 }\n  positives = lst.select { |num| num > 0 }\n\
    \  if negatives.empty?\n    return [nil, positives.min]\n  elsif positives.empty?\n\
    \    return [negatives.max, nil]\n  else\n    return [negatives.max, positives.min]\n\
    \  end\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x >\
    \ 0 }.min\n  [a, b]\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  pos\
    \ = lst.select { |x| x > 0 }\n  neg = lst.select { |x| x < 0 }\n  if pos.empty?\n\
    \    pos = nil\n  else\n    pos = pos.min\n  end\n  if neg.empty?\n    neg = nil\n\
    \  else\n    neg = neg.max\n  end\n  [neg, pos]\nend", "  # your code here\nend",
  "  negatives = lst.select { |num| num < 0 }\n  positives = lst.select { |num| num\
    \ > 0 }\n  return [negatives.max, positives.min]\nend", "  if lst.empty?\n   \
    \ return [nil, nil]\n  end\n  negatives = lst.select { |x| x < 0 }\n  positives\
    \ = lst.select { |x| x > 0 }\n  if negatives.empty?\n    return [nil, positives.min]\n\
    \  elsif positives.empty?\n    return [negatives.max, nil]\n  else\n    return\
    \ [negatives.max, positives.min]\n  end\nend", "  # Your code here\nend", "  if\
    \ lst.empty?\n    return [nil, nil]\n  end\n  positives = []\n  negatives = []\n\
    \  lst.each do |num|\n    if num > 0\n      positives << num\n    elsif num <\
    \ 0\n      negatives << num\n    end\n  end\n  [negatives.max, positives.min]\n\
    end", "  # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n\
    \  negatives = lst.select { |x| x < 0 }\n  positives = lst.select { |x| x > 0\
    \ }\n  if negatives.empty?\n    negatives = [nil]\n  end\n  if positives.empty?\n\
    \    positives = [nil]\n  end\n  [negatives.max, positives.min]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  negatives = lst.select { |num| num < 0 }\n  positives\
    \ = lst.select { |num| num > 0 }\n  return [negatives.max, positives.min]\nend",
  "  if lst.empty?\n    return [nil, nil]\n  end\n  if lst.all? { |x| x == 0 }\n \
    \   return [nil, nil]\n  end\n  if lst.all? { |x| x > 0 }\n    return [nil, lst.min]\n\
    \  end\n  if lst.all? { |x| x < 0 }\n    return [lst.max, nil]\n  end\n  [lst.select\
    \ { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\nend", "  a = lst.select {\
    \ |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  a = nil if a.nil? ||\
    \ a == 0\n  b = nil if b.nil? || b == 0\n  [a, b]\nend", "  # your code here\n\
    end", "  # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n\
    \  negatives = lst.select { |x| x < 0 }\n  positives = lst.select { |x| x > 0\
    \ }\n  return [negatives.max, positives.min]\nend", "  a = lst.select { |x| x\
    \ < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  a = nil if a.nil? || a == 0\n\
    \  b = nil if b.nil? || b == 0\n  [a, b]\nend", "  # your code here\nend", " \
    \ if lst.empty?\n    return [nil, nil]\n  end\n  lst.sort!\n  if lst.first >=\
    \ 0\n    return [nil, lst.first]\n  elsif lst.last <= 0\n    return [lst.last,\
    \ nil]\n  else\n    return [lst.select { |x| x < 0 }.max, lst.select { |x| x >\
    \ 0 }.min]\n  end\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  negative_numbers\
    \ = []\n  positive_numbers = []\n  lst.each do |num|\n    if num > 0\n      positive_numbers\
    \ << num\n    elsif num < 0\n      negative_numbers << num\n    end\n  end\n \
    \ if negative_numbers.empty?\n    negative_numbers << nil\n  end\n  if positive_numbers.empty?\n\
    \    positive_numbers << nil\n  end\n  [negative_numbers.max, positive_numbers.min]\n\
    end", "  if lst.empty?\n    return [nil, nil]\n  end\n  lst.sort!\n  if lst.first\
    \ > 0\n    return [nil, lst.first]\n  elsif lst.last < 0\n    return [lst.last,\
    \ nil]\n  else\n    return [lst.select { |num| num < 0 }.max, lst.select { |num|\
    \ num > 0 }.min]\n  end\nend", "  pos = lst.select { |x| x > 0 }.min\n  neg =\
    \ lst.select { |x| x < 0 }.max\n  return [neg, pos]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  negatives = lst.select { |x| x < 0 }\n  positives\
    \ = lst.select { |x| x > 0 }\n  if negatives.empty?\n    negatives = [nil]\n \
    \ end\n  if positives.empty?\n    positives = [nil]\n  end\n  [negatives.max,\
    \ positives.min]\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  negatives\
    \ = lst.select { |num| num < 0 }\n  positives = lst.select { |num| num > 0 }\n\
    \  if negatives.empty?\n    return [nil, positives.min]\n  elsif positives.empty?\n\
    \    return [negatives.max, nil]\n  else\n    return [negatives.max, positives.min]\n\
    \  end\nend", "  # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n\
    \  end\n  negatives = lst.select { |num| num < 0 }\n  positives = lst.select {\
    \ |num| num > 0 }\n  return [negatives.max, positives.min]\nend", "  # Your code\
    \ here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  negative_integers\
    \ = lst.select { |num| num < 0 }\n  positive_integers = lst.select { |num| num\
    \ > 0 }\n  if negative_integers.empty?\n    negative_integers = [nil]\n  end\n\
    \  if positive_integers.empty?\n    positive_integers = [nil]\n  end\n  [negative_integers.max,\
    \ positive_integers.min]\nend", "  return [nil, nil] if lst.empty?\n  return [nil,\
    \ nil] if lst.all? { |num| num == 0 }\n  neg = lst.select { |num| num < 0 }.max\n\
    \  pos = lst.select { |num| num > 0 }.min\n  [neg, pos]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  negative_numbers = []\n  positive_numbers = []\n\
    \  lst.each do |num|\n    if num < 0\n      negative_numbers << num\n    elsif\
    \ num > 0\n      positive_numbers << num\n    end\n  end\n  if negative_numbers.empty?\n\
    \    negative_numbers << nil\n  end\n  if positive_numbers.empty?\n    positive_numbers\
    \ << nil\n  end\n  [negative_numbers.max, positive_numbers.min]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  positive_lst = lst.select { |x| x > 0 }\n  negative_lst\
    \ = lst.select { |x| x < 0 }\n  if positive_lst.empty?\n    positive_lst = [nil]\n\
    \  end\n  if negative_lst.empty?\n    negative_lst = [nil]\n  end\n  [negative_lst.max,\
    \ positive_lst.min]\nend", "  # your code here\nend", "  # your code here\nend",
  "  if lst.empty?\n    return [nil, nil]\n  end\n  negatives = lst.select { |x| x\
    \ < 0 }\n  positives = lst.select { |x| x > 0 }\n  return [negatives.max, positives.min]\n\
    end", "  # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n\
    \  lst.sort!\n  if lst.first >= 0\n    return [nil, lst.first]\n  elsif lst.last\
    \ <= 0\n    return [lst.last, nil]\n  else\n    return [lst.select { |x| x < 0\
    \ }.max, lst.select { |x| x > 0 }.min]\n  end\nend", "  # your code here\nend",
  "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  a = nil\
    \ if a.nil?\n  b = nil if b.nil?\n  [a, b]\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  negatives\
    \ = lst.select { |num| num < 0 }\n  positives = lst.select { |num| num > 0 }\n\
    \  if negatives.empty?\n    return [nil, positives.min]\n  elsif positives.empty?\n\
    \    return [negatives.max, nil]\n  else\n    return [negatives.max, positives.min]\n\
    \  end\nend", "  # your code here\nend", "  a = lst.select { |num| num < 0 }.max\n\
    \  b = lst.select { |num| num > 0 }.min\n  a = nil if a.nil? || a == 0\n  b =\
    \ nil if b.nil? || b == 0\n  [a, b]\nend", "  # your code here\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  negatives = lst.select { |num| num < 0 }\n  positives\
    \ = lst.select { |num| num > 0 }\n  if negatives.empty?\n    return [nil, positives.min]\n\
    \  elsif positives.empty?\n    return [negatives.max, nil]\n  else\n    return\
    \ [negatives.max, positives.min]\n  end\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  return [nil, nil] if lst.empty?\n\
    \  return [nil, nil] if lst.all? { |num| num == 0 }\n  negatives = lst.select\
    \ { |num| num < 0 }\n  positives = lst.select { |num| num > 0 }\n  [negatives.max,\
    \ positives.min]\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  if lst.empty?\n    [nil,\
    \ nil]\n  else\n    [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n\
    \  end\nend", "  lst.select! { |num| num < 0 || num > 0 }\n  if lst.empty?\n \
    \   return [nil, nil]\n  else\n    return [lst.max, lst.min]\n  end\nend", " \
    \ if lst.empty?\n    return [nil, nil]\n  end\n  positive = lst.select { |num|\
    \ num > 0 }\n  negative = lst.select { |num| num < 0 }\n  if positive.empty?\n\
    \    positive = nil\n  else\n    positive = positive.min\n  end\n  if negative.empty?\n\
    \    negative = nil\n  else\n    negative = negative.max\n  end\n  [negative,\
    \ positive]\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  negatives\
    \ = lst.select { |x| x < 0 }\n  positives = lst.select { |x| x > 0 }\n  return\
    \ [negatives.max, positives.min]\nend", "  if lst.empty?\n    return [nil, nil]\n\
    \  end\n  positives = []\n  negatives = []\n  lst.each do |num|\n    if num >\
    \ 0\n      positives << num\n    elsif num < 0\n      negatives << num\n    end\n\
    \  end\n  if positives.empty?\n    positives << nil\n  end\n  if negatives.empty?\n\
    \    negatives << nil\n  end\n  [negatives.max, positives.min]\nend", "  a = lst.select\
    \ { |num| num < 0 }.max\n  b = lst.select { |num| num > 0 }.min\n  a = nil if\
    \ a.nil?\n  b = nil if b.nil?\n  [a, b]\nend", "  if lst.empty?\n    return [nil,\
    \ nil]\n  end\n  neg_lst = []\n  pos_lst = []\n  lst.each do |num|\n    if num\
    \ < 0\n      neg_lst << num\n    elsif num > 0\n      pos_lst << num\n    end\n\
    \  end\n  if neg_lst.empty?\n    neg_lst << nil\n  end\n  if pos_lst.empty?\n\
    \    pos_lst << nil\n  end\n  [neg_lst.max, pos_lst.min]\nend", "  if lst.empty?\n\
    \    [nil, nil]\n  else\n    [lst.select { |x| x < 0 }.max, lst.select { |x| x\
    \ > 0 }.min]\n  end\nend", "  lst.select! { |num| num < 0 }\n  lst.sort!\n  lst.reverse!\n\
    \  lst.select! { |num| num > 0 }\n  lst.sort!\n  lst.reverse!\n  if lst.empty?\n\
    \    return [nil, nil]\n  else\n    return [lst[0], lst[-1]]\n  end\nend", " \
    \ # your code here\nend", "  return [nil, nil] if lst.empty?\n  return [nil, nil]\
    \ if lst.all? { |num| num == 0 }\n  return [nil, nil] if lst.all? { |num| num\
    \ > 0 }\n  return [nil, nil] if lst.all? { |num| num < 0 }\n  [lst.min, lst.max]\n\
    end", "  # your code here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select\
    \ { |x| x > 0 }.min\n  [a, b]\nend", "  if lst.empty?\n    return [nil, nil]\n\
    \  end\n  negative_numbers = []\n  positive_numbers = []\n  lst.each do |number|\n\
    \    if number < 0\n      negative_numbers << number\n    elsif number > 0\n \
    \     positive_numbers << number\n    end\n  end\n  if negative_numbers.empty?\n\
    \    negative_numbers = [nil]\n  end\n  if positive_numbers.empty?\n    positive_numbers\
    \ = [nil]\n  end\n  [negative_numbers.max, positive_numbers.min]\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  if lst.empty?\n    return [nil,\
    \ nil]\n  end\n  lst.sort!\n  if lst.first >= 0\n    return [nil, lst.first]\n\
    \  elsif lst.last <= 0\n    return [lst.last, nil]\n  else\n    return [lst.select\
    \ { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  end\nend", "  # your code\
    \ here\nend", "  return [nil, nil] if lst.empty?\n  return [nil, nil] if lst.all?\
    \ { |num| num == 0 }\n  negatives = lst.select { |num| num < 0 }\n  positives\
    \ = lst.select { |num| num > 0 }\n  [negatives.max, positives.min]\nend", "  a\
    \ = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  a = nil\
    \ if a.nil? || a == 0\n  b = nil if b.nil? || b == 0\n  [a, b]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  negative_numbers = []\n  positive_numbers = []\n\
    \  lst.each do |num|\n    if num < 0\n      negative_numbers << num\n    elsif\
    \ num > 0\n      positive_numbers << num\n    end\n  end\n  if negative_numbers.empty?\n\
    \    negative_numbers << nil\n  end\n  if positive_numbers.empty?\n    positive_numbers\
    \ << nil\n  end\n  [negative_numbers.max, positive_numbers.min]\nend", "  # Your\
    \ code here\nend", "  # your code here\nend", "  if lst.empty?\n    return [nil,\
    \ nil]\n  end\n  negative_numbers = []\n  positive_numbers = []\n  lst.each do\
    \ |number|\n    if number < 0\n      negative_numbers << number\n    elsif number\
    \ > 0\n      positive_numbers << number\n    end\n  end\n  if negative_numbers.empty?\n\
    \    negative_numbers << nil\n  end\n  if positive_numbers.empty?\n    positive_numbers\
    \ << nil\n  end\n  [negative_numbers.max, positive_numbers.min]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  positive = lst.select { |x| x > 0 }\n  negative\
    \ = lst.select { |x| x < 0 }\n  if positive.empty?\n    positive = nil\n  else\n\
    \    positive = positive.min\n  end\n  if negative.empty?\n    negative = nil\n\
    \  else\n    negative = negative.max\n  end\n  [negative, positive]\nend", " \
    \ # Your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n  pos\
    \ = lst.select { |x| x > 0 }\n  neg = lst.select { |x| x < 0 }\n  if pos.empty?\n\
    \    pos = nil\n  else\n    pos = pos.min\n  end\n  if neg.empty?\n    neg = nil\n\
    \  else\n    neg = neg.max\n  end\n  return [neg, pos]\nend", "  # your code here\n\
    end", "  # your code here\nend", "  if lst.length == 0\n    return [nil, nil]\n\
    \  end\n  negs = lst.select { |x| x < 0 }\n  pos = lst.select { |x| x > 0 }\n\
    \  if negs.length == 0\n    negs = nil\n  else\n    negs = negs.max\n  end\n \
    \ if pos.length == 0\n    pos = nil\n  else\n    pos = pos.min\n  end\n  [negs,\
    \ pos]\nend", "  return [nil, nil] if lst.empty?\n  return [nil, nil] if lst.all?\
    \ { |num| num == 0 }\n  neg_nums = lst.select { |num| num < 0 }\n  pos_nums =\
    \ lst.select { |num| num > 0 }\n  neg_nums.empty? ? [nil, pos_nums.min] : [neg_nums.max,\
    \ pos_nums.min]\nend", "  # your code here\nend", "  if lst.empty?\n    return\
    \ [nil, nil]\n  end\n  negative_numbers = []\n  positive_numbers = []\n  lst.each\
    \ do |number|\n    if number < 0\n      negative_numbers << number\n    elsif\
    \ number > 0\n      positive_numbers << number\n    end\n  end\n  if negative_numbers.empty?\n\
    \    negative_numbers = [nil]\n  end\n  if positive_numbers.empty?\n    positive_numbers\
    \ = [nil]\n  end\n  [negative_numbers.max, positive_numbers.min]\nend", "  # Your\
    \ code here\nend", "  return [nil, nil] if lst.empty?\n  return [nil, nil] if\
    \ lst.all? { |num| num == 0 }\n  lst.select! { |num| num < 0 }\n  lst.select!\
    \ { |num| num > 0 }\n  [lst.max, lst.min]\nend", "  if lst.empty?\n    return\
    \ [nil, nil]\n  end\n  if lst.all? { |x| x == 0 }\n    return [nil, nil]\n  end\n\
    \  if lst.all? { |x| x > 0 }\n    return [nil, lst.min]\n  end\n  if lst.all?\
    \ { |x| x < 0 }\n    return [lst.max, nil]\n  end\n  if lst.any? { |x| x < 0 }\
    \ && lst.any? { |x| x > 0 }\n    return [lst.select { |x| x < 0 }.max, lst.select\
    \ { |x| x > 0 }.min]\n  end\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  lst.select! { |x| x < 0 || x > 0 }\n  lst.empty?\
    \ ? [nil, nil] : [lst.max, lst.min]\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  return [nil, nil] if lst.empty?\n  return [nil, nil] if\
    \ lst.all? { |num| num == 0 }\n  lst.delete_if { |num| num == 0 }\n  lst.sort!\n\
    \  [lst.first, lst.last]\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  if lst.empty?\n    return [nil, nil]\n  end\n\
    \  positive_numbers = lst.select { |num| num > 0 }\n  negative_numbers = lst.select\
    \ { |num| num < 0 }\n  if positive_numbers.empty?\n    positive_numbers = [nil]\n\
    \  end\n  if negative_numbers.empty?\n    negative_numbers = [nil]\n  end\n  [negative_numbers.max,\
    \ positive_numbers.min]\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  neg = []\n  pos = []\n  lst.each do |x|\n   \
    \ if x < 0\n      neg << x\n    elsif x > 0\n      pos << x\n    end\n  end\n\
    \  if neg.empty?\n    neg = nil\n  else\n    neg = neg.max\n  end\n  if pos.empty?\n\
    \    pos = nil\n  else\n    pos = pos.min\n  end\n  [neg, pos]\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  neg = []\n  pos = []\n  lst.each do |x|\n   \
    \ if x < 0\n      neg << x\n    elsif x > 0\n      pos << x\n    end\n  end\n\
    \  if neg.empty?\n    neg = nil\n  else\n    neg = neg.max\n  end\n  if pos.empty?\n\
    \    pos = nil\n  else\n    pos = pos.min\n  end\n  return [neg, pos]\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  if lst.empty?\n    return\
    \ [nil, nil]\n  end\n  negatives = lst.select { |num| num < 0 }\n  positives =\
    \ lst.select { |num| num > 0 }\n  return [negatives.max, positives.min]\nend",
  "  # your code here\nend", "  largest_negative = lst.select { |num| num < 0 }.max\n\
    \  smallest_positive = lst.select { |num| num > 0 }.min\n  [largest_negative,\
    \ smallest_positive]\nend", "  # your code here\nend", "  return [nil, nil] if\
    \ lst.empty?\n  return [nil, nil] if lst.all? { |num| num == 0 }\n  neg_nums =\
    \ lst.select { |num| num < 0 }\n  pos_nums = lst.select { |num| num > 0 }\n  return\
    \ [neg_nums.max, pos_nums.min]\nend", "  # your code here\nend", "  # Your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  if lst.empty?\n\
    \    return [nil, nil]\n  end\n  negatives = lst.select { |num| num < 0 }\n  positives\
    \ = lst.select { |num| num > 0 }\n  if negatives.empty?\n    return [nil, positives.min]\n\
    \  elsif positives.empty?\n    return [negatives.max, nil]\n  else\n    return\
    \ [negatives.max, positives.min]\n  end\nend", "  return [nil, nil] if lst.empty?\n\
    \  lst.sort!\n  if lst.first < 0 && lst.last > 0\n    return [lst.first, lst.last]\n\
    \  elsif lst.first < 0\n    return [lst.first, nil]\n  elsif lst.last > 0\n  \
    \  return [nil, lst.last]\n  else\n    return [nil, nil]\n  end\nend", "  # your\
    \ code here\nend", "  # Your code here\nend", "  if lst.empty?\n    return [nil,\
    \ nil]\n  end\n  negatives = lst.select { |num| num < 0 }\n  positives = lst.select\
    \ { |num| num > 0 }\n  [negatives.max, positives.min]\nend", "  # your code here\n\
    end", "  return [nil, nil] if lst.empty?\n  return [nil, nil] if lst.all? { |num|\
    \ num == 0 }\n  return [nil, lst.min] if lst.all? { |num| num > 0 }\n  return\
    \ [lst.max, nil] if lst.all? { |num| num < 0 }\n  [lst.max, lst.min]\nend", " \
    \ # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  if lst.empty?\n    return [nil, nil]\n  end\n  lst.sort!\n  if lst.all? { |x|\
    \ x >= 0 }\n    return [nil, lst[0]]\n  elsif lst.all? { |x| x <= 0 }\n    return\
    \ [lst[-1], nil]\n  else\n    return [lst[-1], lst[0]]\n  end\nend", "  # Your\
    \ code here\nend", "  # Your code here\nend", "  # your code here\nend", "  if\
    \ lst.length == 0\n    return [nil, nil]\n  end\n  negative_numbers = []\n  positive_numbers\
    \ = []\n  lst.each do |num|\n    if num < 0\n      negative_numbers << num\n \
    \   elsif num > 0\n      positive_numbers << num\n    end\n  end\n  if negative_numbers.length\
    \ == 0\n    negative_numbers << nil\n  end\n  if positive_numbers.length == 0\n\
    \    positive_numbers << nil\n  end\n  return [negative_numbers.max, positive_numbers.min]\n\
    end", "  if lst.empty?\n    return [nil, nil]\n  end\n  negative_numbers = []\n\
    \  positive_numbers = []\n  lst.each do |number|\n    if number < 0\n      negative_numbers\
    \ << number\n    elsif number > 0\n      positive_numbers << number\n    end\n\
    \  end\n  if negative_numbers.empty?\n    negative_numbers << nil\n  end\n  if\
    \ positive_numbers.empty?\n    positive_numbers << nil\n  end\n  return [negative_numbers.max,\
    \ positive_numbers.min]\nend", "  # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
