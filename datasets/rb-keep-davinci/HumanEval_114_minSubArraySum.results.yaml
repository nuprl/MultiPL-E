name: HumanEval_114_minSubArraySum
language: ruby
results:
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbf87j9n3\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpbf87j9n3.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004504701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.99 tests/s, 221.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmay0c0vc\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpmay0c0vc.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004631579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.91 tests/s, 215.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqae98rv0\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpqae98rv0.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004757054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.21 tests/s, 210.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmo26lx_9\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpmo26lx_9.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004938155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.50 tests/s, 202.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdny3h6_z\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpdny3h6_z.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005030428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.79 tests/s, 198.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8mixt0gy\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp8mixt0gy.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004831314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.98 tests/s, 206.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  # TODO: implement\
    \ me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwxnum139\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpwxnum139.rb:13:in `test_minSubArraySum'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_minSubArraySum\n\
    \     12:     candidate = method(:minSubArraySum)\n  => 13:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     14:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     15:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     16:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004907918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.75 tests/s, 203.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpixeotk8v\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpixeotk8v.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004891578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.43 tests/s, 204.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe8vc2hji\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpe8vc2hji.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004633452 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.82 tests/s, 215.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5lis8oe4\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp5lis8oe4.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005234563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.04 tests/s, 191.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpphfzdlg6\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpphfzdlg6.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005784767 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.87 tests/s, 172.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp23hgmw_w\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp23hgmw_w.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004891027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.46 tests/s, 204.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpakrzc7ri\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpakrzc7ri.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004879634 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.93 tests/s, 204.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpca5_ix_p\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpca5_ix_p.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004712691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.19 tests/s, 212.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplwwc9oy7\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmplwwc9oy7.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005094619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.29 tests/s, 196.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiqu732fs\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpiqu732fs.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006028636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.88 tests/s, 165.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpido9f2fa\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpido9f2fa.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006157608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.40 tests/s, 162.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6uq7eyxt\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp6uq7eyxt.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005710938 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.10 tests/s, 175.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4j0kxweh\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp4j0kxweh.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005107513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.79 tests/s, 195.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpflyl5fvm\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpflyl5fvm.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005223031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.46 tests/s, 191.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpluvs7izn\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpluvs7izn.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005045327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.20 tests/s, 198.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwkucsjh8\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpwkucsjh8.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006203614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.20 tests/s, 161.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqofcnige\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpqofcnige.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004927926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.93 tests/s, 202.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nil\n\
    \  nums.each_with_index do |num, i|\n    sum = num\n    min_sum = sum if min_sum.nil?\
    \ || sum < min_sum\n    (i + 1...nums.length).each do |j|\n      sum += nums[j]\n\
    \      min_sum = sum if sum < min_sum\n    end\n  end\n  min_sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpugxgv3by\nStarted\n.\nFinished in 0.000389493 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2567.44 tests/s, 30809.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpva0p22ur\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpva0p22ur.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005299865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.68 tests/s, 188.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgucb_ups\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpgucb_ups.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004849297 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.22 tests/s, 206.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi3yj8b_o\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpi3yj8b_o.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004895004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.29 tests/s, 204.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps1jwuq8m\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmps1jwuq8m.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004629444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.01 tests/s, 216.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptsxnd4ya\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmptsxnd4ya.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004559282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.33 tests/s, 219.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe0f32rg9\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpe0f32rg9.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004639804 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.53 tests/s, 215.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg161pid1\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpg161pid1.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004745092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.74 tests/s, 210.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpptb0ybqc\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpptb0ybqc.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004542301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.15 tests/s, 220.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp210f5l0q\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp210f5l0q.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007544756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.54 tests/s, 132.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmn_k17r8\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpmn_k17r8.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005266653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.87 tests/s, 189.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn6ctpd5o\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpn6ctpd5o.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004830042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.04 tests/s, 207.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf2f8ix1c\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpf2f8ix1c.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004576495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.51 tests/s, 218.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdtlu4fva\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpdtlu4fva.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005140697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.53 tests/s, 194.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzq0cl9ke\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpzq0cl9ke.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004427375 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.87 tests/s, 225.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjdt6sy55\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpjdt6sy55.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005016481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.34 tests/s, 199.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmcsmfevv\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpmcsmfevv.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004620507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.43 tests/s, 216.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min = sum if sum < min\n\
    \    sum = 0 if sum < 0\n  end\n  min\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp05bs9gt9\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp05bs9gt9.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004799734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.34 tests/s, 208.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgo_fjzhv\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpgo_fjzhv.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004923988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.09 tests/s, 203.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3fwt5_oy\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp3fwt5_oy.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005760431 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.60 tests/s, 173.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  return nil if\
    \ nums.empty?\n  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n\
    \    current_sum += num\n    min_sum = current_sum if current_sum < min_sum\n\
    \    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiz1e2mg6\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpiz1e2mg6.rb:21:in `test_minSubArraySum'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_minSubArraySum\n\
    \     20:     candidate = method(:minSubArraySum)\n  => 21:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     22:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     23:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     24:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004721097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.82 tests/s, 211.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpea3k8g9j\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpea3k8g9j.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005130147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.93 tests/s, 194.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7wq9hr5j\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp7wq9hr5j.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00530794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.40 tests/s, 188.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2ibr92zu\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp2ibr92zu.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005970707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.48 tests/s, 167.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2_xbkx3m\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp2_xbkx3m.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004511623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.65 tests/s, 221.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8avtqxmp\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp8avtqxmp.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007010913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.63 tests/s, 142.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo1p8ckwe\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpo1p8ckwe.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004767073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.77 tests/s, 209.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr4icfen4\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpr4icfen4.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004639474 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.54 tests/s, 215.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2hdal4wf\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp2hdal4wf.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004468001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.81 tests/s, 223.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl9xzv6tw\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpl9xzv6tw.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004571226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.76 tests/s, 218.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  (1...nums.length).each do |i|\n    current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n    min_sum = [min_sum, current_sum].min\n  end\n\
    \  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj9pqqy3m\nStarted\n.\nFinished in 0.000381618 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2620.42 tests/s, 31445.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  return 0 if\
    \ nums.empty?\n  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n\
    \    current_sum += num\n    min_sum = current_sum if current_sum < min_sum\n\
    \    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp__565l2u\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp__565l2u.rb:21:in `test_minSubArraySum'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_minSubArraySum\n\
    \     20:     candidate = method(:minSubArraySum)\n  => 21:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     22:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     23:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     24:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004638732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.58 tests/s, 215.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmparu_l8ss\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmparu_l8ss.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004652468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.94 tests/s, 214.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nil\n\
    \  nums.each_with_index do |num, i|\n    sum = num\n    min_sum = sum if min_sum.nil?\
    \ || sum < min_sum\n    (i + 1...nums.length).each do |j|\n      sum += nums[j]\n\
    \      min_sum = sum if sum < min_sum\n    end\n  end\n  min_sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy64qwz2x\nStarted\n.\nFinished in 0.000397227 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2517.45 tests/s, 30209.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdus0q3am\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpdus0q3am.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005099719 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.09 tests/s, 196.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  (1...nums.length).each do |i|\n    current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n    min_sum = [min_sum, current_sum].min\n  end\n\
    \  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyw64eh1s\nStarted\n.\nFinished in 0.000435219 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2297.69 tests/s, 27572.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min = sum if sum < min\n\
    \    sum = 0 if sum < 0\n  end\n  min\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdr0dseit\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpdr0dseit.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004580654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.31 tests/s, 218.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg5eemtfk\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpg5eemtfk.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005078128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.92 tests/s, 196.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  (1...nums.length).each do |i|\n    current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n    min_sum = [min_sum, current_sum].min\n  end\n\
    \  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1t334e3b\nStarted\n.\nFinished in 0.000408919 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2445.47 tests/s, 29345.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8o5ie3j4\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp8o5ie3j4.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004553141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.63 tests/s, 219.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzwjxszd_\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpzwjxszd_.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006118023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.45 tests/s, 163.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbllffcmw\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpbllffcmw.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006101883 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.88 tests/s, 163.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9mjqrzc9\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp9mjqrzc9.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004773314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.50 tests/s, 209.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt3jzj_17\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpt3jzj_17.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004681963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.59 tests/s, 213.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8gat7s_k\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp8gat7s_k.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00482859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.10 tests/s, 207.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  curr_sum = 0\n  nums.each do |num|\n    curr_sum += num\n    min_sum = curr_sum\
    \ if curr_sum < min_sum\n    curr_sum = 0 if curr_sum < 0\n  end\n  min_sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsblpxwf9\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpsblpxwf9.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006587376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.81 tests/s, 151.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpemcvix5k\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpemcvix5k.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005149171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.21 tests/s, 194.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0d520kg8\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp0d520kg8.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00530782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.40 tests/s, 188.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp61o5mn9n\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp61o5mn9n.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004841123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.56 tests/s, 206.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3oz2q9d5\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp3oz2q9d5.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004568009 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.91 tests/s, 218.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2ndzmhsw\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp2ndzmhsw.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004426563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.91 tests/s, 225.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr6pw5njz\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpr6pw5njz.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004452532 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.59 tests/s, 224.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpazns_vlm\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpazns_vlm.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005099038 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.12 tests/s, 196.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpljlh0me3\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpljlh0me3.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004468482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.79 tests/s, 223.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyyadsmqq\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpyyadsmqq.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004629094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.02 tests/s, 216.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  return 0 if\
    \ nums.empty?\n  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n\
    \    current_sum += num\n    min_sum = current_sum if current_sum < min_sum\n\
    \    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp765bjuhy\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp765bjuhy.rb:21:in `test_minSubArraySum'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_minSubArraySum\n\
    \     20:     candidate = method(:minSubArraySum)\n  => 21:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     22:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     23:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     24:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004856602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.91 tests/s, 205.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp95sr11ip\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp95sr11ip.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004837355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.72 tests/s, 206.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  # Write your\
    \ code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6h4tcef4\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp6h4tcef4.rb:13:in `test_minSubArraySum'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_minSubArraySum\n\
    \     12:     candidate = method(:minSubArraySum)\n  => 13:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     14:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     15:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     16:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005076184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.00 tests/s, 197.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmv0w9q69\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpmv0w9q69.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004567788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.92 tests/s, 218.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpytb9n9fu\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpytb9n9fu.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004564051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.10 tests/s, 219.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgkkigdo5\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpgkkigdo5.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004560014 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.30 tests/s, 219.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplyh9yb8v\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmplyh9yb8v.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004728841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.47 tests/s, 211.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpip1xokst\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpip1xokst.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004773176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.50 tests/s, 209.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp18z7ufyy\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp18z7ufyy.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005514971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.32 tests/s, 181.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpylp_jpzr\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpylp_jpzr.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004603765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.21 tests/s, 217.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp63lk8fe9\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp63lk8fe9.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004826165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.20 tests/s, 207.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxc8cjt5k\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpxc8cjt5k.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005772744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.23 tests/s, 173.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6u5odr6k\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp6u5odr6k.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005280279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.38 tests/s, 189.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdbdqde7_\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpdbdqde7_.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005285288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.20 tests/s, 189.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq8yk9gha\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpq8yk9gha.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005715286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.97 tests/s, 174.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ogp2eje\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp1ogp2eje.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005066778 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.36 tests/s, 197.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd6tv6fs2\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpd6tv6fs2.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005160805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.77 tests/s, 193.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjg8nrcw6\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpjg8nrcw6.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005026241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.96 tests/s, 198.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu7b4kws1\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpu7b4kws1.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004735724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.16 tests/s, 211.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv1hmpokx\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpv1hmpokx.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005154632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.00 tests/s, 194.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsdz4itsy\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpsdz4itsy.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004912857 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.55 tests/s, 203.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv9_0fz2d\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpv9_0fz2d.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005002505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.90 tests/s, 199.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjj7fqddl\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpjj7fqddl.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004663358 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.44 tests/s, 214.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp9bmovsm\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpp9bmovsm.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004873544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.19 tests/s, 205.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnbj0v94j\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpnbj0v94j.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004604949 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.16 tests/s, 217.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy04hcokt\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpy04hcokt.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004641528 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.45 tests/s, 215.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiffc6d6_\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpiffc6d6_.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004703584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.60 tests/s, 212.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n    min_sum =\
    \ nums[0]\n    current_sum = 0\n    nums.each do |num|\n        current_sum +=\
    \ num\n        min_sum = current_sum if current_sum < min_sum\n        current_sum\
    \ = 0 if current_sum < 0\n    end\n    min_sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0ewlleb4\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp0ewlleb4.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004680089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.67 tests/s, 213.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq1e3ohe8\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpq1e3ohe8.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00457399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.63 tests/s, 218.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp23man4nu\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp23man4nu.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004736516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.13 tests/s, 211.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuvmie9_h\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpuvmie9_h.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005128032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.01 tests/s, 195.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min = sum if sum < min\n\
    \    sum = 0 if sum < 0\n  end\n  min\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3hm1t6tj\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp3hm1t6tj.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004645796 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.25 tests/s, 215.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphobrmtgm\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmphobrmtgm.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004672355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.02 tests/s, 214.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8s750d52\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp8s750d52.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004785047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.98 tests/s, 208.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_5kvy530\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp_5kvy530.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004396636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.45 tests/s, 227.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n    min_sum =\
    \ nums[0]\n    current_sum = 0\n    nums.each do |num|\n        current_sum +=\
    \ num\n        min_sum = current_sum if current_sum < min_sum\n        current_sum\
    \ = 0 if current_sum < 0\n    end\n    min_sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpirty84eu\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpirty84eu.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004921204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.20 tests/s, 203.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprai43ezg\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmprai43ezg.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004625065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.21 tests/s, 216.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpolkt82gw\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpolkt82gw.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004940559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.41 tests/s, 202.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0o3luojo\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp0o3luojo.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004997096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.12 tests/s, 200.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqt1_jqi1\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpqt1_jqi1.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004629124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.02 tests/s, 216.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1clztabk\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp1clztabk.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005931903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.58 tests/s, 168.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp379mxr86\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp379mxr86.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004758668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.14 tests/s, 210.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  (1...nums.length).each do |i|\n    current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n    min_sum = [min_sum, current_sum].min\n  end\n\
    \  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5mku5hsl\nStarted\n.\nFinished in 0.000378943 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2638.92 tests/s, 31667.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmperc0yw9v\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmperc0yw9v.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005124626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.14 tests/s, 195.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmi5sslq8\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpmi5sslq8.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005367282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.31 tests/s, 186.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0lm12c1d\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp0lm12c1d.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005057759 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.72 tests/s, 197.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjfuh9lel\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpjfuh9lel.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005924029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.80 tests/s, 168.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt4esyhig\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpt4esyhig.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004511143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.67 tests/s, 221.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf5naf4lo\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpf5naf4lo.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004593448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.70 tests/s, 217.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprg45vtog\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmprg45vtog.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004710467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.29 tests/s, 212.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp74251zpp\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp74251zpp.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004900725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.05 tests/s, 204.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy827vz10\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpy827vz10.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004856642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.90 tests/s, 205.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4jdgup2f\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp4jdgup2f.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.28 tests/s, 180.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuyn75cx5\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpuyn75cx5.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004678697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.73 tests/s, 213.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9t1qlci_\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp9t1qlci_.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004638381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.59 tests/s, 215.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxlqmzjtz\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpxlqmzjtz.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004865599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.52 tests/s, 205.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  curr_sum = 0\n  nums.each do |num|\n    curr_sum += num\n    min_sum = curr_sum\
    \ if curr_sum < min_sum\n    curr_sum = 0 if curr_sum < 0\n  end\n  min_sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfwskoqtx\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpfwskoqtx.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004960026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.61 tests/s, 201.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  return nums.min\
    \ if nums.length == 1\n  min = nums[0]\n  (0...nums.length).each do |i|\n    (i...nums.length).each\
    \ do |j|\n      min = nums[i..j].sum if nums[i..j].sum < min\n    end\n  end\n\
    \  min\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5g73rstl\nStarted\n.\nFinished in 0.000484751 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2062.91 tests/s, 24754.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu_dq4z55\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpu_dq4z55.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006381019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.71 tests/s, 156.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp15cj9dip\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp15cj9dip.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005339481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.28 tests/s, 187.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptqoh2suh\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmptqoh2suh.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004837806 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.71 tests/s, 206.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  for i in 1...nums.length\n    current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n    min_sum = [min_sum, current_sum].min\n  end\n\
    \  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv2vjle0w\nStarted\n.\nFinished in 0.000579129 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1726.73 tests/s, 20720.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppjothmxm\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmppjothmxm.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00799885 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.02 tests/s, 125.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptxf2_ixm\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmptxf2_ixm.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005125729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.09 tests/s, 195.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_gwdw8x2\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp_gwdw8x2.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005206059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.08 tests/s, 192.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2bqcsglz\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp2bqcsglz.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006363655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    157.14 tests/s, 157.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcoookjj0\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpcoookjj0.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005194728 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.50 tests/s, 192.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  (1...nums.length).each do |i|\n    current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n    min_sum = [min_sum, current_sum].min\n  end\n\
    \  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9_2bzaat\nStarted\n.\nFinished in 0.000698453 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1431.74 tests/s, 17180.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjh3xgfof\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpjh3xgfof.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005219534 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.59 tests/s, 191.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq9wb38iw\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpq9wb38iw.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005056066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.78 tests/s, 197.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf0i4klqw\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpf0i4klqw.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004672355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.02 tests/s, 214.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg2fhpbv8\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpg2fhpbv8.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006247347 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.07 tests/s, 160.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6n1qddmq\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp6n1qddmq.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004539215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.30 tests/s, 220.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr5dlokrm\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpr5dlokrm.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004686983 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.36 tests/s, 213.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_53dts56\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp_53dts56.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004585823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.06 tests/s, 218.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx3e256y3\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpx3e256y3.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.006176653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.90 tests/s, 161.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw_mh_wke\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpw_mh_wke.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00464356 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.35 tests/s, 215.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2j6astja\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp2j6astja.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004735495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.17 tests/s, 211.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkzxb100w\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpkzxb100w.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004556428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.47 tests/s, 219.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn8y9kprx\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpn8y9kprx.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004815134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.68 tests/s, 207.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoo3e0dr8\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpoo3e0dr8.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004544825 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.03 tests/s, 220.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1edzatyy\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp1edzatyy.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00511657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.44 tests/s, 195.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz_pqh_jx\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpz_pqh_jx.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004673828 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.96 tests/s, 213.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdk3j8a0l\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpdk3j8a0l.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004741876 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.89 tests/s, 210.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  return 0 if\
    \ nums.empty?\n  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n\
    \    current_sum += num\n    min_sum = current_sum if current_sum < min_sum\n\
    \    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzzbg8j4c\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpzzbg8j4c.rb:21:in `test_minSubArraySum'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_minSubArraySum\n\
    \     20:     candidate = method(:minSubArraySum)\n  => 21:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     22:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     23:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     24:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004615208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.67 tests/s, 216.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  return nil if\
    \ nums.empty?\n  min_sum = nums[0]\n  current_sum = 0\n  nums.each do |num|\n\
    \    current_sum += num\n    min_sum = current_sum if current_sum < min_sum\n\
    \    current_sum = 0 if current_sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyumwquhp\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpyumwquhp.rb:21:in `test_minSubArraySum'\n\
    \     18: class TestHumanEval < Test::Unit::TestCase\n     19:   def test_minSubArraySum\n\
    \     20:     candidate = method(:minSubArraySum)\n  => 21:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     22:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     23:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     24:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004735444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.17 tests/s, 211.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1com6otg\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp1com6otg.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005463573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.03 tests/s, 183.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9uciykgt\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp9uciykgt.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00466408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.40 tests/s, 214.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdo_m5j_m\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpdo_m5j_m.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004792752 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.65 tests/s, 208.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptrnwg698\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmptrnwg698.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004873264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.20 tests/s, 205.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvuhz66ob\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpvuhz66ob.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004617341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.57 tests/s, 216.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpspyfgol8\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpspyfgol8.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005607374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.34 tests/s, 178.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnfb2m7a3\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpnfb2m7a3.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004564802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.07 tests/s, 219.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwwfh58ms\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpwwfh58ms.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005253248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.36 tests/s, 190.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = 0\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo4qqtm4h\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpo4qqtm4h.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.004875127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.12 tests/s, 205.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  (1...nums.length).each do |i|\n    current_sum = [nums[i],\
    \ current_sum + nums[i]].min\n    min_sum = [min_sum, current_sum].min\n  end\n\
    \  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfgj8eq_1\nStarted\n.\nFinished in 0.000379032 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2638.30 tests/s, 31659.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_3q5q9s7\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp_3q5q9s7.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00585567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.77 tests/s, 170.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  curr_sum = 0\n  nums.each do |num|\n    curr_sum += num\n    min_sum = curr_sum\
    \ if curr_sum < min_sum\n    curr_sum = 0 if curr_sum < 0\n  end\n  min_sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphf8x1qgc\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmphf8x1qgc.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004794043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.59 tests/s, 208.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpovgbut0v\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpovgbut0v.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004990975 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.36 tests/s, 200.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp93duemss\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp93duemss.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004870369 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.32 tests/s, 205.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2h0h9ukj\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp2h0h9ukj.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00495695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.74 tests/s, 201.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_of21s71\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp_of21s71.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004378873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.37 tests/s, 228.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb1s5dbhk\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpb1s5dbhk.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004644784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.30 tests/s, 215.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprfgj1qpt\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmprfgj1qpt.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004346071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.09 tests/s, 230.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdm37s1pg\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpdm37s1pg.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004648841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.11 tests/s, 215.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvhdphm9o\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpvhdphm9o.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004997618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.10 tests/s, 200.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1_rsp_04\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp1_rsp_04.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00465352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.89 tests/s, 214.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm9lqr8s9\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpm9lqr8s9.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005591783 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.83 tests/s, 178.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = nums[0]\n  nums[1..-1].each do |num|\n    current_sum = [num,\
    \ current_sum + num].min\n    min_sum = [min_sum, current_sum].min\n  end\n  min_sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqvdglgwb\nStarted\n.\nFinished in 0.000386627 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2586.47 tests/s, 31037.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nil\n\
    \  (0...nums.length).each do |i|\n    (i...nums.length).each do |j|\n      sub_array\
    \ = nums[i..j]\n      sum = sub_array.reduce(:+)\n      min_sum = sum if min_sum.nil?\
    \ || sum < min_sum\n    end\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate\
    \ = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2, 3, 4, 1, 2,\
    \ 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9fqapcq1\nStarted\n.\nFinished in 0.000439105 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2277.36 tests/s, 27328.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8wns1g4e\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp8wns1g4e.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004601292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.33 tests/s, 217.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2woy7esp\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp2woy7esp.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004624796 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.23 tests/s, 216.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps7vhyla1\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmps7vhyla1.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004418648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.31 tests/s, 226.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nil\n\
    \  nums.each_with_index do |num, i|\n    sum = num\n    min_sum = sum if min_sum.nil?\
    \ || sum < min_sum\n    (i + 1).upto(nums.length - 1) do |j|\n      sum += nums[j]\n\
    \      min_sum = sum if sum < min_sum\n    end\n  end\n  min_sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
    \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
    \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
    \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm6ekapfd\nStarted\n.\nFinished in 0.000459515 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 12 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2176.21 tests/s, 26114.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqcdhb3ei\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpqcdhb3ei.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004459854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.22 tests/s, 224.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7nlcsnnx\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp7nlcsnnx.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00439317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.63 tests/s, 227.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprb4zk87p\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmprb4zk87p.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004485333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.95 tests/s, 222.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps3ypqqch\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmps3ypqqch.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004710006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.31 tests/s, 212.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt8nm10fk\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpt8nm10fk.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.005014908 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.41 tests/s, 199.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0ky8rtbe\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmp0ky8rtbe.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004055365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.59 tests/s, 246.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  current_sum = 0\n  nums.each do |num|\n    current_sum += num\n    min_sum\
    \ = current_sum if current_sum < min_sum\n    current_sum = 0 if current_sum <\
    \ 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n    assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n   \
    \ assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n    assert_equal(0,\
    \ candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6, candidate.call([-1,\
    \ -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100, -1, -2, -3, 10,\
    \ -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n    assert_equal(-33,\
    \ candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10, candidate.call([-10]))\n\
    \    assert_equal(7, candidate.call([7]))\n    assert_equal(-1, candidate.call([1,\
    \ -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmparrj0r9w\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmparrj0r9w.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004564623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.08 tests/s, 219.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n# of nums.\n# Example\n# minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
    # minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums)\n  min_sum = nums[0]\n\
    \  sum = 0\n  nums.each do |num|\n    sum += num\n    min_sum = sum if sum < min_sum\n\
    \    sum = 0 if sum < 0\n  end\n  min_sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_minSubArraySum\n    candidate = method(:minSubArraySum)\n\
    \    assert_equal(1, candidate.call([2, 3, 4, 1, 2, 4]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3]))\n    assert_equal(-14, candidate.call([-1, -2,\
    \ -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
    \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
    \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3,\
    \ 4]))\n    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n   \
    \ assert_equal(-10, candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n\
    \    assert_equal(-1, candidate.call([1, -1]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd7lf_y81\nStarted\nF\n===============================================================================\n\
    Failure: test_minSubArraySum(TestHumanEval)\n/tmp/tmpd7lf_y81.rb:20:in `test_minSubArraySum'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_minSubArraySum\n\
    \     19:     candidate = method(:minSubArraySum)\n  => 20:     assert_equal(1,\
    \ candidate.call([2, 3, 4, 1, 2, 4]))\n     21:     assert_equal(-6, candidate.call([-1,\
    \ -2, -3]))\n     22:     assert_equal(-14, candidate.call([-1, -2, -3, 2, -10]))\n\
    \     23:     assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
    <1> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.004124896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.43 tests/s, 242.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
