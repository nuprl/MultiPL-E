name: HumanEval_147_get_max_triples
language: ruby
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# Input: n = 5\n\
  # Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is\
  \ (1, 7, 13).\ndef get_max_triples(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_triples\n\
  \    candidate = method(:get_max_triples)\n    assert_equal(1, candidate.call(5))\n\
  \    assert_equal(4, candidate.call(6))\n    assert_equal(36, candidate.call(10))\n\
  \    assert_equal(53361, candidate.call(100))\n  end\nend\n"
completions: ["  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count {\
    \ |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i +\
    \ 1 }\n  a.combination(3).select { |x, y, z| (x + y + z) % 3 == 0 }.size\nend",
  "  a = Array.new(n)\n  a[0] = 1\n  for i in 1..n-1\n    a[i] = i * i - i + 1\n \
    \ end\n  count = 0\n  for i in 0..n-3\n    for j in i+1..n-2\n      for k in j+1..n-1\n\
    \        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  a = []\n  (1..n).each do\
    \ |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do\
    \ |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = Array.new(n)\n  a[0] = 1\n  for i in 1..n-1\n\
    \    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 0..n-3\n    for j in\
    \ i+1..n-2\n      for k in j+1..n-1\n        if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  for i in 1..n\n    a << i * i - i + 1\n  end\n  count = 0\n  for i\
    \ in 0..n-3\n    for j in i+1..n-2\n      for k in j+1..n-1\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n   \
    \   (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i -\
    \ i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n \
    \     (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n\
    \    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do |i|\n\
    \    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n\
    \        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n\
    \  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (1..n - 2).each do |i|\n    (i + 1..n - 1).each do |j|\n      (j + 1..n).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a[i] = i * i - i\
    \ + 1\n  end\n  count = 0\n  for i in 1..n-2\n    for j in i+1..n-1\n      for\
    \ k in j+1..n\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  count\nend", "  a = Array.new(n) {\
    \ |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 ==\
    \ 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count\
    \ = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n\
    \      (j + 1..a.length - 1).each do |k|\n        count += 1 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each\
    \ do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each\
    \ do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n\
    \  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length - 2).each\
    \ do |j|\n      (j + 1..a.length - 1).each do |k|\n        count += 1 if a[i]\
    \ + a[j] + a[k] % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n\
    \  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length\
    \ - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length\
    \ - 1).each do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 == 0\n      end\n\
    \    end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i *\
    \ i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length\
    \ - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n        count +=\
    \ 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  p a\n  count =\
    \ 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n\
    \      (j + 1..a.length - 1).each do |k|\n        count += 1 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "    a = (1..n).map\
    \ { |i| i * i - i + 1 }\n    count = 0\n    for i in 0..n-3\n        for j in\
    \ i+1..n-2\n            for k in j+1..n-1\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n                    count += 1\n                end\n            end\n\
    \        end\n    end\n    count\nend", "  a = []\n  (1..n).each do |i|\n    a\
    \ << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i\
    \ + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n  \
    \      if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n \
    \     end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i +\
    \ 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n     \
    \ (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \      end\n    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a[i]\
    \ = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n-2\n    for j in i+1..n-1\n\
    \      for k in j+1..n\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  return count\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if a[i] + a[j] + a[k]\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  a.combination(3).select { |x, y, z| (x + y + z) % 3 == 0\
    \ }.size\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i,\
    \ j, k| (i + j + k) % 3 == 0 }\nend", "  a = []\n  (1..n).each do |i|\n    a <<\
    \ i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i +\
    \ 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n    \
    \    count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n\
    \  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n\
    \  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i -\
    \ i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length\
    \ - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n\
    \  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length - 2).each\
    \ do |j|\n      (j + 1..a.length - 1).each do |k|\n        count += 1 if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each\
    \ do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i -\
    \ i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length\
    \ - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n        count +=\
    \ 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  arr = Array.new(n) { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (arr[i] + arr[j] + arr[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  triples = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        triples\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  triples\n\
    end", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count\
    \ = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n\
    \      (j + 1..a.length - 1).each do |k|\n        count += 1 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n  for\
    \ i in 1..n-2\n    for j in i+1..n-1\n      for k in j+1..n\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  count\nend", "  a = []\n  for i in 1..n\n    a << i * i - i + 1\n  end\n\
    \  count = 0\n  for i in 0..a.length - 3\n    for j in i + 1..a.length - 2\n \
    \     for k in j + 1..a.length - 1\n        if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length\
    \ - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length\
    \ - 1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \  end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = Array.new(n)\n  a[0] = 1\n  for i in 1..n-1\n\
    \    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 0..n-3\n    for j in\
    \ i+1..n-2\n      for k in j+1..n-1\n        if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \          count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = []\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n\
    \  for i in 1..n-2\n    for j in i+1..n-1\n      for k in j+1..n\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n\
    \  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do\
    \ |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "  a = []\n  for i in 1..n\n    a << i * i - i + 1\n  end\n\
    \  count = 0\n  for i in 0..n-3\n    for j in i+1..n-2\n      for k in j+1..n-1\n\
    \        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  a = []\n  for i in 1..n\n\
    \    a << i * i - i + 1\n  end\n  count = 0\n  for i in 0..a.length - 3\n    for\
    \ j in i + 1..a.length - 2\n      for k in j + 1..a.length - 1\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n\
    \  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do\
    \ |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n\
    \  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do\
    \ |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n\
    \  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do\
    \ |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n\
    \  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n    \
    \  (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i +\
    \ 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n     \
    \ (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \      end\n    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a <<\
    \ i * i - i + 1\n  end\n  count = 0\n  for i in 0..a.length - 3\n    for j in\
    \ i + 1..a.length - 2\n      for k in j + 1..a.length - 1\n        if (a[i] +\
    \ a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i\
    \ - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each\
    \ do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "    a = (1..n).map { |i| i * i - i + 1 }\n    count\
    \ = 0\n    (0..n-3).each do |i|\n        (i+1..n-2).each do |j|\n            (j+1..n-1).each\
    \ do |k|\n                count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      \
    \      end\n        end\n    end\n    count\nend", "  a = []\n  for i in 1..n\n\
    \    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n-2\n    for j in\
    \ i+1..n-1\n      for k in j+1..n\n        if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length\
    \ - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length\
    \ - 1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \  end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i -\
    \ i + 1\n  end\n  p a\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i +\
    \ 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n    \
    \    count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n\
    \  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  for i in 1..n\n    a << i * i - i + 1\n  end\n  count = 0\n\
    \  for i in 0..n-3\n    for j in i+1..n-2\n      for k in j+1..n-1\n        if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n\
    \    end\n  end\n  return count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n\
    \  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length - 2).each\
    \ do |j|\n      (j + 1..a.length - 1).each do |k|\n        count += 1 if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length\
    \ - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length\
    \ - 1).each do |k|\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i -\
    \ i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n\
    \      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3\
    \ == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each do\
    \ |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do\
    \ |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each\
    \ do |k|\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n   \
    \     end\n      end\n    end\n  end\n  count\nend", "  a = Array.new(n)\n  a[0]\
    \ = 1\n  for i in 1..n-1\n    a[i] = i * i - i + 1\n  end\n  count = 0\n  for\
    \ i in 0..n-3\n    for j in i+1..n-2\n      for k in j+1..n-1\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i -\
    \ i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n\
    \      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3\
    \ == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each do\
    \ |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do\
    \ |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each\
    \ do |k|\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n   \
    \     end\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i\
    \ * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n\
    \      (j+1..n-1).each do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i -\
    \ i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = []\n  (1..n).each { |i| a << i * i - i + 1 }\n  count = 0\n  (0..a.length\
    \ - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length\
    \ - 1).each do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 == 0\n      end\n\
    \    end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i *\
    \ i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length\
    \ - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n        count +=\
    \ 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n   \
    \     end\n      end\n    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n\
    \    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n-2\n    for j in\
    \ i+1..n-1\n      for k in j+1..n\n        if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \          count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = Array.new(n) { |i| i * i - i + 1 }\n  count = 0\n  for i in 0..n-3\n\
    \    for j in i+1..n-2\n      for k in j+1..n-1\n        count += 1 if (a[i] +\
    \ a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n\
    \  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  for i in 0..n-3\n\
    \    for j in i+1..n-2\n      for k in j+1..n-1\n        count += 1 if (a[i] +\
    \ a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if a[i] + a[j] + a[k]\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n\
    \    a << i * i - i + 1\n  end\n  count = 0\n  for i in 0..n-3\n    for j in i+1..n-2\n\
    \      for k in j+1..n-1\n        if (a[i] + a[j] + a[k]) % 3 == 0\n         \
    \ count += 1\n        end\n      end\n    end\n  end\n  count\nend", "  a = []\n\
    \  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length\
    \ - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length\
    \ - 1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n    \
    \  end\n    end\n  end\n  count\nend", "  a = Array.new(n)\n  for i in 1..n\n\
    \    a[i-1] = i * i - i + 1\n  end\n  count = 0\n  for i in 0..n-3\n    for j\
    \ in i+1..n-2\n      for k in j+1..n-1\n        if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n          count += 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  a.each_with_index\
    \ do |num, i|\n    a[i + 1..-1].each_with_index do |num2, j|\n      a[i + j +\
    \ 2..-1].each do |num3|\n        count += 1 if num + num2 + num3 % 3 == 0\n  \
    \    end\n    end\n  end\n  count\nend", "  a = Array.new(n) { |i| i * i - i +\
    \ 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n     \
    \ (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n \
    \   a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
  "  a = Array.new(n)\n  a[0] = 1\n  for i in 1..n-1\n    a[i] = i * i - i + 1\n \
    \ end\n  count = 0\n  for i in 0..n-3\n    for j in i+1..n-2\n      for k in j+1..n-1\n\
    \        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  a = (1..n).map { |i| i *\
    \ i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n\
    \      (j+1..n-1).each do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i -\
    \ i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n \
    \     (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n  \
    \  a << i * i - i + 1\n  end\n  count = 0\n  for i in 0..n-3\n    for j in i+1..n-2\n\
    \      for k in j+1..n-1\n        if (a[i] + a[j] + a[k]) % 3 == 0\n         \
    \ count += 1\n        end\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if a[i] + a[j] + a[k]\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each\
    \ do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i -\
    \ i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n\
    \      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3\
    \ == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i *\
    \ i - i + 1 }\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length\
    \ - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n        count +=\
    \ 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n  for\
    \ i in 1..n-2\n    for j in i+1..n-1\n      for k in j+1..n\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n\
    \  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do\
    \ |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n\
    \  (1..n-2).each do |i|\n    (i+1..n-1).each do |j|\n      (j+1..n).each do |k|\n\
    \        count += 1 if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n  end\n\
    \  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n\
    \  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length - 2).each\
    \ do |j|\n      (j + 1..a.length - 1).each do |k|\n        count += 1 if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\n\
    end", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n\
    \  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n\
    \  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n    \
    \  (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n \
    \   a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do |i|\n\
    \    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n\
    \        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n\
    \  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  p a\n\
    \  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i -\
    \ i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n\
    \      (j+1..n-1).each do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i -\
    \ i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n \
    \     (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i -\
    \ i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n \
    \     (j+1..n-1).each do |k|\n        count += 1 if a[i] + a[j] + a[k] % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = Array.new(n)\n  a[0] = 1\n\
    \  for i in 1..n-1\n    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 0..n-3\n\
    \    for j in i+1..n-2\n      for k in j+1..n-1\n        if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n          count += 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n\
    \  triples = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        triples += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n \
    \   end\n  end\n  triples\nend", "  a = []\n  (1..n).each do |i|\n    a << i *\
    \ i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = Array.new(n) { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "    a = (1..n).map { |i|\
    \ i * i - i + 1 }\n    count = 0\n    (0..n-3).each do |i|\n        (i+1..n-2).each\
    \ do |j|\n            (j+1..n-1).each do |k|\n                count += 1 if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n            end\n        end\n    end\n    count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = Array.new(n)\n  a[0] = 1\n  for i in 1..n-1\n    a[i] = i*i - i +\
    \ 1\n  end\n  count = 0\n  for i in 0..n-3\n    for j in i+1..n-2\n      for k\
    \ in j+1..n-1\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = Array.new(n)\n  a[0] = 1\n  for i in 1..n-1\n    a[i] = i * i - i + 1\n \
    \ end\n  count = 0\n  for i in 0..n-3\n    for j in i+1..n-2\n      for k in j+1..n-1\n\
    \        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  a = []\n  (1..n).each do\
    \ |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do\
    \ |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = Array.new(n) { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  triples\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        triples += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n \
    \   end\n  end\n  triples\nend", "  a = []\n  for i in 1..n\n    a << i * i -\
    \ i + 1\n  end\n  count = 0\n  for i in 0..a.length - 3\n    for j in i + 1..a.length\
    \ - 2\n      for k in j + 1..a.length - 1\n        if (a[i] + a[j] + a[k]) % 3\
    \ == 0\n          count += 1\n        end\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  for i in 1..n\n    a[i] = i * i - i + 1\n  end\n  count = 0\n\
    \  for i in 1..n-2\n    for j in i+1..n-1\n      for k in j+1..n\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend", "  a = []\n  (1..n).each do |i|\n    a << i * i\
    \ - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length\
    \ - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n        count +=\
    \ 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do\
    \ |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = []\n  for i in 1..n\n    a << i * i - i + 1\n  end\n  count = 0\n\
    \  for i in 0..n-3\n    for j in i+1..n-2\n      for k in j+1..n-1\n        if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n      end\n\
    \    end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a << i * i - i\
    \ + 1\n  end\n  count = 0\n  for i in 0..n-3\n    for j in i+1..n-2\n      for\
    \ k in j+1..n-1\n        if a[i] + a[j] + a[k] % 3 == 0\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n \
    \ (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n\
    \        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n        end\n\
    \      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each do |i|\n \
    \   a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each\
    \ do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length\
    \ - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n        count +=\
    \ 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = []\n  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n \
    \ (0..a.length - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n     \
    \ (j + 1..a.length - 1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do\
    \ |j|\n      (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n \
    \   (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1 if\
    \ (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ return 0 if n < 3\n  a = []\n  (1..n).each { |i| a << i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = []\n  for i in 1..n\n    a[i] = i * i - i\
    \ + 1\n  end\n  count = 0\n  for i in 1..n-2\n    for j in i+1..n-1\n      for\
    \ k in j+1..n\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count += 1\n\
    \        end\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length - 3).each\
    \ do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
