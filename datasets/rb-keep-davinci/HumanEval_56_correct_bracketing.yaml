name: HumanEval_56_correct_bracketing
language: ruby
prompt: "# brackets is a string of \"<\" and \">\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n\
  # False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"<<><>>\"\
  )\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
  \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
  ))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false,\
  \ candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n  \
  \  assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\"\
  >\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false,\
  \ candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"\
  <><><<><>><>>><>\"))\n  end\nend\n"
completions: ["  # YOUR CODE HERE\nend", "  # your code here\nend", "  open_brackets\
    \ = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      open_brackets\
    \ += 1\n    elsif char == \">\"\n      open_brackets -= 1\n    end\n    if open_brackets\
    \ < 0\n      return false\n    end\n  end\n  return open_brackets == 0\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n    return\
    \ False\n  elsif brackets[0] == '>'\n    return False\n  elsif brackets[0] ==\
    \ '<'\n    return correct_bracketing(brackets[1..-1])\n  elsif brackets[-1] ==\
    \ '<'\n    return False\n  elsif brackets[-1] == '>'\n    return correct_bracketing(brackets[0..-2])\n\
    \  else\n    return correct_bracketing(brackets[1..-2])\n  end\nend", "  # YOUR\
    \ CODE HERE\nend", "  # YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "    # YOUR CODE HERE\nend", "  # YOUR CODE HERE\n\
    end", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "  # TODO: implement this function\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: implement this function\n\
    end", "  # YOUR CODE HERE\nend", "  return false if brackets.length % 2 != 0\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n    \
    \  stack.push(char)\n    else\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "  # your code here\nend", "  # if brackets.length % 2 != 0\n  #   return\
    \ false\n  # end\n  #\n  # if brackets.length == 0\n  #   return true\n  # end\n\
    \  #\n  # if brackets[0] == \"<\"\n  #   return correct_bracketing(brackets[1..-1])\n\
    \  # end\n  #\n  # if brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[0..-2])\n\
    \  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \"<\"\n  #   return\
    \ correct_bracketing(brackets[1..-2])\n  # end\n  #\n  # if brackets[0] == \"\
    >\" && brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[1..-1])\n\
    \  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \"<\"\n  #   return\
    \ correct_bracketing(brackets[0..-2])\n  # end\n  #\n  # if brackets[0] == \"\
    <\" && brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[1..-1])\n\
    \  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \"<\"\n  #   return\
    \ correct_bracketing(brackets[1..-2])\n  # end\n  #\n  # if brackets[0] == \"\
    >\" && brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[1..-1])\n\
    \  # end\n  #\n  # if brackets[0] == \"<\" && brackets[-1] == \"<\"\n  #   return\
    \ correct_bracketing(brackets[0..-2])\n  # end\n  #\n  # if brackets[0] == \"\
    <\" && brackets[-1] == \">\"\n  #   return correct_bracketing(brackets[1..-1])\n\
    \  # end\n  #\n  # if brackets[0] == \">\" && brackets[-1] == \"<\"\n  #", " \
    \ # your code here\nend", "  # your code here\nend", "  return false if brackets.length\
    \ == 1\n  return true if brackets.length == 0\n  return false if brackets[0] ==\
    \ \">\"\n  return false if brackets[-1] == \"<\"\n  return correct_bracketing(brackets[1..-1])\
    \ if brackets[0] == \"<\"\n  return correct_bracketing(brackets[0..-2]) if brackets[-1]\
    \ == \">\"\nend", "  # TODO: implement this function\n  return false if brackets.length\
    \ == 1\n  return true if brackets.length == 0\n  return false if brackets[0] ==\
    \ \">\"\n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return true\nend", "  # TODO: implement this\
    \ function\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: implement this function\nend", "  # YOUR CODE HERE\nend", "  stack =\
    \ []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # YOUR CODE HERE\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR CODE HERE\nend", " \
    \ # if brackets.length % 2 == 1\n  #   return false\n  # end\n  #\n  # if brackets[0]\
    \ == \">\"\n  #   return false\n  # end\n  #\n  # if brackets[-1] == \"<\"\n \
    \ #   return false\n  # end\n  #\n  # if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  #   return false\n  # end\n  #\n  # return true", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\n\
    end", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  # your code here\n\
    end", "  return false if brackets.length % 2 != 0\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      if\
    \ stack.empty?\n        return false\n      else\n        stack.pop\n      end\n\
    \    end\n  end\n  return stack.empty?\nend", "  # YOUR CODE HERE\nend", "  #\
    \ your code here\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend",
  "  # your code here\nend", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # your code here\nend", "  if brackets.length\
    \ == 0\n    return True\n  elif brackets.length == 1\n    return False\n  else\n\
    \    if brackets[0] == \"<\"\n      if brackets[-1] == \">\"\n        return correct_bracketing(brackets[1..-2])\n\
    \      else\n        return False\n      end\n    else\n      return False\n \
    \   end\n  end\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this function\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\n\
    end", "  # your code here\nend", "  # YOUR CODE HERE\nend", "  count = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n\
    \      count -= 1\n    end\n    return false if count < 0\n  end\n  return count\
    \ == 0\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  stack =\
    \ []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  count\
    \ = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n      count += 1\n\
    \    elsif char == \">\"\n      count -= 1\n    end\n    return false if count\
    \ < 0\n  end\n  count == 0\nend", "  # TODO: implement this function\nend", " \
    \ return false if brackets.length % 2 != 0\n  return false if brackets[0] == \"\
    >\"\n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return true\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # TODO: implement this\
    \ function\nend", "  # YOUR CODE HERE\nend", "    count = 0\n    brackets.each_char\
    \ do |char|\n        if char == \"<\"\n            count += 1\n        elsif char\
    \ == \">\"\n            count -= 1\n        end\n        if count < 0\n      \
    \      return False\n        end\n    end\n    return count == 0\nend", "  count\
    \ = 0\n  brackets.each_char do |char|\n    count += 1 if char == \"<\"\n    count\
    \ -= 1 if char == \">\"\n    return false if count < 0\n  end\n  count == 0\n\
    end", "  stack = []\n  brackets.each_char do |c|\n    if c == \"<\"\n      stack.push(c)\n\
    \    elsif c == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR\
    \ CODE HERE\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement me\nend", " \
    \ if brackets.length % 2 != 0\n    return false\n  end\n  if brackets.length ==\
    \ 0\n    return true\n  end\n  if brackets[0] == '>'\n    return false\n  end\n\
    \  if brackets[0] == '<'\n    return correct_bracketing(brackets[1..-1])\n  end\n\
    end", "  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n   \
    \   count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "  # YOUR CODE HERE\nend", " \
    \ # YOUR CODE HERE\nend", "  # your code here\nend", "    count = 0\n    brackets.each_char\
    \ do |char|\n        if char == \"<\"\n            count += 1\n        elsif char\
    \ == \">\"\n            count -= 1\n        end\n        if count < 0\n      \
    \      return False\n        end\n    end\n    return count == 0\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # YOUR CODE HERE\nend", "   \
    \ stack = []\n    brackets.each_char do |char|\n        if char == \"<\"\n   \
    \         stack.push(char)\n        elsif char == \">\"\n            if stack.empty?\n\
    \                return false\n            else\n                stack.pop\n \
    \           end\n        end\n    end\n    return stack.empty?\nend", "  # TODO:\
    \ complete this function\nend", "  count = 0\n  brackets.each_char do |char|\n\
    \    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "  # YOUR CODE HERE\nend", " \
    \ return false if brackets.length == 1\n  return true if brackets.length == 0\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  return correct_bracketing(brackets[1..-1]) if brackets[0] == \"<\"\n  return\
    \ correct_bracketing(brackets[0..-2]) if brackets[-1] == \">\"\nend", "  # TODO:\
    \ implement this function\nend", "  # your code here\nend", "  # TODO: implement\
    \ this function\nend", "  # your code here\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  # YOUR CODE HERE\nend", "  count = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n\
    \      count -= 1\n    end\n    return false if count < 0\n  end\n  return false\
    \ if count != 0\n  true\nend", "  # YOUR CODE HERE\nend", "  # your code here\n\
    end", "  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n   \
    \   count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "  count = 0\n  brackets.each_char\
    \ do |char|\n    count += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n\
    \    return false if count < 0\n  end\n  count == 0\nend", "  # your code here\n\
    end", "  # your code here\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  return stack.empty?\nend", "  # your code here\nend",
  "  # YOUR CODE HERE\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  # your code here\nend", "  # YOUR CODE HERE\n\
    end", "  # your code here\nend", "  # your code here\n  count = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n\
    \      count -= 1\n    end\n    if count < 0\n      return false\n    end\n  end\n\
    \  if count == 0\n    return true\n  else\n    return false\n  end\nend", "  #\
    \ YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char do |c|\n    if c ==\
    \ \"<\"\n      stack.push(c)\n    elsif c == \">\"\n      if stack.empty?\n  \
    \      return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # YOUR CODE HERE\nend", "  open_brackets = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      open_brackets += 1\n    elsif char ==\
    \ \">\"\n      open_brackets -= 1\n    end\n    return false if open_brackets\
    \ < 0\n  end\n  open_brackets == 0\nend", "  # TODO: implement this function\n\
    \  # if brackets.length % 2 != 0\n  #   return false\n  # end\n  #\n  # if brackets[0]\
    \ == \">\"\n  #   return false\n  # end\n  #\n  # if brackets[-1] == \"<\"\n \
    \ #   return false\n  # end\n  #\n  # if brackets.include?(\"<>\")\n  #   return\
    \ true\n  # end\n  #\n  # if brackets.include?(\"<><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><>\")\n  #   return true\n  # end\n\
    \  #\n  # if brackets.include?(\"<><><><>\")\n  #   return true\n  # end\n  #\n\
    \  # if brackets.include?(\"<><><><><>\")\n  #   return true\n  # end\n  #\n \
    \ # if brackets.include?(\"<><><><><><>\")\n  #   return true\n  # end\n  #\n\
    \  # if brackets.include?(\"<><><><><><><>\")\n  #   return true\n  # end\n  #\n\
    \  # if brackets.include?(\"<><><><><><><><>\")\n  #   return true\n  # end\n\
    \  #\n  # if brackets.include?(\"<><><><><><><><><>\")\n  #   return true\n  #\
    \ end\n  #\n  # if brackets.include?(\"<><><><><><><><><><>\")\n  #   return true\n\
    \  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><>\")\n  #   return\
    \ true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><>\")\n\
    \  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><><>\"\
    )\n  #   return true\n  # end\n  #\n  # if brackets.include?(\"<><><><><><><><><><><><><><>\"\
    )\n ", "  # your code here\nend", "    count = 0\n    brackets.each_char do |char|\n\
    \        if char == \"<\"\n            count += 1\n        elsif char == \">\"\
    \n            count -= 1\n        end\n        if count < 0\n            return\
    \ False\n        end\n    end\n    return count == 0\nend", "    count = 0\n \
    \   brackets.each_char do |char|\n        if char == \"<\"\n            count\
    \ += 1\n        elsif char == \">\"\n            count -= 1\n        end\n   \
    \     if count < 0\n            return False\n        end\n    end\n    return\
    \ count == 0\nend", "  # YOUR CODE HERE\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # YOUR CODE HERE\nend", " \
    \ # YOUR CODE HERE\nend", "  return false if brackets.length.odd?\n  return false\
    \ if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  return false\
    \ if brackets.count(\"<\") != brackets.count(\">\")\n  return true\nend", "  #\
    \ your code here\nend", "    # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend",
  "    count = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n   \
    \         count += 1\n        elsif char == \">\"\n            count -= 1\n  \
    \      end\n        if count < 0\n            return False\n        end\n    end\n\
    \    if count == 0\n        return True\n    else\n        return False\n    end\n\
    end", "  if brackets.length == 0\n    return True\n  elif brackets.length == 1\n\
    \    return False\n  else\n    if brackets[0] == \"<\"\n      if brackets[-1]\
    \ == \">\"\n        return correct_bracketing(brackets[1..-2])\n      else\n \
    \       return False\n      end\n    else\n      return False\n    end\n  end\n\
    end", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  # YOUR CODE HERE\n\
    end", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  left_brackets =\
    \ 0\n  right_brackets = 0\n  brackets.each_char do |char|\n    if char == \"<\"\
    \n      left_brackets += 1\n    elsif char == \">\"\n      right_brackets += 1\n\
    \    end\n  end\n  left_brackets == right_brackets\nend", "  # TODO: implement\
    \ this function\nend", "  # your code here\nend", "  # your code here\nend", " \
    \ # your code here\nend", "    count = 0\n    brackets.each_char do |char|\n \
    \       if char == \"<\"\n            count += 1\n        elsif char == \">\"\n\
    \            count -= 1\n        end\n        if count < 0\n            return\
    \ False\n        end\n    end\n    return count == 0\nend", "  # check if the\
    \ brackets are balanced\n  # if not, return false\n  # if balanced, return true\n\
    \  # create a stack\n  # loop through the brackets\n  # if the bracket is an opening\
    \ bracket, push it to the stack\n  # if the bracket is a closing bracket, pop\
    \ the stack\n  # if the stack is empty, return true\n  # if the stack is not empty,\
    \ return false\n  stack = []\n  brackets.each_char do |bracket|\n    if bracket\
    \ == \"<\"\n      stack.push(bracket)\n    elsif bracket == \">\"\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  # your\
    \ code here\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  count = 0\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      count += 1\n    elsif char == \">\"\n\
    \      count -= 1\n    end\n    return false if count < 0\n  end\n  count == 0\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # fill in your\
    \ code here\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  #\
    \ YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  # TODO: implement this function\n\
    end", "  count = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n   \
    \   count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n    return\
    \ false if count < 0\n  end\n  count == 0\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  count = 0\n  brackets.each_char do |char|\n    count\
    \ += 1 if char == \"<\"\n    count -= 1 if char == \">\"\n    return false if\
    \ count < 0\n  end\n  count == 0\nend", "  # YOUR CODE HERE\nend", "  # TODO:\
    \ implement this function\nend", "  # your code here\nend", "  # YOUR CODE HERE\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend", " \
    \ # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: implement this function\nend", "  # TODO: implement this function\n\
    end", "  # your code here\nend", "  if brackets.length == 0\n    return True\n\
    \  elif brackets.length == 1\n    return False\n  else\n    if brackets[0] ==\
    \ \"<\"\n      if brackets[-1] == \">\"\n        return correct_bracketing(brackets[1..-2])\n\
    \      else\n        return False\n      end\n    else\n      return False\n \
    \   end\n  end\nend", "  # YOUR CODE HERE\nend", "  # YOUR CODE HERE\nend", "\n\
    end", "  # your code here\nend", "  # YOUR CODE HERE\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
