name: HumanEval_20_find_closest_elements
language: ruby
results:
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).to_a.min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2tetidj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2tetidj.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003535 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.89 tests/s, 565.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next\
    \ if index == 0\n    if (num - numbers[index - 1]).abs < (closest[1] - closest[0]).abs\n\
    \      closest = [numbers[index - 1], num]\n    end\n  end\n  closest\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfz2f__mr\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 20576.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2kxvdh6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq2kxvdh6.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.007817 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.93 tests/s, 255.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest\n        closest = numbers[index + 1] - number\n   \
    \     closest_pair = [number, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplytmn8tb\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  closest = numbers.combination(2).map\
    \ { |a, b| (a - b).abs }.min\n  numbers.combination(2).select { |a, b| (a - b).abs\
    \ == closest }.flatten.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04s6jcce\n\
    Started\n.\nFinished in 0.000269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3717.47 tests/s, 18587.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbgtm1h_p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbgtm1h_p.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003811 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.40 tests/s, 524.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3nmqjc6u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3nmqjc6u.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.32 tests/s, 556.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest\n        closest = numbers[index + 1] - number\n   \
    \     closest_pair = [number, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a3q91ow\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_distance\
    \ = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n \
    \ numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number\
    \ - numbers[index - 1]) < closest_distance\n      closest_distance = number -\
    \ numbers[index - 1]\n      closest_elements = [numbers[index - 1], number]\n\
    \    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabuvkxej\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1_kqgj5a\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 21645.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_i19j0l6\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 19685.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmu6nlgc\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 23474.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index == numbers.length - 1\n      break\n    end\n\
    \    if numbers[index + 1] - number < closest\n      closest = numbers[index +\
    \ 1] - number\n      closest_pair = [number, numbers[index + 1]]\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppj7ofyvs\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 23148.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_knn133\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_knn133.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.00362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.24 tests/s, 552.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n\
    \  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    if index < numbers.length - 1\n      if (numbers[index + 1] - number).abs\
    \ < closest_difference\n        closest_elements = [number, numbers[index + 1]]\n\
    \        closest_difference = (numbers[index + 1] - number).abs\n      end\n \
    \   end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpladpmn1j\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 23364.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (number - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_elements = [numbers[index - 1], number]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeepntwse\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 23474.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprq0x8jrc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprq0x8jrc.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.029567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.82 tests/s, 67.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp11b_bq6v\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidq072md\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpidq072md.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.27 tests/s, 578.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, i|\n    next if i == 0\n    diff = (num -\
    \ numbers[i - 1]).abs\n    if diff < closest_diff\n      closest_pair = [numbers[i\
    \ - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk8xrmgxe\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 23255.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn6or4hi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn6or4hi.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.004896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.25 tests/s, 408.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).map\
    \ { |a, b| [a, b, (a - b).abs] }.min_by { |a, b, c| c }[0..1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4tfwh4z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4tfwh4z.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.007312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.76 tests/s, 273.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvp26ul6o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvp26ul6o.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.47 tests/s, 552.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_2s54q0\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 23255.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ztz55g9\n\
    Started\n.\nFinished in 0.000435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2298.85 tests/s, 11494.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest\n        closest = numbers[index + 1] - number\n   \
    \     closest_pair = [number, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp094p5tc4\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 21834.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa623106a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa623106a.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.78 tests/s, 581.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ [numbers[0], numbers[1]]\n  (0..numbers.length-2).each do |i|\n    if (numbers[i+1]\
    \ - numbers[i]).abs < (closest[1] - closest[0]).abs\n      closest = [numbers[i],\
    \ numbers[i+1]]\n    end\n  end\n  closest\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo39zkob6\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 23255.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).map\
    \ { |x, y| [x, y, (x - y).abs] }.sort_by { |x, y, z| z }.first[0..1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ex3887q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ex3887q.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.005398 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.25 tests/s, 370.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps4n8iqgo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps4n8iqgo.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.014705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.00 tests/s, 136.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest\n        closest = numbers[index + 1] - number\n   \
    \     closest_pair = [number, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpblggndaa\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 24271.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx676ych0\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 20920.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n\
    \    diff = (numbers[i + 1] - num).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [num, numbers[i + 1]]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp33w_xlcn\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 23584.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rk3ia43\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rk3ia43.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.35 tests/s, 560.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrkxc72x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplrkxc72x.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.007555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.36 tests/s, 264.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = closest_pair[1] - closest_pair[0]\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ num - numbers[index - 1]\n    if diff < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk506z4o0\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ [numbers[0], numbers[1]]\n  closest_diff = (closest[0] - closest[1]).abs\n \
    \ numbers.each_with_index do |num, i|\n    next if i == 0\n    diff = (num - numbers[i\
    \ - 1]).abs\n    if diff < closest_diff\n      closest = [numbers[i - 1], num]\n\
    \      closest_diff = diff\n    end\n  end\n  closest\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lbe9ez3\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 24154.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptsm5gql\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 19762.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: implement this function\n\
    \  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |num, index|\n    if index < numbers.length\
    \ - 1\n      if numbers[index + 1] - num < closest\n        closest = numbers[index\
    \ + 1] - num\n        closest_pair = [num, numbers[index + 1]]\n      end\n  \
    \  end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp26h3f8c7\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 22321.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = closest_elements[1] - closest_elements[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n\
    \      closest_elements = [numbers[index - 1], numbers[index]]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfjfi5ncb\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 20576.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjehl85nl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjehl85nl.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.006639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.63 tests/s, 301.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa95566qc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa95566qc.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.00377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.25 tests/s, 530.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw05lwq41\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 24154.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n\
    \  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  for i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i]\
    \ < closest\n      closest = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i],\
    \ numbers[i+1]]\n    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqh24fq7c\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 21929.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpba5ofsnc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpba5ofsnc.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.52 tests/s, 577.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (number - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_elements = [numbers[index - 1], number]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fr6qurr\n\
    Started\n.\nFinished in 0.000618 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1618.12 tests/s, 8090.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index != numbers.length - 1\n      if numbers[index\
    \ + 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpim1d8a6w\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 24630.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprvblvok6\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 23696.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n\
    \  numbers.sort!\n  min = numbers[1] - numbers[0]\n  result = [numbers[0], numbers[1]]\n\
    \  numbers.each_with_index do |number, index|\n    if index < numbers.length -\
    \ 1\n      if numbers[index + 1] - number < min\n        min = numbers[index +\
    \ 1] - number\n        result = [number, numbers[index + 1]]\n      end\n    end\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqye1o332\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 22727.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgu_dhqyf\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 24630.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbufdowwo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbufdowwo.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.007465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.96 tests/s, 267.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: implement this function\n\
    \  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff =\
    \ (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    if index == numbers.length - 1\n      break\n    end\n    if (numbers[index\
    \ + 1] - number).abs < closest_diff\n      closest_pair = [number, numbers[index\
    \ + 1]]\n      closest_diff = (numbers[index + 1] - number).abs\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp53ktw828\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 23474.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # Your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp780zw7jm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp780zw7jm.rb:14:in\
    \ `test_find_closest_elements'\n     11: class TestHumanEval < Test::Unit::TestCase\n\
    \     12:   def test_find_closest_elements\n     13:     candidate = method(:find_closest_elements)\n\
    \  => 14:     assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]))\n     15:     assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]))\n     16:     assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n<[3.9, 4.0]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.98 tests/s, 309.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprq5knppk\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 23041.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwp860cc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwp860cc.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.014445 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.23 tests/s, 138.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo8zdrmai\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo8zdrmai.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.00692 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.51 tests/s, 289.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6dk3vxu\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 20161.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i\
    \ in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest\n      closest\
    \ = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n\
    \    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxuxzhwvc\n\
    Started\n.\nFinished in 0.000805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1242.24 tests/s, 6211.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if num - numbers[index - 1] < closest\n\
    \      closest = num - numbers[index - 1]\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n   \
    \ candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
    \ 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpriv9b_og\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 22321.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz86_2_xw\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 24271.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (number - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_elements = [numbers[index - 1], number]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrour1cj\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 22624.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnslidjrg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnslidjrg.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.25 tests/s, 568.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqpg5uhy\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnw6o3fc\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 20576.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp330fw_l5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp330fw_l5.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003833 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.89 tests/s, 521.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7a8qvyl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7a8qvyl.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.31 tests/s, 532.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).map\
    \ { |a, b| [a, b, (a - b).abs] }.sort_by { |a, b, c| c }.first[0..1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4v1tu4h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4v1tu4h.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.004061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.24 tests/s, 492.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxadr4miy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxadr4miy.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.19 tests/s, 560.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7u4f2uq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7u4f2uq.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003949 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    253.23 tests/s, 506.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    if\
    \ (number - numbers[index - 1]).abs < closest_distance\n      closest_distance\
    \ = (number - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1],\
    \ number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplpfmd3c0\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 22624.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).map\
    \ { |a, b| [a, b, (a - b).abs] }.sort_by { |a, b, c| c }.first[0..1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_fedevf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_fedevf.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.004501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.17 tests/s, 444.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4q4d_k79\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4q4d_k79.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.05 tests/s, 566.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjlomng1d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjlomng1d.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.35 tests/s, 576.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) <\
    \ closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair\
    \ = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfdaj3uzk\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 23474.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3eytcwdy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3eytcwdy.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003455 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.44 tests/s, 578.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest\n        closest = numbers[index + 1] - number\n   \
    \     closest_pair = [number, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyb7w9nfz\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 20920.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5u_m_yv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5u_m_yv.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.039706 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.19 tests/s, 50.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcwm0re4q\n\
    Started\n.\nFinished in 0.000262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3816.79 tests/s, 19083.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, i|\n    next if i == 0\n    diff = (num -\
    \ numbers[i - 1]).abs\n    if diff < closest_diff\n      closest_pair = [numbers[i\
    \ - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj1dlqbbs\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).to_a.map\
    \ { |x, y| [x, y, (x - y).abs] }.min_by { |x, y, z| z }[0..1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb49q4tww\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb49q4tww.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.53 tests/s, 567.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).to_a.min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhyf2bzg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhyf2bzg.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003601 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.70 tests/s, 555.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cmpwl9f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8cmpwl9f.rb:14:in\
    \ `test_find_closest_elements'\n     11: class TestHumanEval < Test::Unit::TestCase\n\
    \     12:   def test_find_closest_elements\n     13:     candidate = method(:find_closest_elements)\n\
    \  => 14:     assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]))\n     15:     assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]))\n     16:     assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n<[3.9, 4.0]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.88 tests/s, 304.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9spmmb8i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9spmmb8i.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003862 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    258.93 tests/s, 517.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpchcqp38x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpchcqp38x.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.25 tests/s, 564.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index == numbers.length - 1\n      break\n    end\n\
    \    if numbers[index + 1] - num < closest\n      closest = numbers[index + 1]\
    \ - num\n      closest_pair = [num, numbers[index + 1]]\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvjy0m2lp\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 23041.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsukiybl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsukiybl.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.83 tests/s, 585.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppaadepve\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppaadepve.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.014934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.96 tests/s, 133.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfxxz1x73\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfxxz1x73.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.29 tests/s, 572.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprml_0rqy\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq29ube2x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq29ube2x.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003624 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.94 tests/s, 551.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw30u5d3r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw30u5d3r.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.006893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.07 tests/s, 290.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoqefeic8\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 24630.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmaoafn_z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmaoafn_z.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.00379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.85 tests/s, 527.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpee_nnmv9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpee_nnmv9.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.10 tests/s, 576.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    if\
    \ (number - numbers[index - 1]).abs < closest_distance\n      closest_distance\
    \ = (number - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1],\
    \ number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1i9u113s\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i\
    \ in 0..numbers.length-2\n    if (numbers[i+1] - numbers[i]) < closest\n     \
    \ closest = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n\
    \    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpddwqno68\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpndl5cft9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpndl5cft9.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.005329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.65 tests/s, 375.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpge51d2kg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpge51d2kg.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.77 tests/s, 567.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpum8xot6x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpum8xot6x.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.69 tests/s, 575.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).map\
    \ { |a, b| [a, b, (a - b).abs] }.min_by { |a, b, c| c }[0..1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtiw7jt7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwtiw7jt7.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.026655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.52 tests/s, 75.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4k1njrg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4k1njrg.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.57 tests/s, 549.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n\
    \  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if (number - numbers[index\
    \ + 1]).abs < (closest_elements[0] - closest_elements[1]).abs\n        closest_elements\
    \ = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_elements\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8gcz3zez\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i\
    \ in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest\n      closest\
    \ = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n\
    \    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2uxl_mi\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 21739.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n\
    \    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n   \
    \ candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
    \ 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqbm67o1v\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzf1_9bsb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzf1_9bsb.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.004868 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.42 tests/s, 410.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).map\
    \ { |n1, n2| [n1, n2, (n1 - n2).abs] }.sort_by { |n1, n2, diff| diff }.first[0..1]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9wcu8d1u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9wcu8d1u.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.0035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.71 tests/s, 571.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp17w4ahwy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp17w4ahwy.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.32 tests/s, 530.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2a_gre2t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2a_gre2t.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.29 tests/s, 572.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n\
    \      distance = (numbers[index + 1] - num).abs\n      if distance < closest_distance\n\
    \        closest_distance = distance\n        closest_pair = [num, numbers[index\
    \ + 1]]\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyknrswwr\n\
    Started\n.\nFinished in 0.01192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    83.89 tests/s, 419.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (number - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_elements = [numbers[index - 1], number]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcjqsnm8m\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 22026.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i\
    \ in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest\n      closest\
    \ = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n\
    \    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa9yux1nl\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 21834.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_distance\n      closest_distance = (num\
    \ - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], num]\n\
    \    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj7k4r890\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 23255.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index == numbers.length - 1\n      break\n    end\n\
    \    if numbers[index + 1] - number < closest\n      closest = numbers[index +\
    \ 1] - number\n      closest_pair = [number, numbers[index + 1]]\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70ssock1\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 22026.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7jf0rduk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7jf0rduk.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.029223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    34.22 tests/s, 68.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdqmzk7p_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdqmzk7p_.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.95 tests/s, 581.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ [numbers[0], numbers[1]]\n  closest_diff = (closest[0] - closest[1]).abs\n \
    \ numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n \
    \   diff = (num - numbers[i + 1]).abs\n    if diff < closest_diff\n      closest\
    \ = [num, numbers[i + 1]]\n      closest_diff = diff\n    end\n  end\n  closest\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu7mg4_kf\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 20920.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp571k3czd\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 21459.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).to_a.min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnrpeoj_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnrpeoj_.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.006667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.99 tests/s, 299.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) <\
    \ closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair\
    \ = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp41o3ystd\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 22624.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # YOUR CODE HERE\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb9izltts\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb9izltts.rb:16:in\
    \ `test_find_closest_elements'\n     13:   def test_find_closest_elements\n  \
    \   14:     candidate = method(:find_closest_elements)\n     15:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 16:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     17:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     18:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     19:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 581.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n\
    \  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpebjhpbgx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpebjhpbgx.rb:16:in\
    \ `test_find_closest_elements'\n     13:   def test_find_closest_elements\n  \
    \   14:     candidate = method(:find_closest_elements)\n     15:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 16:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     17:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     18:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     19:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.17 tests/s, 564.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).map\
    \ { |x, y| [x, y, (x - y).abs] }.min_by { |x, y, z| z }[0..1]\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6lrgt2k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr6lrgt2k.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.008078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.79 tests/s, 247.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if numbers[index] - numbers[index\
    \ - 1] < closest\n      closest = numbers[index] - numbers[index - 1]\n      closest_elements\
    \ = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_elements\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxfov9kjq\n\
    Started\n.\nFinished in 0.000673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1485.88 tests/s, 7429.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypoaya01\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = number - numbers[index - 1]\n    if difference < closest_difference\n    \
    \  closest_elements = [numbers[index - 1], number]\n      closest_difference =\
    \ difference\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n   \
    \ candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
    \ 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo4xzn2s\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 23041.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkm_tu_mv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkm_tu_mv.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.013558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.76 tests/s, 147.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfbrjb77f\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 22624.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ [numbers[0], numbers[1]]\n  (0..numbers.length-2).each do |i|\n    if (numbers[i+1]\
    \ - numbers[i]).abs < (closest[1] - closest[0]).abs\n      closest = [numbers[i],\
    \ numbers[i+1]]\n    end\n  end\n  closest\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4b5mb3r7\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 22935.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodh6b0_y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodh6b0_y.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.25 tests/s, 558.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zludhec\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zludhec.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.01529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.40 tests/s, 130.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n\
    \      if (numbers[index + 1] - num).abs < closest_distance\n        closest_pair\
    \ = [num, numbers[index + 1]]\n        closest_distance = (numbers[index + 1]\
    \ - num).abs\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpho614_oy\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 20576.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27d11yrp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27d11yrp.rb:14:in\
    \ `test_find_closest_elements'\n     11: class TestHumanEval < Test::Unit::TestCase\n\
    \     12:   def test_find_closest_elements\n     13:     candidate = method(:find_closest_elements)\n\
    \  => 14:     assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]))\n     15:     assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]))\n     16:     assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n<[3.9, 4.0]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.89 tests/s, 105.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_u13pkjf\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 22026.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmgng73db\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmgng73db.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.026933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.13 tests/s, 74.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqiwaquc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqiwaquc.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.19 tests/s, 560.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcnq2ye1a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcnq2ye1a.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.01 tests/s, 564.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0jvu6mbf\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsxw4pd7h\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 23041.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = number - numbers[index - 1]\n    if difference < closest_difference\n    \
    \  closest_elements = [numbers[index - 1], number]\n      closest_difference =\
    \ difference\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n   \
    \ candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
    \ 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64xdsnww\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 23148.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1o_1p9mp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1o_1p9mp.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.004005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.69 tests/s, 499.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if num - numbers[index - 1] < closest_diff\n\
    \      closest_pair = [numbers[index - 1], num]\n      closest_diff = num - numbers[index\
    \ - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl6i8ugdp\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 22123.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: Implement this function\n\
    \  # TODO: Implement this function\n  closest_pair = [numbers[0], numbers[1]]\n\
    \  closest_diff = (numbers[0] - numbers[1]).abs\n  numbers.each_with_index do\
    \ |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs\
    \ < closest_diff\n      closest_pair = [numbers[index - 1], num]\n      closest_diff\
    \ = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzxqimtjh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzxqimtjh.rb:26:in\
    \ `test_find_closest_elements'\n     23:   def test_find_closest_elements\n  \
    \   24:     candidate = method(:find_closest_elements)\n     25:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 26:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     27:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     28:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     29:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[1.0, 2.0]>\n\ndiff:\n? [5.0, 5.9]\n?  1    2 0 \n?  ?    ? ? \n===============================================================================\n\
    \nFinished in 0.004423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.09 tests/s, 452.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, i|\n    if i < numbers.length - 1\n      distance\
    \ = (numbers[i + 1] - num).abs\n      if distance < closest_distance\n       \
    \ closest_distance = distance\n        closest_pair = [num, numbers[i + 1]]\n\
    \      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7orbkd6h\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 22026.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    if\
    \ (number - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], number]\n      closest_diff = (number - numbers[index - 1]).abs\n    end\n\
    \  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0475ys58\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 21459.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppzqh9oeq\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4c7dx1b6\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 21459.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff\
    \ = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      diff = numbers[index\
    \ + 1] - num\n      if diff < closest_diff\n        closest_diff = diff\n    \
    \    closest_pair = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp41vnoz3t\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 22727.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpro52dtr1\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest\n        closest = numbers[index + 1] - number\n   \
    \     closest_pair = [number, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvkb4sji\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 23148.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphp_vytcg\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 23696.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (number - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_elements = [numbers[index - 1], number]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptmj2kuok\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 22421.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwnoj6wh_\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuzpjyeo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsuzpjyeo.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.12 tests/s, 572.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest\n        closest = numbers[index + 1] - number\n   \
    \     closest_pair = [number, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9mub34rl\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 23255.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeak4do79\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeak4do79.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.005493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.05 tests/s, 364.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyp2eusg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyp2eusg.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    257.80 tests/s, 515.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1d9km6v3\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n\
    \  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference\
    \ = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n\
    \    if index < numbers.length - 1\n      difference = (numbers[index + 1] - number).abs\n\
    \      if difference < closest_difference\n        closest_difference = difference\n\
    \        closest_elements = [number, numbers[index + 1]]\n      end\n    end\n\
    \  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptb1th09l\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 24038.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = closest_elements[1] - closest_elements[0]\n\
    \  for i in 0..numbers.length-2\n    for j in i+1..numbers.length-1\n      if\
    \ (numbers[j] - numbers[i]) < closest_difference\n        closest_elements = [numbers[i],\
    \ numbers[j]]\n        closest_difference = closest_elements[1] - closest_elements[0]\n\
    \      end\n    end\n  end\n  return closest_elements\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0lpjs43f\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 20576.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn94i5v0_\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 22935.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    if index < numbers.length -\
    \ 1\n      distance = (numbers[index + 1] - number).abs\n      if distance < closest_distance\n\
    \        closest_distance = distance\n        closest_pair = [number, numbers[index\
    \ + 1]]\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyktdzghu\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 21551.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_diff\n      closest_pair = [numbers[index\
    \ - 1], num]\n      closest_diff = (num - numbers[index - 1]).abs\n    end\n \
    \ end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8homb9gu\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 24752.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    if index < numbers.length - 1\n      if numbers[index\
    \ + 1] - number < closest\n        closest = numbers[index + 1] - number\n   \
    \     closest_pair = [number, numbers[index + 1]]\n      end\n    end\n  end\n\
    \  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgj11w2qd\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 22522.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).to_a.min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppn10qivc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppn10qivc.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.17 tests/s, 568.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ [numbers[0], numbers[1]]\n  closest_diff = numbers[1] - numbers[0]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if number - numbers[index -\
    \ 1] < closest_diff\n      closest = [numbers[index - 1], number]\n      closest_diff\
    \ = number - numbers[index - 1]\n    end\n  end\n  closest\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsoull2bb\n\
    Started\n.\nFinished in 0.000504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1984.13 tests/s, 9920.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, i|\n    next if i == 0\n    diff = (num -\
    \ numbers[i - 1]).abs\n    if diff < closest_diff\n      closest_pair = [numbers[i\
    \ - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqx73_h5\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 20661.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_cons(2) do |pair|\n    diff = (pair[1] - pair[0]).abs\n    if\
    \ diff < closest_diff\n      closest_pair = pair\n      closest_diff = diff\n\
    \    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph1v7ject\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 22935.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqig52bno\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqig52bno.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.41 tests/s, 550.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuidfsaq5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuidfsaq5.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.00349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.53 tests/s, 573.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpog9isrzr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpog9isrzr.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.78 tests/s, 545.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_distance\n      closest_distance = (num\
    \ - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], num]\n\
    \    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv8fqlfxo\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqh7t4xvd\n\
    Started\n.\nFinished in 0.000579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1727.12 tests/s, 8635.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    if index < numbers.length - 1\n      if numbers[index +\
    \ 1] - num < closest\n        closest = numbers[index + 1] - num\n        closest_pair\
    \ = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppwgg_dtm\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 23923.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i\
    \ in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest\n      closest\
    \ = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n\
    \    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6m4bspv5\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (number - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_elements = [numbers[index - 1], number]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1p_pgscz\n\
    Started\n.\nFinished in 0.000464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2155.17 tests/s, 10775.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qm6c9hf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qm6c9hf.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    251.83 tests/s, 503.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, i|\n    if i < numbers.length - 1\n      if numbers[i + 1] - num <\
    \ closest\n        closest = numbers[i + 1] - num\n        closest_pair = [num,\
    \ numbers[i + 1]]\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1v4hh1w\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 20080.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == 0\n    if (number - numbers[index -\
    \ 1]) < closest\n      closest = number - numbers[index - 1]\n      closest_pair\
    \ = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfvrlvur6\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 23474.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwg_jh8og\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwg_jh8og.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.02 tests/s, 534.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    if index < numbers.length -\
    \ 1\n      distance = (numbers[index + 1] - number).abs\n      if distance < closest_distance\n\
    \        closest_distance = distance\n        closest_pair = [number, numbers[index\
    \ + 1]]\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplf8xc7ew\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 21551.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5l42qlj6\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 22624.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num\
    \ - numbers[index - 1]).abs < closest_distance\n      closest_distance = (num\
    \ - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], num]\n\
    \    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp710zw1m\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 20746.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).to_a.min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8jb0kar5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8jb0kar5.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.005674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.24 tests/s, 352.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i\
    \ in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest\n      closest\
    \ = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n\
    \    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwa7f_5u1\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 22421.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).map\
    \ { |a, b| [a, b, (a - b).abs] }.sort_by { |a, b, c| c }.first[0..1]\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpburmn42p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpburmn42p.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.004238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.96 tests/s, 471.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvsjn_h6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvsjn_h6.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.04 tests/s, 572.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe_0c6ac\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoe_0c6ac.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.94 tests/s, 557.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  # TODO: Implement this method\n\
    \  numbers.sort!\n  closest = numbers[1] - numbers[0]\n  closest_pair = [numbers[0],\
    \ numbers[1]]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length\
    \ - 1\n      if numbers[index + 1] - number < closest\n        closest = numbers[index\
    \ + 1] - number\n        closest_pair = [number, numbers[index + 1]]\n      end\n\
    \    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaffv6ohd\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbccog4fk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbccog4fk.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003606 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.32 tests/s, 554.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_diff = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff =\
    \ (num - numbers[index - 1]).abs\n    if diff < closest_diff\n      closest_pair\
    \ = [numbers[index - 1], num]\n      closest_diff = diff\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwy751jx\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 23474.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |num, index|\n    next if index == 0\n    if numbers[index] - numbers[index\
    \ - 1] < closest\n      closest = numbers[index] - numbers[index - 1]\n      closest_pair\
    \ = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_pair\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpul74z844\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 24271.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index\
    \ do |number, index|\n    next if index == numbers.length - 1\n    if (numbers[index\
    \ + 1] - number) < closest\n      closest = numbers[index + 1] - number\n    \
    \  closest_pair = [number, numbers[index + 1]]\n    end\n  end\n  closest_pair\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmv9as0dh\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 22123.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_numbers\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (number - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_numbers = [numbers[index - 1], number]\n      closest_difference\
    \ = difference\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n\
    \    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0],\
    \ candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9],\
    \ candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsqrnvim\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 22123.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest =\
    \ [numbers[0], numbers[1]]\n  (0..numbers.length-2).each do |i|\n    if (numbers[i+1]\
    \ - numbers[i]) < (closest[1] - closest[0])\n      closest = [numbers[i], numbers[i+1]]\n\
    \    end\n  end\n  closest\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoynx34pv\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 23696.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbrivxzf9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbrivxzf9.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003399 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.20 tests/s, 588.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).to_a.min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4pjei80\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4pjei80.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.05 tests/s, 548.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair\
    \ = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n\
    \  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference\
    \ = (number - numbers[index - 1]).abs\n    if difference < closest_difference\n\
    \      closest_pair = [numbers[index - 1], number]\n      closest_difference =\
    \ difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n   \
    \ candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2,\
    \ 3.1, 4.1, 5.1]))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttb4hbok\n\
    Started\n.\nFinished in 0.000189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5291.01 tests/s, 26455.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl0a0eun\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl0a0eun.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.97 tests/s, 583.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp16gbg68x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp16gbg68x.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.00342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.40 tests/s, 584.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n# other and return them in order (smaller\
    \ number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n# (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    # (2.0, 2.0)\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by\
    \ { |x, y| (x - y).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n\
    \    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n\
    \    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n   \
    \ assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n \
    \   assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n\
    \    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodzw06mc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_find_closest_elements(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpodzw06mc.rb:15:in\
    \ `test_find_closest_elements'\n     12:   def test_find_closest_elements\n  \
    \   13:     candidate = method(:find_closest_elements)\n     14:     assert_equal([3.9,\
    \ 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 15:     assert_equal([5.0,\
    \ 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     16:     assert_equal([2.0,\
    \ 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     17:     assert_equal([2.0,\
    \ 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     18:     assert_equal([2.2,\
    \ 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but\
    \ was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 648.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
