name: HumanEval_103_rounded_avg
language: ruby
results:
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1f6jky7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1f6jky7.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.74 tests/s, 1403.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvan4jfi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvan4jfi.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.52 tests/s, 323.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    avg = (n + m)\
    \ / 2\n    return \"0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmhcf8ad\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmhcf8ad.rb:26:in\
    \ `test_rounded_avg'\n     23:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     24:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     25:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 26:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     27:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     28:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     29:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.010112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.89 tests/s, 494.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv0d2r5b1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv0d2r5b1.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n\
    ? ? ----\n===============================================================================\n\
    \nFinished in 0.005685 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.90 tests/s, 175.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8pok6sf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8pok6sf.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.018112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.21 tests/s, 276.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl7buaas6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl7buaas6.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.39 tests/s, 1386.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2pkauqo6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2pkauqo6.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.003502 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.55 tests/s, 856.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n..m).reduce(:+) /\
    \ (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81bgsy2s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp81bgsy2s.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.57 tests/s, 1412.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4yyoo5et\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4yyoo5et.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003709 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.61 tests/s, 1348.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ek38q67\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ek38q67.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.21 tests/s, 309.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3oazfoby\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3oazfoby.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003606 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.32 tests/s, 1386.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmq7rcqa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppmq7rcqa.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.003854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.47 tests/s, 778.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0rkr6uc6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0rkr6uc6.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.37 tests/s, 1416.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    for\
    \ i in n..m\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    return\
    \ \"0b\" + avg.to_s(2)\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp600jrbhk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp600jrbhk.rb:30:in\
    \ `test_rounded_avg'\n     27:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     28:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     29:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 30:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     31:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     32:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     33:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003844 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.15 tests/s, 1300.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbysece_t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbysece_t.rb:19:in\
    \ `test_rounded_avg'\n     16: class TestHumanEval < Test::Unit::TestCase\n  \
    \   17:   def test_rounded_avg\n     18:     candidate = method(:rounded_avg)\n\
    \  => 19:     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.003445 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.28 tests/s, 290.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_45su4q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_45su4q.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.78 tests/s, 1393.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  sum = (sum / (m - n + 1.0)).round\n  \"0b#{sum.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx42kjy2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx42kjy2.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.003627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.71 tests/s, 827.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).inject(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw986dw90\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw986dw90.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.004325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.21 tests/s, 231.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklbwkenv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklbwkenv.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.69 tests/s, 1418.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ezvq_h2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ezvq_h2.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.003615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.63 tests/s, 829.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpufimjvfe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpufimjvfe.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.005183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.94 tests/s, 964.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpex_vzdp2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpex_vzdp2.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.00445 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.72 tests/s, 224.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe86vs_ya\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe86vs_ya.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003574 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.80 tests/s, 1398.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppycbzi1w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppycbzi1w.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.034435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    29.04 tests/s, 145.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeuevl29_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeuevl29_.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.77 tests/s, 69.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7k15b5su\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7k15b5su.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.63 tests/s, 1363.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptju1vqnm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptju1vqnm.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.02 tests/s, 1440.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbjr1f1dd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbjr1f1dd.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.71 tests/s, 1393.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpst5525yn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpst5525yn.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003581 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.25 tests/s, 1396.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalma3oph\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpalma3oph.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.31 tests/s, 1426.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpceboh53g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpceboh53g.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.016204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.71 tests/s, 308.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4vouris8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4vouris8.rb:24:in\
    \ `test_rounded_avg'\n     21:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     22:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     23:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 24:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     25:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     26:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     27:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.96 tests/s, 1399.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqfgwk037\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqfgwk037.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.93 tests/s, 1354.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6per6vn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6per6vn.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.023491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.57 tests/s, 42.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    return \"\
    0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyn6bv10e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyn6bv10e.rb:30:in\
    \ `test_rounded_avg'\n     27:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     28:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     29:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 30:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     31:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     32:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     33:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.53 tests/s, 1407.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zlk7b8v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3zlk7b8v.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.012324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    81.14 tests/s, 405.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    \"0b#{avg.to_s(2)}\"\
    \n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6sus6ot\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6sus6ot.rb:30:in\
    \ `test_rounded_avg'\n     27:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     28:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     29:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 30:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     31:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     32:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     33:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.009001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.10 tests/s, 555.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxpaz65t2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxpaz65t2.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004598 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.49 tests/s, 1087.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8qo06r0h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8qo06r0h.rb:25:in\
    \ `test_rounded_avg'\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     27:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     28:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.78 tests/s, 1363.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvlxe23np\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvlxe23np.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.00354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.49 tests/s, 1412.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary_string = (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\n  \"0b#{binary_string}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2k1n1ci\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe2k1n1ci.rb:21:in\
    \ `test_rounded_avg'\n     18:     candidate = method(:rounded_avg)\n     19:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     23:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.015901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.89 tests/s, 188.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvi9z2b4g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvi9z2b4g.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003663 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.00 tests/s, 1365.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |num|\n      sum += num\n    end\n    avg = sum / (m - n + 1)\n    return\
    \ \"0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyx87yel3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyx87yel3.rb:30:in\
    \ `test_rounded_avg'\n     27:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     28:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     29:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 30:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     31:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     32:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     33:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.54 tests/s, 1167.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa56eon0o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa56eon0o.rb:24:in\
    \ `test_rounded_avg'\n     21:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     22:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     23:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 24:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     25:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     26:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     27:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004714 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.13 tests/s, 1060.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy2kvx14g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy2kvx14g.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.63 tests/s, 1138.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmck43euc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmck43euc.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003598 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.93 tests/s, 1389.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojgdm9e3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojgdm9e3.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.07 tests/s, 1160.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2icib3nz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2icib3nz.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n\
    ? ? ----\n===============================================================================\n\
    \nFinished in 0.003195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.99 tests/s, 312.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    avg.to_s(2)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazd6pxy6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpazd6pxy6.rb:26:in\
    \ `test_rounded_avg'\n     23: class TestHumanEval < Test::Unit::TestCase\n  \
    \   24:   def test_rounded_avg\n     25:     candidate = method(:rounded_avg)\n\
    \  => 26:     assert_equal(\"0b11\", candidate.call(1, 5))\n     27:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     28:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     29:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.004364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.15 tests/s, 229.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vz2q25g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vz2q25g.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n\
    ? ? ----\n===============================================================================\n\
    \nFinished in 0.009752 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    102.54 tests/s, 102.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpop_taeq5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpop_taeq5.rb:19:in\
    \ `test_rounded_avg'\n     16: class TestHumanEval < Test::Unit::TestCase\n  \
    \   17:   def test_rounded_avg\n     18:     candidate = method(:rounded_avg)\n\
    \  => 19:     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.007579 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.94 tests/s, 131.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  ((n + m) / 2.0).round.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvks24qi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvks24qi.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.003613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.78 tests/s, 276.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7fx1704\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7fx1704.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.008288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.66 tests/s, 603.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmper97kxrr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmper97kxrr.rb:19:in\
    \ `test_rounded_avg'\n     16: class TestHumanEval < Test::Unit::TestCase\n  \
    \   17:   def test_rounded_avg\n     18:     candidate = method(:rounded_avg)\n\
    \  => 19:     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.020921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.80 tests/s, 47.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |num|\n      sum += num\n    end\n    avg = sum / (m - n + 1)\n    return\
    \ \"0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gu6k8kq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gu6k8kq.rb:30:in\
    \ `test_rounded_avg'\n     27:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     28:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     29:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 30:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     31:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     32:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     33:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.008536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.15 tests/s, 585.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqn8h0_j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqn8h0_j.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.005597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.67 tests/s, 893.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3e4g5vsl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3e4g5vsl.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.00366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.22 tests/s, 1366.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = (sum / (m - n + 1)).to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_eqonm8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_eqonm8.rb:19:in\
    \ `test_rounded_avg'\n     16: class TestHumanEval < Test::Unit::TestCase\n  \
    \   17:   def test_rounded_avg\n     18:     candidate = method(:rounded_avg)\n\
    \  => 19:     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.00903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.74 tests/s, 110.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8ul0xaj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy8ul0xaj.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.004289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.15 tests/s, 699.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwjl62n3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwjl62n3.rb:25:in\
    \ `test_rounded_avg'\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     27:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     28:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.86 tests/s, 1394.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zo6mko5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zo6mko5.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003528 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.45 tests/s, 1417.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  sum = (sum / (m - n + 1.0)).round\n  sum.to_s(2)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpion7ewvj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpion7ewvj.rb:21:in\
    \ `test_rounded_avg'\n     18: class TestHumanEval < Test::Unit::TestCase\n  \
    \   19:   def test_rounded_avg\n     20:     candidate = method(:rounded_avg)\n\
    \  => 21:     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.004519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.29 tests/s, 221.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84r_qbs0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84r_qbs0.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.007921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.25 tests/s, 631.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    return \"\
    0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwgno5vk9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwgno5vk9.rb:30:in\
    \ `test_rounded_avg'\n     27:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     28:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     29:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 30:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     31:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     32:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     33:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003804 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.88 tests/s, 1314.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv23kb4md\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv23kb4md.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.38 tests/s, 168.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcgctzeh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcgctzeh.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.78 tests/s, 1383.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepgx2i48\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepgx2i48.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.71 tests/s, 1238.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    avg = (n + m)\
    \ / 2\n    return \"0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpedxku23b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpedxku23b.rb:26:in\
    \ `test_rounded_avg'\n     23:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     24:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     25:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 26:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     27:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     28:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     29:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.84 tests/s, 1214.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu855739g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu855739g.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.005879 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.10 tests/s, 850.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8gzvabhn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8gzvabhn.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.006782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.45 tests/s, 737.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1c_uv5cl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1c_uv5cl.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.019376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.61 tests/s, 51.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  end\n  sum = 0\n  for i\
    \ in n..m\n    sum += i\n  end\n  average = sum / (m - n + 1)\n  return \"0b\"\
    \ + average.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3p65ei_1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3p65ei_1.rb:29:in\
    \ `test_rounded_avg'\n     26:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     27:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     28:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 29:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     30:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     31:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     32:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.00433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.95 tests/s, 1154.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtsgaf62\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtsgaf62.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.009836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    101.67 tests/s, 508.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73z940s_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73z940s_.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003564 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.58 tests/s, 1402.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1i252ll\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1i252ll.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.004211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.47 tests/s, 237.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each do |i|\n\
    \    sum += i\n  end\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtnoxlhc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdtnoxlhc.rb:27:in\
    \ `test_rounded_avg'\n     24:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     25:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     26:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 27:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     28:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     29:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     30:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.00363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.48 tests/s, 1377.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc31ejnjp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc31ejnjp.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003605 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.39 tests/s, 1386.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxgxw19el\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxgxw19el.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.012077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    82.80 tests/s, 414.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzq6_wkyj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzq6_wkyj.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n\
    ? ? ----\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 320.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplifrntce\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplifrntce.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 312.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpanq0p70s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpanq0p70s.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.019144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.24 tests/s, 261.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gpbsry1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9gpbsry1.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.052302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    19.12 tests/s, 95.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabyytdky\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabyytdky.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003601 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.70 tests/s, 1388.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8kc0is32\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8kc0is32.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.003655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.60 tests/s, 820.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxuhwxzn2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxuhwxzn2.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.55 tests/s, 308.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    return \"\
    0b#{avg.to_s(2)}\"\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_oae1q5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_oae1q5.rb:30:in\
    \ `test_rounded_avg'\n     27:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     28:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     29:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 30:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     31:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     32:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     33:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.37 tests/s, 1416.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplroa6m5l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplroa6m5l.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.88 tests/s, 1399.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmv_ilopw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmv_ilopw.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.82 tests/s, 1404.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3xzuget\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3xzuget.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.53 tests/s, 1342.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3cs0oek\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy3cs0oek.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.18 tests/s, 1060.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeztp9rb2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeztp9rb2.rb:19:in\
    \ `test_rounded_avg'\n     16: class TestHumanEval < Test::Unit::TestCase\n  \
    \   17:   def test_rounded_avg\n     18:     candidate = method(:rounded_avg)\n\
    \  => 19:     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.003449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.94 tests/s, 289.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe99bi55m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe99bi55m.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003814 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.19 tests/s, 1310.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_n6csyj_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_n6csyj_.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.09 tests/s, 1390.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa51g8hqa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa51g8hqa.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.76 tests/s, 1303.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).inject(:+)\n  average\
    \ = sum / (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgf31ngo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgf31ngo.rb:24:in\
    \ `test_rounded_avg'\n     21:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     22:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     23:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 24:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     25:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     26:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     27:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.93 tests/s, 1364.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl7vldy1p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl7vldy1p.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.004755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.30 tests/s, 630.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuy6xv1b8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuy6xv1b8.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003469 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.27 tests/s, 1441.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n..m).reduce(:+) /\
    \ (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuq_95ybm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuq_95ybm.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.37 tests/s, 1366.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7pfncep8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7pfncep8.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.031027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.23 tests/s, 161.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi94h6f_q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi94h6f_q.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.58 tests/s, 322.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgshlm4ng\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgshlm4ng.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.003582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.17 tests/s, 837.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpymr1hkry\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpymr1hkry.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.68 tests/s, 322.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpna6h82t8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpna6h82t8.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.60 tests/s, 1103.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt889jw1_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt889jw1_.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.004454 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.52 tests/s, 224.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkjw4pmtw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkjw4pmtw.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.58 tests/s, 1422.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb2l3389p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb2l3389p.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.03 tests/s, 1375.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnd6nwjo1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnd6nwjo1.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.006504 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.75 tests/s, 153.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3q63h8bz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3q63h8bz.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.00462 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.45 tests/s, 1082.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvgvgq4i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvgvgq4i.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003575 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.72 tests/s, 1398.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmbdes53\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmbdes53.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003816 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.05 tests/s, 1310.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n..m).reduce(:+) /\
    \ (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslvqv275\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslvqv275.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.006389 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.52 tests/s, 782.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6rlrupyy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6rlrupyy.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004889 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.54 tests/s, 1022.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxaojvw58\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxaojvw58.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.023254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    43.00 tests/s, 215.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkf32819\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxkf32819.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.064212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    15.57 tests/s, 77.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp20ijdvlh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp20ijdvlh.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.08 tests/s, 328.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp139ipi0t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp139ipi0t.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.036638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.29 tests/s, 136.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprw_o7yoo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprw_o7yoo.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.17 tests/s, 1410.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc14yz14r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc14yz14r.rb:24:in\
    \ `test_rounded_avg'\n     21:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     22:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     23:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 24:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     25:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     26:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     27:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.29 tests/s, 1431.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rk3pb68\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rk3pb68.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.023692 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.21 tests/s, 42.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnev6e1u0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnev6e1u0.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.04 tests/s, 1235.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxeuds4uc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxeuds4uc.rb:24:in\
    \ `test_rounded_avg'\n     21:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     22:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     23:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 24:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     25:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     26:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     27:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.011376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.90 tests/s, 439.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6b_nshv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6b_nshv.rb:19:in\
    \ `test_rounded_avg'\n     16: class TestHumanEval < Test::Unit::TestCase\n  \
    \   17:   def test_rounded_avg\n     18:     candidate = method(:rounded_avg)\n\
    \  => 19:     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.007425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.68 tests/s, 134.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8gx3gvwx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8gx3gvwx.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.012889 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.59 tests/s, 387.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmper100e32\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmper100e32.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.007558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.31 tests/s, 661.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdazegzs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdazegzs.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.69 tests/s, 1248.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_tej065z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_tej065z.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003616 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.55 tests/s, 1382.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4n1rpzv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc4n1rpzv.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.005286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.18 tests/s, 945.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19n57m2z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19n57m2z.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.14 tests/s, 1425.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2n7e8_6a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2n7e8_6a.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.96 tests/s, 1074.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgypb2za7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgypb2za7.rb:19:in\
    \ `test_rounded_avg'\n     16: class TestHumanEval < Test::Unit::TestCase\n  \
    \   17:   def test_rounded_avg\n     18:     candidate = method(:rounded_avg)\n\
    \  => 19:     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.011209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    89.21 tests/s, 89.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6nq2l8o8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6nq2l8o8.rb:21:in\
    \ `test_rounded_avg'\n     18:     candidate = method(:rounded_avg)\n     19:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     23:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.003589 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.63 tests/s, 835.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n..m).reduce(:+) /\
    \ (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8yo8eggh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8yo8eggh.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.00354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.49 tests/s, 1412.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprsfpuksc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprsfpuksc.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.003487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.78 tests/s, 286.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvcgt1qyw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvcgt1qyw.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.037215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.87 tests/s, 26.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt0gkt9nu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt0gkt9nu.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.0087 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.94 tests/s, 574.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpehljwibc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpehljwibc.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.017307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.78 tests/s, 57.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxw2n9vt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxw2n9vt.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.21 tests/s, 309.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc6lwz35\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc6lwz35.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.003485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.94 tests/s, 860.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).sum / (m - n + 1.0).round.to_s(2)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekq97_eq\n\
    Started\nE\n===============================================================================\n\
    Error: test_rounded_avg(TestHumanEval): TypeError: String can't be coerced into\
    \ Integer\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekq97_eq.rb:12:in\
    \ `/'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekq97_eq.rb:12:in `rounded_avg'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekq97_eq.rb:18:in `call'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpekq97_eq.rb:18:in `test_rounded_avg'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rounded_avg\n\
    \     17:     candidate = method(:rounded_avg)\n  => 18:     assert_equal(\"0b11\"\
    , candidate.call(1, 5))\n     19:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     20:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     21:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n===============================================================================\n\
    \nFinished in 0.001374 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    727.80 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp100vzps6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp100vzps6.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.00362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.24 tests/s, 276.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ury9k1i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ury9k1i.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.41 tests/s, 1422.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3af7chkt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3af7chkt.rb:21:in\
    \ `test_rounded_avg'\n     18:     candidate = method(:rounded_avg)\n     19:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     20:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 21:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     22:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     23:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     24:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.029853 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.50 tests/s, 100.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n..m).sum / (m - n\
    \ + 1)\n  \"0b#{binary.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6h92ag8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6h92ag8.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.85 tests/s, 1389.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk99wtzor\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk99wtzor.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.91 tests/s, 330.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4czt61w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4czt61w.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.004283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.48 tests/s, 233.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplpykdhia\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplpykdhia.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n\
    ? ? ----\n===============================================================================\n\
    \nFinished in 0.004959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.65 tests/s, 201.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8swetdav\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8swetdav.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.93 tests/s, 1409.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpts7_8nqu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpts7_8nqu.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003491 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.45 tests/s, 1432.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_aabmafx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_aabmafx.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.41 tests/s, 1377.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7qw_e_a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7qw_e_a.rb:24:in\
    \ `test_rounded_avg'\n     21:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     22:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     23:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 24:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     25:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     26:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     27:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.78 tests/s, 1083.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2_79doa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph2_79doa.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n\
    ? ? ----\n===============================================================================\n\
    \nFinished in 0.008991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.22 tests/s, 111.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbw3_ksy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcbw3_ksy.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003568 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.27 tests/s, 1401.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmntjmbtg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmntjmbtg.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.01585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.09 tests/s, 315.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7cx7yqd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm7cx7yqd.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.53 tests/s, 1407.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8hv8yns\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8hv8yns.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.85 tests/s, 1419.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiwtkj21w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiwtkj21w.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.25 tests/s, 1421.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_0abmgtq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_0abmgtq.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.09 tests/s, 1380.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5xd8o86\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5xd8o86.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.50 tests/s, 1422.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy9h6ovk6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy9h6ovk6.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.52 tests/s, 1272.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvuifgcm4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvuifgcm4.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003726 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.38 tests/s, 1341.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27rz3sbh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27rz3sbh.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.16 tests/s, 1385.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_iwj5qd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7_iwj5qd.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003541 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.41 tests/s, 1412.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  avg = (sum / (m - n + 1)).round\n  \"0b#{avg.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx6b0t17z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx6b0t17z.rb:25:in\
    \ `test_rounded_avg'\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     27:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     28:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003629 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.56 tests/s, 1377.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnv304h5g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnv304h5g.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003612 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.85 tests/s, 1384.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n + m) / 2.0\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy83vsa_i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy83vsa_i.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<3.0>\n\ndiff:\n? \" 0b11\"\n? 3.     \n\
    ? ? ----\n===============================================================================\n\
    \nFinished in 0.003371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.65 tests/s, 296.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptssd44o6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptssd44o6.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.029979 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.36 tests/s, 166.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ys5re62\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ys5re62.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.031359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    31.89 tests/s, 159.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5b_e5p1_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5b_e5p1_.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.004488 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.82 tests/s, 222.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxvotiv8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvxvotiv8.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.003511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.82 tests/s, 284.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjhtx_l0h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjhtx_l0h.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.041535 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.08 tests/s, 120.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeycm0ioh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeycm0ioh.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.013043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.67 tests/s, 230.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |num|\
    \ sum += num }\n  avg = (sum / (m - n + 1)).round\n  \"0b#{avg.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqh1watf2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqh1watf2.rb:25:in\
    \ `test_rounded_avg'\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     27:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     28:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.69 tests/s, 1253.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqcooo2mm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqcooo2mm.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.12 tests/s, 1230.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3rcqu23\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp3rcqu23.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    280.74 tests/s, 1403.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jldu1a6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jldu1a6.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.53 tests/s, 1407.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxiyxk0l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxiyxk0l.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 315.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa8bjbnby\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa8bjbnby.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.019675 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    50.83 tests/s, 254.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycbvwtx0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpycbvwtx0.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.007769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.72 tests/s, 643.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |num|\
    \ sum += num }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa69sqio9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa69sqio9.rb:25:in\
    \ `test_rounded_avg'\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     27:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     28:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.008083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 618.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  average\
    \ = sum / (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4gwx4xr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4gwx4xr.rb:24:in\
    \ `test_rounded_avg'\n     21:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     22:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     23:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 24:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     25:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     26:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     27:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.55 tests/s, 1132.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7f3y4k4h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7f3y4k4h.rb:24:in\
    \ `test_rounded_avg'\n     21:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     22:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     23:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 24:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     25:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     26:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     27:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.93 tests/s, 1109.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpby3tuxj2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpby3tuxj2.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.014805 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.54 tests/s, 337.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29aj_m75\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29aj_m75.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.31 tests/s, 1426.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi51r00w2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi51r00w2.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004825 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.25 tests/s, 1036.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpps460l29\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpps460l29.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003796 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.44 tests/s, 1317.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplx8qm1xg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplx8qm1xg.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.30 tests/s, 1366.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxz28l02\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxz28l02.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.006273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.41 tests/s, 478.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27pqvci5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27pqvci5.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.34 tests/s, 1296.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvgnsitu2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvgnsitu2.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.01808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.31 tests/s, 55.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each do |num|\n\
    \    sum += num\n  end\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplg6n_20y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplg6n_20y.rb:27:in\
    \ `test_rounded_avg'\n     24:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     25:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     26:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 27:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     28:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     29:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     30:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.004544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.07 tests/s, 1100.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0g394ta\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi0g394ta.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.00355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.69 tests/s, 1408.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |num|\
    \ sum += num }\n  sum = (sum / (m - n + 1.0)).round\n  sum.to_s(2)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6macn0l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj6macn0l.rb:21:in\
    \ `test_rounded_avg'\n     18: class TestHumanEval < Test::Unit::TestCase\n  \
    \   19:   def test_rounded_avg\n     20:     candidate = method(:rounded_avg)\n\
    \  => 21:     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.005428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.23 tests/s, 184.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |i|\
    \ sum += i }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbffsdv8h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbffsdv8h.rb:25:in\
    \ `test_rounded_avg'\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     27:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     28:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.31 tests/s, 1601.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n\
    \ + 1).round.to_s(2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoccmutyd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoccmutyd.rb:18:in\
    \ `test_rounded_avg'\n     15: class TestHumanEval < Test::Unit::TestCase\n  \
    \   16:   def test_rounded_avg\n     17:     candidate = method(:rounded_avg)\n\
    \  => 18:     assert_equal(\"0b11\", candidate.call(1, 5))\n     19:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     20:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     21:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\">(UTF-8) expected but was\n<\"11\">(US-ASCII)\n\ndiff:\n? 0b11\n\
    \  \n? Encoding: UTF-8    \n?            S  ASCII\n?            ??  ?\n===============================================================================\n\
    \nFinished in 0.004143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.37 tests/s, 241.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  sum = 0\n  (n..m).each { |num|\
    \ sum += num }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
    \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
    \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
    0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\",\
    \ candidate.call(996, 997))\n    assert_equal(\"0b1011000010\", candidate.call(560,\
    \ 851))\n    assert_equal(\"0b101101110\", candidate.call(185, 546))\n    assert_equal(\"\
    0b110101101\", candidate.call(362, 496))\n    assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n    assert_equal(\"0b11010111\", candidate.call(197, 233))\n    assert_equal(-1,\
    \ candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"\
    0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57aqusz2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp57aqusz2.rb:25:in\
    \ `test_rounded_avg'\n     22:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     23:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     24:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 25:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     26:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     27:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     28:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.84 tests/s, 1274.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  (n > m) ? -1 : \"0b#{(n..m).sum.fdiv(m - n + 1).round.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63tulzpn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp63tulzpn.rb:19:in\
    \ `test_rounded_avg'\n     16:     candidate = method(:rounded_avg)\n     17:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     21:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     22:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.003629 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.56 tests/s, 826.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary\
    \ = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate\
    \ = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1, 5))\n \
    \   assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"0b1111001010\"\
    , candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
    \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
    0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
    \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\"\
    , candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3knbuggh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3knbuggh.rb:23:in\
    \ `test_rounded_avg'\n     20:     candidate = method(:rounded_avg)\n     21:\
    \     assert_equal(\"0b11\", candidate.call(1, 5))\n     22:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n  => 23:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     24:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n     25:     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n\
    \     26:     assert_equal(\"0b101101110\", candidate.call(185, 546))\n<\"0b1111001010\"\
    > expected but was\n<\"0b1111001011\">\n\ndiff:\n? 0b1111001010\n?           \
    \ 1\n?            ?\n===============================================================================\n\
    \nFinished in 0.00352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.09 tests/s, 852.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm5mzmcdj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm5mzmcdj.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.003426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.89 tests/s, 1459.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rounded_avg\n    candidate = method(:rounded_avg)\n\
    \    assert_equal(\"0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\"\
    , candidate.call(7, 13))\n    assert_equal(\"0b1111001010\", candidate.call(964,\
    \ 977))\n    assert_equal(\"0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"\
    0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e9uoc87\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1e9uoc87.rb:17:in\
    \ `test_rounded_avg'\n     14: class TestHumanEval < Test::Unit::TestCase\n  \
    \   15:   def test_rounded_avg\n     16:     candidate = method(:rounded_avg)\n\
    \  => 17:     assert_equal(\"0b11\", candidate.call(1, 5))\n     18:     assert_equal(\"\
    0b1010\", candidate.call(7, 13))\n     19:     assert_equal(\"0b1111001010\",\
    \ candidate.call(964, 977))\n     20:     assert_equal(\"0b1111100100\", candidate.call(996,\
    \ 997))\n<\"0b11\"> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.33 tests/s, 311.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given two positive integers n and m, and your task is to compute\
    \ the\n# average of the integers from n through m (including n and m). \n# Round\
    \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
    \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
    \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
    \ndef rounded_avg(n, m)\n  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_rounded_avg\n    candidate = method(:rounded_avg)\n    assert_equal(\"\
    0b11\", candidate.call(1, 5))\n    assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n    assert_equal(\"0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"\
    0b1111100100\", candidate.call(996, 997))\n    assert_equal(\"0b1011000010\",\
    \ candidate.call(560, 851))\n    assert_equal(\"0b101101110\", candidate.call(185,\
    \ 546))\n    assert_equal(\"0b110101101\", candidate.call(362, 496))\n    assert_equal(\"\
    0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"0b11010111\", candidate.call(197,\
    \ 233))\n    assert_equal(-1, candidate.call(7, 5))\n    assert_equal(-1, candidate.call(5,\
    \ 1))\n    assert_equal(\"0b101\", candidate.call(5, 5))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpayaobfew\n\
    Started\nF\n===============================================================================\n\
    Failure: test_rounded_avg(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpayaobfew.rb:23:in\
    \ `test_rounded_avg'\n     20:     assert_equal(\"0b1010\", candidate.call(7,\
    \ 13))\n     21:     assert_equal(\"0b1111001010\", candidate.call(964, 977))\n\
    \     22:     assert_equal(\"0b1111100100\", candidate.call(996, 997))\n  => 23:\
    \     assert_equal(\"0b1011000010\", candidate.call(560, 851))\n     24:     assert_equal(\"\
    0b101101110\", candidate.call(185, 546))\n     25:     assert_equal(\"0b110101101\"\
    , candidate.call(362, 496))\n     26:     assert_equal(\"0b1001110010\", candidate.call(350,\
    \ 902))\n<\"0b1011000010\"> expected but was\n<\"0b1011000001\">\n\ndiff:\n? 0b10110000010\n\
    ===============================================================================\n\
    \nFinished in 0.00342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.40 tests/s, 1461.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
