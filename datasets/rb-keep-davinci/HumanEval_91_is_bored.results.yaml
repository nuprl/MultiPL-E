name: HumanEval_91_is_bored
language: ruby
results:
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmxmdaduf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmxmdaduf.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.05 tests/s, 402.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqzztr07\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxqzztr07.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.00 tests/s, 645.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsso_rhik\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsso_rhik.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.016082 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.18 tests/s, 124.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy0o33bp3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy0o33bp3.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.002956 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    338.29 tests/s, 676.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn_je6xdz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn_je6xdz.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.010372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.41 tests/s, 192.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiexz4stx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiexz4stx.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.028556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.02 tests/s, 70.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprjpdc3z8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprjpdc3z8.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003848 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.88 tests/s, 519.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp4lizj1b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp4lizj1b.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.04 tests/s, 622.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptzk7zgku\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptzk7zgku.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.026574 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.63 tests/s, 75.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.scan(/I/).length\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8a3zdbg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8a3zdbg.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003179 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.56 tests/s, 629.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps3qdrtae\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps3qdrtae.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 624.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp190khvw7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp190khvw7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.009483 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.45 tests/s, 210.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4nu4xe62\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4nu4xe62.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.16 tests/s, 610.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0vwbd1u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0vwbd1u.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.02 tests/s, 618.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwdzsxrwu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwdzsxrwu.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003175 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.96 tests/s, 629.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ib3brwn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ib3brwn.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.11 tests/s, 666.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmregu3av\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmregu3av.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.033255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    30.07 tests/s, 60.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5h35tzoy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5h35tzoy.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.076417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    13.09 tests/s, 26.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpli63s73l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpli63s73l.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.040371 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.77 tests/s, 49.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_9upwko\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_9upwko.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.04 tests/s, 622.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0h4un3g7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0h4un3g7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.60 tests/s, 597.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplp91npta\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplp91npta.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.10 tests/s, 436.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjqfh5hh8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjqfh5hh8.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.93 tests/s, 577.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  boredoms = 0\n  sentences = s.split(/[.?!]/)\n  sentences.each\
    \ do |sentence|\n    if sentence.split(\" \")[0] == \"I\"\n      boredoms += 1\n\
    \    end\n  end\n  boredoms\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp4o4out0\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 26315.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp562c50q_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp562c50q_.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.08 tests/s, 638.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz7smepmf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz7smepmf.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.59 tests/s, 639.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32q0dyd3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp32q0dyd3.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 631.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphicnalxc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphicnalxc.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.024232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    41.27 tests/s, 82.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb06xmdys\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb06xmdys.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003156 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.86 tests/s, 633.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpakwg0_k8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpakwg0_k8.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.35 tests/s, 662.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0l0tvfp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc0l0tvfp.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003181 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.37 tests/s, 628.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnm_p46tx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnm_p46tx.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.97 tests/s, 635.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6sky6lva\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6sky6lva.rb:16:in\
    \ `test_is_bored'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_is_bored\n     15:     candidate = method(:is_bored)\n  => 16:  \
    \   assert_equal(0, candidate.call(\"Hello world\"))\n     17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n<0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014915 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.05 tests/s, 67.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ssgmhi9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9ssgmhi9.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.56 tests/s, 635.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmparqo4_3o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmparqo4_3o.rb:16:in\
    \ `test_is_bored'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_is_bored\n     15:     candidate = method(:is_bored)\n  => 16:  \
    \   assert_equal(0, candidate.call(\"Hello world\"))\n     17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n<0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.085584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    11.68 tests/s, 11.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vhc4tx_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vhc4tx_.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.47 tests/s, 418.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoabhsvbu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoabhsvbu.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.43 tests/s, 338.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcfv874ux\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcfv874ux.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003177 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.76 tests/s, 629.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhssjp0c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhssjp0c.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.18 tests/s, 344.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v9uaaxi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v9uaaxi.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003957 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.72 tests/s, 505.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptg06kkkk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptg06kkkk.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.26 tests/s, 632.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdvsx733\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdvsx733.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003383 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    295.60 tests/s, 591.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.size\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3em47fl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc3em47fl.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.16 tests/s, 644.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt5hx5a3b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt5hx5a3b.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.31 tests/s, 320.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a0scagt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a0scagt.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.58 tests/s, 661.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpux96yfc2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpux96yfc2.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.93 tests/s, 603.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoupumoom\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoupumoom.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.012615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.27 tests/s, 158.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4y3bxdx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4y3bxdx.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.026659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    37.51 tests/s, 75.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprjvcd2_6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprjvcd2_6.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003958 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.65 tests/s, 505.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnwoa52n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnwoa52n.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005977 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.31 tests/s, 334.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptjs4u48v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptjs4u48v.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.017259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.94 tests/s, 115.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi5jts982\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi5jts982.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.94 tests/s, 605.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwa6kx01\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvwa6kx01.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.017479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.21 tests/s, 114.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdkz0a8yw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdkz0a8yw.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.89 tests/s, 625.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxgh4hda_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxgh4hda_.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.57 tests/s, 603.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.scan(/I\\s/).count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzae88eql\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzae88eql.rb:21:in\
    \ `test_is_bored'\n     18:     assert_equal(1, candidate.call(\"I love It !\"\
    ))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:     assert_equal(2,\
    \ candidate.call(\"I feel good today. I will be productive. will kill It\"))\n\
    \  => 21:     assert_equal(0, candidate.call(\"You and I are going for a walk\"\
    ))\n     22:   end\n     23: end\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.97 tests/s, 1319.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprj84r5si\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprj84r5si.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.85 tests/s, 563.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfu0y000_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfu0y000_.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.89 tests/s, 359.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl8y76dy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl8y76dy.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.0032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.50 tests/s, 625.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_9mjlrg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_9mjlrg.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.013391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.68 tests/s, 149.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin9d0gyc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin9d0gyc.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.51 tests/s, 587.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpenoafeut\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpenoafeut.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.78 tests/s, 637.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4y9b9qq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4y9b9qq.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.036607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.32 tests/s, 54.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.!?]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptemrfxod\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptemrfxod.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.029972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.36 tests/s, 66.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgj179v9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgj179v9.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.28 tests/s, 626.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgj1or82y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgj1or82y.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.010636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    94.02 tests/s, 188.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv695if8p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv695if8p.rb:16:in\
    \ `test_is_bored'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_is_bored\n     15:     candidate = method(:is_bored)\n  => 16:  \
    \   assert_equal(0, candidate.call(\"Hello world\"))\n     17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n<0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.56 tests/s, 317.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  boredoms = 0\n  sentences = s.split(/[.!?]/)\n  sentences.each\
    \ do |sentence|\n    if sentence.split[0] == \"I\"\n      boredoms += 1\n    end\n\
    \  end\n  boredoms\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6q0jnnn0\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 26785.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9imbyjmf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9imbyjmf.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.52 tests/s, 657.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszh1tsph\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszh1tsph.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.31 tests/s, 646.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0jvc76m1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0jvc76m1.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.00 tests/s, 640.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkube4ptx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkube4ptx.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.011478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.12 tests/s, 174.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5xnfrb2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl5xnfrb2.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.32 tests/s, 608.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp974hvi7d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp974hvi7d.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.23 tests/s, 642.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrnwzpc3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdrnwzpc3.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.39 tests/s, 382.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7a4w971m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7a4w971m.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 631.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposvng7i7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposvng7i7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.002924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    342.00 tests/s, 683.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyf_cf600\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyf_cf600.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004982 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.72 tests/s, 401.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxclxyq89\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxclxyq89.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.90 tests/s, 639.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvsv04w02\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvsv04w02.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.018152 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.09 tests/s, 110.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgpaewn0g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgpaewn0g.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003585 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.94 tests/s, 557.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfuheejtu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfuheejtu.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.021044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    47.52 tests/s, 95.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  count = 0\n  s.split(/[.?!]/).each do |sentence|\n\
    \    count += 1 if sentence.strip.start_with?(\"I\")\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_bored\n\
    \    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"Hello\
    \ world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n    assert_equal(1,\
    \ candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"bIt\"\
    ))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvga1yed6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvga1yed6.rb:21:in\
    \ `test_is_bored'\n     18:   def test_is_bored\n     19:     candidate = method(:is_bored)\n\
    \     20:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 21:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     22:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     23:     assert_equal(0, candidate.call(\"bIt\"))\n     24:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.02 tests/s, 602.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.!?]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7mbyvic\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk7mbyvic.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.21 tests/s, 466.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2v34sbxv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2v34sbxv.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003152 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.26 tests/s, 634.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfhmmm8hg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfhmmm8hg.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003369 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.82 tests/s, 593.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgagey6k8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgagey6k8.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.79 tests/s, 493.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp45ziin9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp45ziin9.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.08 tests/s, 620.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.split.first\
    \ == \"I\" }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp99hybk5g\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 24691.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjjeucoic\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjjeucoic.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.022035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.38 tests/s, 90.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp59phurna\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp59phurna.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.62 tests/s, 595.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph14tez4l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph14tez4l.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.53 tests/s, 397.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0i8fohd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0i8fohd.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.63 tests/s, 553.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqlrzt04y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqlrzt04y.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.018095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.26 tests/s, 110.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_1nl0yuy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_1nl0yuy.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.56 tests/s, 621.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.split.first\
    \ == \"I\" }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmgrlarhu\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 25974.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4ll1d6h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_4ll1d6h.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.93 tests/s, 305.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkfkhmt3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkfkhmt3.rb:16:in\
    \ `test_is_bored'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_is_bored\n     15:     candidate = method(:is_bored)\n  => 16:  \
    \   assert_equal(0, candidate.call(\"Hello world\"))\n     17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n<0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.11 tests/s, 301.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt7w5k5zr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt7w5k5zr.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.77 tests/s, 435.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwght7h73\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwght7h73.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.24 tests/s, 296.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2zyfu7l0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2zyfu7l0.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.56 tests/s, 593.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6pcjn1cf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6pcjn1cf.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.97 tests/s, 635.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslddp3z9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpslddp3z9.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.48 tests/s, 644.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpii_nhd1e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpii_nhd1e.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.79 tests/s, 625.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjhjnlodw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjhjnlodw.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.93 tests/s, 601.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptksx1tpg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptksx1tpg.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003359 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.71 tests/s, 595.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf7ij30c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppf7ij30c.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.022446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.55 tests/s, 89.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_upg4vjz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_upg4vjz.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005773 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.22 tests/s, 346.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35a1tz2j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp35a1tz2j.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.78 tests/s, 573.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpesk4zazv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpesk4zazv.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.49 tests/s, 346.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ip3ry9m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ip3ry9m.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.31 tests/s, 640.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp22wk5ab4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp22wk5ab4.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.37 tests/s, 566.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcekoue9w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcekoue9w.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.66 tests/s, 421.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4j69elk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4j69elk.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.41 tests/s, 618.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5uuwbf7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw5uuwbf7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.88 tests/s, 615.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptkppbbq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptkppbbq.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.007725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.45 tests/s, 258.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_cny4in\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_cny4in.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.03271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    30.57 tests/s, 61.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fz68vb7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fz68vb7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.79 tests/s, 363.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8j5p3cy5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8j5p3cy5.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.019909 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    50.23 tests/s, 100.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprchnrnjr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprchnrnjr.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.013678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.11 tests/s, 146.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7a95hyt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy7a95hyt.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.76 tests/s, 633.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1h36z454\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1h36z454.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.018017 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.50 tests/s, 111.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9qsq4z25\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9qsq4z25.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.085519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    11.69 tests/s, 23.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn_49s1ur\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn_49s1ur.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.018334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.54 tests/s, 109.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphpa20y3u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphpa20y3u.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.009974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.26 tests/s, 200.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgm4yx28g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgm4yx28g.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.45 tests/s, 616.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn02zks_r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn02zks_r.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003181 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.37 tests/s, 628.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xvf29mp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xvf29mp.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 643.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb6suwcn9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb6suwcn9.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.68 tests/s, 443.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34aikuiz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp34aikuiz.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.60 tests/s, 619.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfzznokjb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfzznokjb.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.13 tests/s, 598.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkorw1k9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbkorw1k9.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.021555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.39 tests/s, 92.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3fx63at\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw3fx63at.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.017123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.40 tests/s, 116.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3700i6md\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3700i6md.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.30 tests/s, 624.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx13bd6so\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx13bd6so.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.007817 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    127.93 tests/s, 255.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzk1p8kf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzk1p8kf.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.65 tests/s, 613.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8kiq5tf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8kiq5tf.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.59 tests/s, 535.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqc7nr5_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqc7nr5_.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.42 tests/s, 382.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5nhwli01\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5nhwli01.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.46 tests/s, 630.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpimrlj1gf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpimrlj1gf.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    251.38 tests/s, 502.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel4n05l2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpel4n05l2.rb:16:in\
    \ `test_is_bored'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_is_bored\n     15:     candidate = method(:is_bored)\n  => 16:  \
    \   assert_equal(0, candidate.call(\"Hello world\"))\n     17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n<0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.08 tests/s, 319.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbke_08os\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbke_08os.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.95 tests/s, 533.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # Your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdvjciu6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdvjciu6.rb:16:in\
    \ `test_is_bored'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_is_bored\n     15:     candidate = method(:is_bored)\n  => 16:  \
    \   assert_equal(0, candidate.call(\"Hello world\"))\n     17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n<0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.75 tests/s, 321.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7tziizr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe7tziizr.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003845 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.08 tests/s, 520.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqn1xgy4t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqn1xgy4t.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.11365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    8.80 tests/s, 17.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf887r6r0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf887r6r0.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.11 tests/s, 602.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hj93y8e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2hj93y8e.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.55 tests/s, 617.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6n44ahd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6n44ahd.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.062363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    16.04 tests/s, 32.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5am0d5_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5am0d5_.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003594 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.24 tests/s, 556.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_ws7p4q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_ws7p4q.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.007684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.14 tests/s, 260.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmple7xzudg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmple7xzudg.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.96 tests/s, 633.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ku66zdl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ku66zdl.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.92 tests/s, 659.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/\\.|\\?|\\!/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_4aq25y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_4aq25y.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.55 tests/s, 655.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.split.first\
    \ == \"I\" }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwqw9zjy\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 27149.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6eqb8_gc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6eqb8_gc.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.56 tests/s, 613.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_bored\n    candidate = method(:is_bored)\n\
    \    assert_equal(0, candidate.call(\"Hello world\"))\n    assert_equal(0, candidate.call(\"\
    Is the sky blue?\"))\n    assert_equal(1, candidate.call(\"I love It !\"))\n \
    \   assert_equal(0, candidate.call(\"bIt\"))\n    assert_equal(2, candidate.call(\"\
    I feel good today. I will be productive. will kill It\"))\n    assert_equal(0,\
    \ candidate.call(\"You and I are going for a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75yaedgk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75yaedgk.rb:16:in\
    \ `test_is_bored'\n     13: class TestHumanEval < Test::Unit::TestCase\n     14:\
    \   def test_is_bored\n     15:     candidate = method(:is_bored)\n  => 16:  \
    \   assert_equal(0, candidate.call(\"Hello world\"))\n     17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n<0> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003741 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.31 tests/s, 267.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4btxnk7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4btxnk7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003292 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.77 tests/s, 607.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwbk_l2c4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwbk_l2c4.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.50 tests/s, 409.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytofnhn7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpytofnhn7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.0699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    14.31 tests/s, 28.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1w9jifm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps1w9jifm.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    257.60 tests/s, 515.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7l09fkgd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7l09fkgd.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.030946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.31 tests/s, 64.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwarlm3t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfwarlm3t.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.48 tests/s, 626.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvejr2ifp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvejr2ifp.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.09 tests/s, 626.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpro94pccd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpro94pccd.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.76 tests/s, 635.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk5e78nf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk5e78nf.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.002971 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    336.59 tests/s, 673.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcknqn_sb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcknqn_sb.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.98 tests/s, 615.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_nqx1ae\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_nqx1ae.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.71 tests/s, 659.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?('I')\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6sh8l7t7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6sh8l7t7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.42 tests/s, 596.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpseslor8n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpseslor8n.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.78 tests/s, 553.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.split.first\
    \ == \"I\" }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp97gdj_ec\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 29411.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpra8pg0ft\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpra8pg0ft.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 615.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqntw_18\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkqntw_18.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005049 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.06 tests/s, 396.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zbkcvuu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_zbkcvuu.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.019057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.47 tests/s, 104.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdro7l3a_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdro7l3a_.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.038229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.16 tests/s, 52.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpukeiyka9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpukeiyka9.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.55 tests/s, 545.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8huzs319\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8huzs319.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.23 tests/s, 608.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb82ot4xv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb82ot4xv.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.87 tests/s, 581.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphsi8paid\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphsi8paid.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.27 tests/s, 594.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfnyu2008\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfnyu2008.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.037335 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.78 tests/s, 53.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurl33ne6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpurl33ne6.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.22 tests/s, 614.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx75gzm5o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx75gzm5o.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.009044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.57 tests/s, 221.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6n_1u6wj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6n_1u6wj.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.80 tests/s, 473.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.split.first\
    \ == \"I\" }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4omleuru\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 30303.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqc1t9ilf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqc1t9ilf.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.016523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.52 tests/s, 121.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpczpcqewj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpczpcqewj.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003047 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.19 tests/s, 656.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnv0gyb_6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnv0gyb_6.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005183 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.94 tests/s, 385.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj0ncidup\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj0ncidup.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.51 tests/s, 327.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmyfv910v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmyfv910v.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.82 tests/s, 641.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_nivv1gm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_nivv1gm.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.14 tests/s, 474.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyn8bi8r7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyn8bi8r7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.005709 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.16 tests/s, 350.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_7ssrml\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_7ssrml.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.004036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    247.77 tests/s, 495.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fnujq_5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fnujq_5.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.006505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.73 tests/s, 307.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp38fea_k7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp38fea_k7.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.72 tests/s, 611.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw6jcc35x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw6jcc35x.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.57 tests/s, 605.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpczpdngcm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpczpdngcm.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.72 tests/s, 583.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz63acd_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuz63acd_.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.00 tests/s, 612.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx3s5athh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx3s5athh.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.98 tests/s, 619.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jpft0e3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4jpft0e3.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 627.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).select { |sentence| sentence.strip.start_with?(\"\
    I\") }.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbp_uxrl3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbp_uxrl3.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 615.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You'll be given a string of words, and your task is to count the number\n\
    # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
    \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
    )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n# 1\ndef is_bored(s)\n  s.split(/[.?!]/).count { |sentence| sentence.strip.start_with?(\"\
    I\") }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_bored\n    candidate = method(:is_bored)\n    assert_equal(0, candidate.call(\"\
    Hello world\"))\n    assert_equal(0, candidate.call(\"Is the sky blue?\"))\n \
    \   assert_equal(1, candidate.call(\"I love It !\"))\n    assert_equal(0, candidate.call(\"\
    bIt\"))\n    assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n    assert_equal(0, candidate.call(\"You and I are going for\
    \ a walk\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb6ik9cro\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_bored(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb6ik9cro.rb:17:in\
    \ `test_is_bored'\n     14:   def test_is_bored\n     15:     candidate = method(:is_bored)\n\
    \     16:     assert_equal(0, candidate.call(\"Hello world\"))\n  => 17:     assert_equal(0,\
    \ candidate.call(\"Is the sky blue?\"))\n     18:     assert_equal(1, candidate.call(\"\
    I love It !\"))\n     19:     assert_equal(0, candidate.call(\"bIt\"))\n     20:\
    \     assert_equal(2, candidate.call(\"I feel good today. I will be productive.\
    \ will kill It\"))\n<0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.002747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    364.03 tests/s, 728.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
