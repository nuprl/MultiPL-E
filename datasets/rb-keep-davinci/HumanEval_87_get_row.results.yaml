name: HumanEval_87_get_row
language: ruby
results:
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5f_ydtg5\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 25316.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |el, j|\n\
    \      [i, j] if el == x\n    end\n  end.flatten(1).compact.sort_by { |i, j| [i,\
    \ -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_ocqsn_\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 23346.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpap0z40z2\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 25000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplhjeb56s\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 25000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7cddqpac\n\
    Started\n.\nFinished in 0.000252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3968.25 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyqgrv25n\n\
    Started\n.\nFinished in 0.000264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3787.88 tests/s, 22727.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by do\
    \ |elem|\n    [elem[0], -elem[1]]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_j3cfhss\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 24590.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoehjbma8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoehjbma8.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.61 tests/s, 215.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpft3wz7x6\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 23622.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8n9h12u_\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 25531.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpghz7kjqe\n\
    Started\n.\nFinished in 0.000256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3906.25 tests/s, 23437.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_m2u249k\n\
    Started\n.\nFinished in 0.000268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3731.34 tests/s, 22388.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_5vq0c9\n\
    Started\n.\nFinished in 0.00026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3846.15 tests/s, 23076.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaan0_kn4\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 23529.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5dpp7ig8\n\
    Started\n.\nFinished in 0.000262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3816.79 tests/s, 22900.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hq5wxyk\n\
    Started\n.\nFinished in 0.00027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3703.70 tests/s, 22222.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowssbgwg\n\
    Started\n.\nFinished in 0.000282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3546.10 tests/s, 21276.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgw4wibtk\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |column,\
    \ column_index|\n      [row_index, column_index] if column == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2yiu8ggr\n\
    Started\n.\nFinished in 0.000716 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1396.65 tests/s, 8379.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzy9mq8qj\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwfp4quil\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 25423.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbsjfz745\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 24291.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqnkqdf59\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 23715.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |el, j|\n      result << [i, j] if el == x\n    end\n  end\n  result.sort_by\
    \ { |el| [el[0], -el[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphe9nrz56\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 25531.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3gw_ll0p\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 25210.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ka580w_\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 24291.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, item_index|\n      [row_index, item_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, _| row }.map do |row, item|\n    [row, item].sort_by { |_, item| -item\
    \ }\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdeoaldg\n\
    Started\nE\n===============================================================================\n\
    Error: test_get_row(TestHumanEval):\n  NoMethodError: undefined method `-@' for\
    \ nil:NilClass\n  \n      [row, item].sort_by { |_, item| -item }\n          \
    \                            ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdeoaldg.rb:23:in\
    \ `block (2 levels) in get_row'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdeoaldg.rb:23:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdeoaldg.rb:23:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdeoaldg.rb:23:in\
    \ `block in get_row'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdeoaldg.rb:22:in\
    \ `map'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdeoaldg.rb:22:in\
    \ `get_row'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdeoaldg.rb:30:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprdeoaldg.rb:30:in\
    \ `test_get_row'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:\
    \   def test_get_row\n     29:     candidate = method(:get_row)\n  => 30:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     31:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     32:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     33:     assert_equal([], candidate.call([], 1))\n===============================================================================\n\
    \nFinished in 0.001162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    860.59 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzdwinvs4\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 25104.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmwkfnjt\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 24691.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp20rujlqw\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 25423.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, item_index|\n      [row_index, item_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, _| row }.map do |row, item|\n    [row, item].sort.reverse\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj93qnxal\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj93qnxal.rb:30:in\
    \ `test_get_row'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:\
    \   def test_get_row\n     29:     candidate = method(:get_row)\n  => 30:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     31:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     32:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     33:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<[[0, 0], [1, 0], [4, 1],\
    \ [2, 0], [5, 2]]>\n\ndiff:\n? [[0, 0], [1, 4], [1, 0],         [2, 5], [   2,\
    \ 0]]\n?                          [4, 1],     0    5,       \n?              --------\
    \    ++++++++    ?    +++ ---  \n===============================================================================\n\
    \nFinished in 0.008974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.43 tests/s, 111.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2pqa3eia\n\
    Started\n.\nFinished in 0.000745 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1342.28 tests/s, 8053.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqd3dae0d\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvnhcfwaf\n\
    Started\n.\nFinished in 0.000275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3636.36 tests/s, 21818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps038a4ji\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 25423.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeg_r4t9m\n\
    Started\n.\nFinished in 0.001774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    563.70 tests/s, 3382.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoazyavg5\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 24193.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9sn9pmm\n\
    Started\n.\nFinished in 0.000265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3773.58 tests/s, 22641.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcmgd0_36\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 23715.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_88o3v6\n\
    Started\n.\nFinished in 0.000362 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2762.43 tests/s, 16574.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3y39kl5d\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 24000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, column_index|\n      result << [row_index, column_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk0k0vdse\n\
    Started\n.\nFinished in 0.000264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3787.88 tests/s, 22727.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9a2gj7wu\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 23346.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ljtj1jd\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |el, j|\n      result << [i, j] if el == x\n    end\n  end\n  result.sort_by\
    \ { |x, y| [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp10cy65ua\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 24691.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, col_index|\n      result << [row_index, col_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsn6if_bn\n\
    Started\n.\nFinished in 0.000265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3773.58 tests/s, 22641.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgy9vbvs\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 23715.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj7_1qc1x\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 25104.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfxv70dfm\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 26548.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  res = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |el,\
    \ j|\n      res << [i, j] if el == x\n    end\n  end\n  res.sort_by { |e| [e[0],\
    \ -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5hp7d0xt\n\
    Started\n.\nFinished in 0.000283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3533.57 tests/s, 21201.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, column_index|\n      result << [row_index, column_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnowy4cm6\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 25531.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |item, j|\n      result << [i, j] if item == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4g7vm8ei\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 25210.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn7y52m61\n\
    Started\n.\nFinished in 0.000279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3584.23 tests/s, 21505.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ljnss_f\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 25104.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr3radjp0\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 25316.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |i, j|\
    \ [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1b9fwf5\n\
    Started\n.\nFinished in 0.001622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    616.52 tests/s, 3699.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.map.with_index { |e, j| [i, j]\
    \ if e == x }\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposk_v_z_\n\
    Started\n.\nFinished in 0.000279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3584.23 tests/s, 21505.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1je4z9wu\n\
    Started\n.\nFinished in 0.000262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3816.79 tests/s, 22900.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphp90txp6\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 25104.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp407ddrkv\n\
    Started\n.\nFinished in 0.003207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    311.82 tests/s, 1870.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqs13dihz\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 24000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6qxfih6e\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 25210.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgzivzyur\n\
    Started\n.\nFinished in 0.000251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3984.06 tests/s, 23904.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7zl2q9tg\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 25000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6uoqn_as\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 26785.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptjjj24r9\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpis3yjiyn\n\
    Started\n.\nFinished in 0.000266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3759.40 tests/s, 22556.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |row,\
    \ col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzi_yqrd1\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 24193.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzx1wsfnk\n\
    Started\n.\nFinished in 0.000251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3984.06 tests/s, 23904.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4omz6w4c\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i, j| [i, -j]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsthhpk4d\n\
    Started\n.\nFinished in 0.00027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3703.70 tests/s, 22222.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv5fuvcga\n\
    Started\n.\nFinished in 0.000271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3690.04 tests/s, 22140.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, index|\n    row.each_with_index\
    \ do |element, index2|\n      result << [index, index2] if element == x\n    end\n\
    \  end\n  result.sort_by { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu5m8o39p\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 24590.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |item, j|\n      result << [i, j] if item == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mk4gglf\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 24489.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahe9ad94\n\
    Started\n.\nFinished in 0.000284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3521.13 tests/s, 21126.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbjjxtx7p\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_nc694n\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 24793.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1rhxwr2z\n\
    Started\n.\nFinished in 0.010787 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    92.70 tests/s, 556.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ni2_vg_\n\
    Started\n.\nFinished in 0.000256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3906.25 tests/s, 23437.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd5hkeowq\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 24489.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp33b1lm6y\n\
    Started\n.\nFinished in 0.000251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3984.06 tests/s, 23904.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6576c6_\n\
    Started\n.\nFinished in 0.000256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3906.25 tests/s, 23437.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkr1ici_q\n\
    Started\n.\nFinished in 0.000285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3508.77 tests/s, 21052.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz2f591pv\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 23346.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |value, column_index|\n      [row_index, column_index] if value == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvsjesnav\n\
    Started\n.\nFinished in 0.002277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    439.17 tests/s, 2635.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |row,\
    \ col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3flib02g\n\
    Started\n.\nFinished in 0.000273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3663.00 tests/s, 21978.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7205lkib\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 25000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkccou_r6\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 26431.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cba8gvy\n\
    Started\n.\nFinished in 0.000273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3663.00 tests/s, 21978.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk9ay1yss\n\
    Started\n.\nFinished in 0.000252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3968.25 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8nm7n_e9\n\
    Started\n.\nFinished in 0.000289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3460.21 tests/s, 20761.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq336l_dz\n\
    Started\n.\nFinished in 0.000265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3773.58 tests/s, 22641.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index do |row, row_index|\n    row.map.with_index do |elem, column_index|\n\
    \      [row_index, column_index] if elem == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff7znsvp\n\
    Started\n.\nFinished in 0.000265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3773.58 tests/s, 22641.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvbv72x05\n\
    Started\n.\nFinished in 0.000485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2061.86 tests/s, 12371.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |value, column_index|\n      result << [row_index, column_index] if value\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprmtq3l9r\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 24896.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphq4__byo\n\
    Started\n.\nFinished in 0.000263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3802.28 tests/s, 22813.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxgmijsu1\n\
    Started\n.\nFinished in 0.000266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3759.40 tests/s, 22556.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6azgoo28\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6azgoo28.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.05 tests/s, 218.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |cell, j|\n      result << [i, j] if cell == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpff_aohrx\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcli8x3o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplcli8x3o.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.60 tests/s, 273.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb51d1qjt\n\
    Started\n.\nFinished in 0.000267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3745.32 tests/s, 22471.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttc8np1v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttc8np1v.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.14 tests/s, 241.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplustl395\n\
    Started\n.\nFinished in 0.000393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2544.53 tests/s, 15267.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, item_index|\n      result << [row_index, item_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp83fl4nkc\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 24193.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5fx_u8y8\n\
    Started\n.\nFinished in 0.000261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3831.42 tests/s, 22988.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, item_index|\n      result << [row_index, item_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj7prnt6d\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 25641.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ek3m11b\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvp4n1cst\n\
    Started\n.\nFinished in 0.000267 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3745.32 tests/s, 22471.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpecsbh8sf\n\
    Started\n.\nFinished in 0.000268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3731.34 tests/s, 22388.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, col_index|\n      result << [row_index, col_index] if element ==\
    \ x\n    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkkyiug5u\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 26086.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp__jmr4y6\n\
    Started\n.\nFinished in 0.000268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3731.34 tests/s, 22388.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1pf6b7wq\n\
    Started\n.\nFinished in 0.000269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3717.47 tests/s, 22304.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |element,\
    \ column_index|\n      [row_index, column_index] if element == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, column| [row, -column] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa3b9gibi\n\
    Started\n.\nFinished in 0.000288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3472.22 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by do\
    \ |row, col|\n    [row, -col]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdik_hkfl\n\
    Started\n.\nFinished in 0.002512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    398.09 tests/s, 2388.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12y4fmzy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp12y4fmzy.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.80 tests/s, 285.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3a1tm1uu\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 24896.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9v437mk\n\
    Started\n.\nFinished in 0.001132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    883.39 tests/s, 5300.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index do |row, i|\n    row.map.with_index { |e, j| [i, j] if e\
    \ == x }\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwibkwt17\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 25531.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7mp6i54\n\
    Started\n.\nFinished in 0.00026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3846.15 tests/s, 23076.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7gr5vpow\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 23715.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |a, b| [a, -b] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0izmqg8d\n\
    Started\n.\nFinished in 0.000252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3968.25 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6lzydb8b\n\
    Started\n.\nFinished in 0.000661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1512.86 tests/s, 9077.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpavm7xxqb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpavm7xxqb.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003583 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.10 tests/s, 279.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i, j| [i, -j]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwayf3v9\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 24691.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpooy_q_ph\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 26548.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |item, item_index|\n      result << [row_index, item_index] if item == x\n\
    \    end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdhzdhzg2\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 24793.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3z8xy4g\n\
    Started\n.\nFinished in 0.00028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3571.43 tests/s, 21428.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v7q0plz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v7q0plz.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.06 tests/s, 184.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1r_jwnoa\n\
    Started\n.\nFinished in 0.000258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3875.97 tests/s, 23255.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpirko363s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpirko363s.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.028054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.65 tests/s, 35.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |column, column_index|\n      result << [row_index, column_index] if column\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92zxyi18\n\
    Started\n.\nFinished in 0.023902 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    41.84 tests/s, 251.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |elem,\
    \ col_index|\n      [row_index, col_index] if elem == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpupt6ju0c\n\
    Started\n.\nFinished in 0.000258 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3875.97 tests/s, 23255.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |el, j| [i, j] if el ==\
    \ x } }.flatten(1).compact.sort_by { |el| [el[0], -el[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqv84gdr4\n\
    Started\n.\nFinished in 0.000294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3401.36 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, row_index|\n    row.each_with_index.map { |col,\
    \ col_index|\n      [row_index, col_index] if col == x\n    }\n  }.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5x4uutp\n\
    Started\n.\nFinished in 0.000841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1189.06 tests/s, 7134.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp28rscmbv\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 23622.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp7xwb7xw\n\
    Started\n.\nFinished in 0.02499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    40.02 tests/s, 240.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |i, j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpie7mrfrk\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 25423.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  res = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do |elem,\
    \ j|\n      res << [i, j] if elem == x\n    end\n  end\n  res.sort_by { |elem|\
    \ [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpshqnkxne\n\
    Started\n.\nFinished in 0.000251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3984.06 tests/s, 23904.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt6rdnrmi\n\
    Started\n.\nFinished in 0.000264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3787.88 tests/s, 22727.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2io2cb69\n\
    Started\n.\nFinished in 0.000262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3816.79 tests/s, 22900.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvgnpn9qd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvgnpn9qd.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003763 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.75 tests/s, 265.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, item_index|\n      [row_index, item_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, _| row }.map do |row, item|\n    [row, item].sort_by { |_, item| -item\
    \ }.reverse\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c39ra7\n\
    Started\nE\n===============================================================================\n\
    Error: test_get_row(TestHumanEval):\n  NoMethodError: undefined method `-@' for\
    \ nil:NilClass\n  \n      [row, item].sort_by { |_, item| -item }.reverse\n  \
    \                                    ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c39ra7.rb:23:in\
    \ `block (2 levels) in get_row'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c39ra7.rb:23:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c39ra7.rb:23:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c39ra7.rb:23:in\
    \ `block in get_row'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c39ra7.rb:22:in\
    \ `map'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c39ra7.rb:22:in\
    \ `get_row'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c39ra7.rb:30:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9c39ra7.rb:30:in\
    \ `test_get_row'\n     27: class TestHumanEval < Test::Unit::TestCase\n     28:\
    \   def test_get_row\n     29:     candidate = method(:get_row)\n  => 30:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     31:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     32:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     33:     assert_equal([], candidate.call([], 1))\n===============================================================================\n\
    \nFinished in 0.008417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.81 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr07kseaq\n\
    Started\n.\nFinished in 0.000261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3831.42 tests/s, 22988.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |col, j|\n\
    \      [i, j] if col == x\n    end\n  end.flatten(1).compact.sort_by { |x, y|\
    \ [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78skxjs6\n\
    Started\n.\nFinished in 0.001238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    807.75 tests/s, 4846.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgcbincil\n\
    Started\n.\nFinished in 0.000268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3731.34 tests/s, 22388.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_fekjmo\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 23346.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsoq1z2u\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 21897.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |column, column_index|\n      [row_index, column_index] if column == x\n   \
    \ end\n  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51ph1c0t\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 23715.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index do |row, i|\n    row.map.with_index do |e, j|\n      [i,\
    \ j] if e == x\n    end\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5c2f6f6w\n\
    Started\n.\nFinished in 0.000529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1890.36 tests/s, 11342.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppfr80zjl\n\
    Started\n.\nFinished in 0.000251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3984.06 tests/s, 23904.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |i, j| [i, -j] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpavum4gv4\n\
    Started\n.\nFinished in 0.000271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3690.04 tests/s, 22140.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |x,\
    \ y| [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof5srcmi\n\
    Started\n.\nFinished in 0.000273 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3663.00 tests/s, 21978.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgqniqlwa\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 24000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjp5duyvn\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 21897.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |i, j| [i, -j]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp529n80gc\n\
    Started\n.\nFinished in 0.001871 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    534.47 tests/s, 3206.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |e, j|\n\
    \      [i, j] if e == x\n    }\n  }.flatten(1).compact.sort_by { |e| [e[0], -e[1]]\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0], [1,\
    \ 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3,\
    \ 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0],\
    \ [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt5vpd94v\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 24390.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsmmwnzd6\n\
    Started\n.\nFinished in 0.000303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3300.33 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphx_f9s_b\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 24691.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmt3gtom\n\
    Started\n.\nFinished in 0.000259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3861.00 tests/s, 23166.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtrbacfn\n\
    Started\n.\nFinished in 0.000284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3521.13 tests/s, 21126.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_1jgp5aq\n\
    Started\n.\nFinished in 0.004872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    205.25 tests/s, 1231.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp254qri9w\n\
    Started\n.\nFinished in 0.000382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2617.80 tests/s, 15706.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |item,\
    \ j|\n      [i, j] if item == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7uj5w9__\n\
    Started\n.\nFinished in 0.000279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3584.23 tests/s, 21505.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |col, col_index|\n      result << [row_index, col_index] if col == x\n  \
    \  end\n  end\n  result.sort_by { |row, col| [row, -col] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9poaz9kw\n\
    Started\n.\nFinished in 0.000295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3389.83 tests/s, 20338.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7ufxglu\n\
    Started\n.\nFinished in 0.000288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3472.22 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3fqr40k\n\
    Started\n.\nFinished in 0.000798 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1253.13 tests/s, 7518.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.map.with_index { |row, i| row.map.with_index { |e, j| [i, j] if e == x\
    \ } }\n    .flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8rl7_3fp\n\
    Started\n.\nFinished in 0.000276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3623.19 tests/s, 21739.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |x,\
    \ y| [x, -y] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpej8v17og\n\
    Started\n.\nFinished in 0.000284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3521.13 tests/s, 21126.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by do\
    \ |row, col|\n    [row, -col]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8ewc_1bw\n\
    Started\n.\nFinished in 0.000277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3610.11 tests/s, 21660.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr33ey5bn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr33ey5bn.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003691 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.93 tests/s, 270.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgug2c61\n\
    Started\n.\nFinished in 0.000269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3717.47 tests/s, 22304.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, col_index|\n      [row_index, col_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ do |row, col|\n    [row, -col]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk806ywgi\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 21897.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |element, column_index|\n      [row_index, column_index] if element == x\n \
    \   end\n  end.flatten(1).compact.sort_by do |row, column|\n    [row, -column]\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2upzzwkz\n\
    Started\n.\nFinished in 0.000688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1453.49 tests/s, 8720.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphf0yiq92\n\
    Started\n.\nFinished in 0.000284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3521.13 tests/s, 21126.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |elem|\
    \ [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5hwl5ek\n\
    Started\n.\nFinished in 0.000256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3906.25 tests/s, 23437.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9j7vb3_\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 21897.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppq_fj6m8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_get_row(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppq_fj6m8.rb:24:in\
    \ `test_get_row'\n     21: class TestHumanEval < Test::Unit::TestCase\n     22:\
    \   def test_get_row\n     23:     candidate = method(:get_row)\n  => 24:    \
    \ assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n     25:     assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n     26:     assert_equal([[0, 0], [1, 0],\
    \ [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6,\
    \ 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5,\
    \ 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1))\n     27:     assert_equal([], candidate.call([], 1))\n<[[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    270.49 tests/s, 270.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzzq3puxy\n\
    Started\n.\nFinished in 0.00028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3571.43 tests/s, 21428.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |col, j|\n      result << [i, j] if col == x\n    end\n  end\n  result.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3wwx9m2\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 24291.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |item, j|\n      result << [i, j] if item == x\n    end\n  end\n  result.sort_by\
    \ { |x| [x[0], -x[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq35gn9uu\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 24489.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqcjhz8n3\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 25210.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpusu9cksp\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 24590.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |a,\
    \ b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnfc4rkok\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 24000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |e|\
    \ [e[0], -e[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp886hvtvt\n\
    Started\n.\nFinished in 0.000255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3921.57 tests/s, 23529.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |col, col_index|\n      [row_index, col_index] if col == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcwti53g\n\
    Started\n.\nFinished in 0.000287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3484.32 tests/s, 20905.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |e, i| e.each_with_index.map { |e, j| [i, j] if e\
    \ == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppjsoiz8\n\
    Started\n.\nFinished in 0.000296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3378.38 tests/s, 20270.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |i,\
    \ j| [i, -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3od0sjl7\n\
    Started\n.\nFinished in 0.000277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3610.11 tests/s, 21660.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, element_index|\n      result << [row_index, element_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplkvq2mfv\n\
    Started\n.\nFinished in 0.000256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3906.25 tests/s, 23437.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8do39dhq\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 23622.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i|\n    row.each_with_index.map { |item, j|\n\
    \      [i, j] if item == x\n    }\n  }.flatten(1).compact.sort_by { |i, j| [i,\
    \ -j] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphxfwrtaq\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 23346.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, i|\n    row.each_with_index do\
    \ |elem, j|\n      result << [i, j] if elem == x\n    end\n  end\n  result.sort_by\
    \ { |elem| [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc1tzaoc\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 24489.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.map.with_index { |e, j| [i, j]\
    \ if e == x }\n  end.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9_zfucv\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 24291.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, item_index|\n      [row_index, item_index] if item == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |a, b| [a, -b] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe669xgt\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 21897.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |item, column_index|\n      [row_index, column_index] if item == x\n    end\n\
    \  end.flatten(1).compact.sort_by { |row, column| [row, -column] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp016qe4b4\n\
    Started\n.\nFinished in 0.000287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3484.32 tests/s, 20905.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map { |row, i| row.each_with_index.map { |e, j| [i, j]\
    \ if e == x } }.flatten(1).compact.sort_by { |e| [e[0], -e[1]] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfg52qoi6\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 23622.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, column_index|\n      result << [row_index, column_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4av80fsn\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 24793.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, index|\n    row.each_with_index\
    \ do |item, index2|\n      result << [index, index2] if item == x\n    end\n \
    \ end\n  result.sort_by { |item| [item[0], -item[1]] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n    candidate\
    \ = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]],\
    \ candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4,\
    \ 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
    \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
    \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
    \ [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckojjka_\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 24193.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, i|\n    row.each_with_index.map do |elem,\
    \ j|\n      [i, j] if elem == x\n    end\n  end.flatten(1).compact.sort_by { |elem|\
    \ [elem[0], -elem[1]] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_get_row\n    candidate = method(:get_row)\n    assert_equal([[0, 0],\
    \ [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2,\
    \ 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3,\
    \ 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
    \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfy8lg41\n\
    Started\n.\nFinished in 0.000462 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2164.50 tests/s, 12987.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  lst.each_with_index.map do |row, row_index|\n    row.each_with_index.map do\
    \ |el, col_index|\n      [row_index, col_index] if el == x\n    end\n  end.flatten(1).compact.sort_by\
    \ { |row, col| [row, -col] }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_get_row\n    candidate = method(:get_row)\n\
    \    assert_equal([[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([[0,\
    \ 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]], candidate.call([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0, 0], [1, 0], [2, 1], [2,\
    \ 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([],\
    \ candidate.call([], 1))\n    assert_equal([], candidate.call([[1]], 2))\n   \
    \ assert_equal([[2, 2]], candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4d6aavpr\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 24691.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# You are given a 2 dimensional data, as a nested lists,\n# which is similar\
    \ to matrix, however, unlike matrices,\n# each row may contain a different number\
    \ of columns.\n# Given lst, and integer x, find integers x in the list,\n# and\
    \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a\
    \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially\
    \ by rows in ascending order.\n# Also, sort coordinates of the row by columns\
    \ in descending order.\n# Examples:\n# get_row([\n# [1,2,3,4,5,6],\n# [1,2,3,4,1,6],\n\
    # [1,2,3,4,5,1]\n# ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# get_row([],\
    \ 1) == []\n# get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x)\n\
    \  result = []\n  lst.each_with_index do |row, row_index|\n    row.each_with_index\
    \ do |element, element_index|\n      result << [row_index, element_index] if element\
    \ == x\n    end\n  end\n  result.sort_by { |row, column| [row, -column] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
    \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
    \ [5, 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n  \
    \  assert_equal([[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
    \ [5, 4], [5, 0], [6, 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    assert_equal([], candidate.call([],\
    \ 1))\n    assert_equal([], candidate.call([[1]], 2))\n    assert_equal([[2, 2]],\
    \ candidate.call([[], [1], [1, 2, 3]], 3))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdzw4wb70\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 6 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 26905.83 assertions/s\n"
  exit_code: 0
  status: OK
