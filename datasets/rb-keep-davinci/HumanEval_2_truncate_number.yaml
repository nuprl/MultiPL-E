name: HumanEval_2_truncate_number
language: ruby
prompt: "# Given a positive floating point number, it can be decomposed into\n# and\
  \ integer part (largest integer smaller than given number) and decimals\n# (leftover\
  \ part always smaller than 1).\n# Return the decimal part of the number.\n# >>>\
  \ truncate_number(3.5)\n# 0.5\ndef truncate_number(number)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_truncate_number\n\
  \    candidate = method(:truncate_number)\n    assert_equal(0.5, candidate.call(3.5))\n\
  \    assert_equal(0.25, candidate.call(1.25))\n    assert_equal(0.0, candidate.call(123.0))\n\
  \  end\nend\n"
completions: ["  # TODO: implement me\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  # TODO: return the decimal part of the number\n\
    \  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  # TODO: implement\
    \ me\nend", "  # TODO: implement me\nend", "  number.to_i\nend", "  # TODO: implement\
    \ me\nend", "  number.to_i\nend", "  number.to_i\nend", "  # TODO: implement me\n\
    end", "  number.to_i\nend", "  # TODO: implement me\nend", "  number.to_i\nend",
  "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\
    \ - number\nend", "  # TODO: implement me\nend", "  # TODO: implement\nend", " \
    \ number.to_i\nend", "  # TODO: implement me\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  # TODO: return the decimal part of the number\n\
    \  number.to_i\nend", "  # TODO: implement this method\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  # TODO: return the decimal\
    \ part of the number\n  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  # TODO:\
    \ implement me\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  # TODO: implement me\nend", "  number.to_i\nend", "  number.to_i\nend",
  "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  # TODO:\
    \ implement me\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  # TODO: implement me\nend",
  "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  # TODO: return the decimal\
    \ part of the number\n  number.to_s.split(\".\").last.to_f\nend", "  # TODO: return\
    \ the decimal part of the number\n  number.to_i\nend", "  number.to_i\nend", " \
    \ # TODO: return the decimal part of the number\n  number.to_s.split('.')[1].to_f\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  # TODO\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  # TODO: implement me\nend", "  number.to_i\nend",
  "  number.to_i\nend", "  # TODO: implement this method\nend", "  number.to_i\nend",
  "  number.to_i\nend", "  # TODO: implement this method\nend", "  number.to_i\nend",
  "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  # TODO: implement me\nend", "  number.to_i\nend", "  number.to_i\nend",
  "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  # TODO: implement me\nend",
  "  number.to_i\nend", "  # TODO: implement me\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  # TODO: return the decimal part of the number\n  number.to_s.split(\"\
    .\").last.to_f\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\n\
    end", "  # TODO: implement me\nend", "  number.to_i\nend", "  number.to_i\nend",
  "  number.to_i\nend", "  number.to_i\nend", "  number.to_i\nend", "  return number\
    \ - number.floor\nend", "  number.to_i\nend", "  # TODO: implement this method\n\
    end", "  number.to_i\nend", "  number.to_i\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
