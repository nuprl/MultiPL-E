name: HumanEval_98_count_upper
language: ruby
results:
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1m7vvkr\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 30434.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpivenwxn0\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyz0jou06\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 29045.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9jzf60d2\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, idx|\n    count += 1 if char =~ /[AEIOU]/ && idx.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpisfhqvck\n\
    Started\n.\nFinished in 0.006285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    159.11 tests/s, 1113.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2gkpf8jt\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 28571.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpned3zvvy\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 29914.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lddb9t0\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4i3sjbsk\n\
    Started\n.\nFinished in 0.012665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    78.96 tests/s, 552.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwfq811te\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 30303.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd84lp9ho\n\
    Started\n.\nFinished in 0.013116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    76.24 tests/s, 533.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsrjlgjhl\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 31531.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7osmwier\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 34653.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp_1hmsxr\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 30434.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvb9wlrkl\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.map\
    \ { |char, i| char if char =~ /[AEIOU]/ && i.even? }.compact.length\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdff1ih11\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9mibrn3\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 30701.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgo8uqsq5\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 34825.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9oog_p55\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 30434.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdsdgjyc9\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 31818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wrx8__i\n\
    Started\n.\nFinished in 0.000757 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1321.00 tests/s, 9247.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp70dnp8_a\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 33492.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mxethai\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 30434.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzuw43stm\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 30434.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ou4s48w\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiubh_nls\n\
    Started\n.\nFinished in 0.000269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3717.47 tests/s, 26022.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp361u7s9c\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpku1bem5m\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppkh88mgo\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 28688.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe8saco9n\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp82qs8baz\n\
    Started\n.\nFinished in 0.000516 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1937.98 tests/s, 13565.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwqxuzapd\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vgyy4bj\n\
    Started\n.\nFinished in 0.004514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    221.53 tests/s, 1550.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3eab584\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if index.even? && char =~ /[AEIOU]/\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmd9_6zm9\n\
    Started\n.\nFinished in 0.000588 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1700.68 tests/s, 11904.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5d05hum5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5d05hum5.rb:13:in\
    \ `test_count_upper'\n     10: class TestHumanEval < Test::Unit::TestCase\n  \
    \   11:   def test_count_upper\n     12:     candidate = method(:count_upper)\n\
    \  => 13:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     14:     assert_equal(0,\
    \ candidate.call(\"abcdefg\"))\n     15:     assert_equal(0, candidate.call(\"\
    dBBE\"))\n     16:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.58 tests/s, 322.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.scan(/[AEIOU]/).count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wt0y22a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wt0y22a.rb:15:in\
    \ `test_count_upper'\n     12:     candidate = method(:count_upper)\n     13:\
    \     assert_equal(1, candidate.call(\"aBCdEf\"))\n     14:     assert_equal(0,\
    \ candidate.call(\"abcdefg\"))\n  => 15:     assert_equal(0, candidate.call(\"\
    dBBE\"))\n     16:     assert_equal(0, candidate.call(\"B\"))\n     17:     assert_equal(1,\
    \ candidate.call(\"U\"))\n     18:     assert_equal(0, candidate.call(\"\"))\n\
    <0> expected but was\n<1>\n===============================================================================\n\
    \nFinished in 0.003097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.89 tests/s, 968.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp65dfv545\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp09b1z8sn\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhmqsjmm\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 30434.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz81_qnf8\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 31963.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1gztr6j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc1gztr6j.rb:13:in\
    \ `test_count_upper'\n     10: class TestHumanEval < Test::Unit::TestCase\n  \
    \   11:   def test_count_upper\n     12:     candidate = method(:count_upper)\n\
    \  => 13:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     14:     assert_equal(0,\
    \ candidate.call(\"abcdefg\"))\n     15:     assert_equal(0, candidate.call(\"\
    dBBE\"))\n     16:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    256.48 tests/s, 256.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp02usq4gu\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 30701.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6mpbm8z\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7v754t2m\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkfxgczmy\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp52x61eg8\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpohxdr8xa\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkhzv5_un\n\
    Started\n.\nFinished in 0.000286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3496.50 tests/s, 24475.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, i| char == char.upcase && i.even? }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobofz85t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpobofz85t.rb:13:in\
    \ `test_count_upper'\n     10: class TestHumanEval < Test::Unit::TestCase\n  \
    \   11:   def test_count_upper\n     12:     candidate = method(:count_upper)\n\
    \  => 13:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     14:     assert_equal(0,\
    \ candidate.call(\"abcdefg\"))\n     15:     assert_equal(0, candidate.call(\"\
    dBBE\"))\n     16:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but\
    \ was\n<2>\n===============================================================================\n\
    \nFinished in 0.009699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.10 tests/s, 103.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char.match(/[AEIOU]/) && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbcd999x\n\
    Started\n.\nFinished in 0.000266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3759.40 tests/s, 26315.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgem78zwv\n\
    Started\n.\nFinished in 0.000252 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3968.25 tests/s, 27777.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpax8spg2u\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 28925.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeitgf7ww\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeitgf7ww.rb:13:in\
    \ `test_count_upper'\n     10: class TestHumanEval < Test::Unit::TestCase\n  \
    \   11:   def test_count_upper\n     12:     candidate = method(:count_upper)\n\
    \  => 13:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     14:     assert_equal(0,\
    \ candidate.call(\"abcdefg\"))\n     15:     assert_equal(0, candidate.call(\"\
    dBBE\"))\n     16:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.33 tests/s, 298.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy1v_d0r6\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 31111.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd2vf6z5_\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptpwsalta\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 29787.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwc6jeq6a\n\
    Started\n.\nFinished in 0.000274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3649.64 tests/s, 25547.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjts8ocj\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvg_anosi\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt_vu9x75\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnhlmy5yc\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 30973.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsefowwbx\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 28688.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftdqc7p5\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqe7064kt\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, i|\n    if i.even? && char.upcase == char && char =~ /[AEIOU]/\n \
    \     count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwg52etwj\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i % 2 == 0 && char =~ /[AEIOU]/\n      count += 1\n   \
    \ end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppnwofqe\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfzh24nfr\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi9bxjcyj\n\
    Started\n.\nFinished in 0.018149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    55.10 tests/s, 385.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even?\n      if char == 'A' || char == 'E' ||\
    \ char == 'I' || char == 'O' || char == 'U'\n        count += 1\n      end\n \
    \   end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqozbq6dd\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 29166.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp316bxrka\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply6wy5nu\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 33653.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp64a9s067\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 31818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi5hs1srw\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 31111.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd_kvom9t\n\
    Started\n.\nFinished in 0.000729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1371.74 tests/s, 9602.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |x, i|\n    if i.even? && x =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3ah55h5\n\
    Started\n.\nFinished in 0.000667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1499.25 tests/s, 10494.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyv0codu5\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 31531.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjvc6bz8\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 30567.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnhqtta1o\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 29535.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu6tq3sgw\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5is5ud42\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4c1wo8e\n\
    Started\n.\nFinished in 0.000288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3472.22 tests/s, 24305.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnqvznq9g\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 29535.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzs00p9v7\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpau30_r7v\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoz9ntb3k\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 33980.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').map.with_index\
    \ { |char, i| char if i.even? && char =~ /[AEIOU]/ }.compact.count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnl_om74\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpanae65_7\n\
    Started\n.\nFinished in 0.000644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1552.80 tests/s, 10869.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpadg_56_2\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 29288.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpha7ty13f\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp808kop14\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 31390.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt39vy3is\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgde06jg3\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 34482.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcsr15mrz\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 29411.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4zwzva5p\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 28225.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4fps4rjl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4fps4rjl.rb:13:in\
    \ `test_count_upper'\n     10: class TestHumanEval < Test::Unit::TestCase\n  \
    \   11:   def test_count_upper\n     12:     candidate = method(:count_upper)\n\
    \  => 13:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     14:     assert_equal(0,\
    \ candidate.call(\"abcdefg\"))\n     15:     assert_equal(0, candidate.call(\"\
    dBBE\"))\n     16:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.85 tests/s, 116.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz361sm95\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr3iaiq05\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 28000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkmwttvcg\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 30701.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof7delp_\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwforwn8v\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_n46dkk\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hwm3878\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb_u3g64k\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5if54am3\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnlc6w8o0\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 31818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? &&\
    \ vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvabmq368\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo17jd1_t\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 31531.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |c, i| c =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfchgo36u\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 31818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbo418qg\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 29166.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaaji8s8\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp86m4g674\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 31963.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptn8rzw6t\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnvi4xr6q\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 30567.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4biik3sr\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1d5ai858\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').select.with_index\
    \ { |x, i| x =~ /[AEIOU]/ && i.even? }.count\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfc18sq1z\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 28688.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_i0rgts\n\
    Started\n.\nFinished in 0.000548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1824.82 tests/s, 12773.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2a0iejb3\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 30172.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i % 2 == 0 && c =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyefj_30i\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 31111.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1y2qfm69\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zfl0_b3\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 31963.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4828_wvn\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 30172.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeg6zmmtz\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 33980.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp77qytdvf\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 29166.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof4og1js\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if vowels.include?(char)\
    \ && index.even?\n      count += 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo4asg3du\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyezcmqr7\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9nw8umam\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnwj6fbs6\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3nuvvoj\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 31818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp17usfh6b\n\
    Started\n.\nFinished in 0.001738 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    575.37 tests/s, 4027.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxp00f0d\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdk24v86\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyk6peo4_\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 31111.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph8vhgdvc\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjpb5phhd\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 29288.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqj_5sq3v\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmlbfv116\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = ['A', 'E',\
    \ 'I', 'O', 'U']\n  count = 0\n  s.each_char.with_index do |char, index|\n   \
    \ if index.even? && vowels.include?(char)\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptvelr7rw\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkf6ywg5_\n\
    Started\n.\nFinished in 0.000785 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1273.89 tests/s, 8917.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_oom_bjo\n\
    Started\n.\nFinished in 0.000676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1479.29 tests/s, 10355.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprw7w5h4d\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 31390.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpps5f5rnc\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 29288.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsea774r9\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    count += 1 if c =~ /[AEIOU]/ && i.even?\n  end\n  count\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojgy3_4r\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 29661.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbfz2dx10\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 31531.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgxm3lcht\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu6tkygif\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ib3a1bk\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 33018.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx049p5os\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 33492.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if char.match(/[AEIOU]/) && index.even?\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3we_p55\n\
    Started\n.\nFinished in 0.000441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2267.57 tests/s, 15873.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpopub5_d8\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 28340.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeirvt3uf\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 28571.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppq0n52nn\n\
    Started\n.\nFinished in 0.000281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3558.72 tests/s, 24911.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpigkahec2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpigkahec2.rb:13:in\
    \ `test_count_upper'\n     10: class TestHumanEval < Test::Unit::TestCase\n  \
    \   11:   def test_count_upper\n     12:     candidate = method(:count_upper)\n\
    \  => 13:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     14:     assert_equal(0,\
    \ candidate.call(\"abcdefg\"))\n     15:     assert_equal(0, candidate.call(\"\
    dBBE\"))\n     16:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003462 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.85 tests/s, 288.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxeubivg8\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.inject(0)\
    \ do |sum, (char, index)|\n    sum += 1 if char.match(/[AEIOU]/) && index.even?\n\
    \    sum\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpviqq1xrt\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 28688.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptwgzf236\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 31963.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwctl8y7v\n\
    Started\n.\nFinished in 0.000666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1501.50 tests/s, 10510.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjpgau94\n\
    Started\n.\nFinished in 0.003978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    251.38 tests/s, 1759.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwcgk9eph\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppts2ypdy\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 30567.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhbiclfx\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 31390.13 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpffc3jwj8\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaialsze8\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 28925.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    count += 1 if char =~ /[AEIOU]/ && i.even?\n  end\n  count\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6cxlerw\n\
    Started\n.\nFinished in 0.000262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3816.79 tests/s, 26717.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzof59ijm\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 30701.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoj1rq9pa\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 28806.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp430a2yr5\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 29166.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8alhv5my\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 29787.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.each_char.with_index.count\
    \ { |char, index| char =~ /[AEIOU]/ && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gstq_km\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 28000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').select.with_index\
    \ { |char, i| char =~ /[AEIOU]/ && i.even? }.count\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb9extlu6\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 30567.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqx4z53o\n\
    Started\n.\nFinished in 0.00027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3703.70 tests/s, 25925.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsrxh5wh1\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 29661.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6f0jrvoc\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 29045.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpamdbc896\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 29787.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmputsxhz9y\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0z3kxssj\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 31818.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  # Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsm6kzz2t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsm6kzz2t.rb:13:in\
    \ `test_count_upper'\n     10: class TestHumanEval < Test::Unit::TestCase\n  \
    \   11:   def test_count_upper\n     12:     candidate = method(:count_upper)\n\
    \  => 13:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     14:     assert_equal(0,\
    \ candidate.call(\"abcdefg\"))\n     15:     assert_equal(0, candidate.call(\"\
    dBBE\"))\n     16:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but\
    \ was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.13 tests/s, 120.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.chars.each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfnv41qdr\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 30701.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp10tazn_a\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, i|\n    if i.even? && char =~ /[AEIOU]/\n      count += 1\n    end\n\
    \  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt2j80lgq\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 33333.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.split('').each_with_index.count\
    \ { |char, index| char.upcase == char && index.even? }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk26uhym0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_count_upper(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk26uhym0.rb:13:in\
    \ `test_count_upper'\n     10: class TestHumanEval < Test::Unit::TestCase\n  \
    \   11:   def test_count_upper\n     12:     candidate = method(:count_upper)\n\
    \  => 13:     assert_equal(1, candidate.call(\"aBCdEf\"))\n     14:     assert_equal(0,\
    \ candidate.call(\"abcdefg\"))\n     15:     assert_equal(0, candidate.call(\"\
    dBBE\"))\n     16:     assert_equal(0, candidate.call(\"B\"))\n<1> expected but\
    \ was\n<2>\n===============================================================================\n\
    \nFinished in 0.00325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.69 tests/s, 307.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk__lcq53\n\
    Started\n.\nFinished in 0.002288 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    437.06 tests/s, 3059.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqkjl16bt\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 28112.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |letter, index|\n    if index.even? && letter =~ /[AEIOU]/\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi36o_u5o\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |c, i|\n    if i.even? && c =~ /[AEIOU]/\n      count += 1\n    end\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkg5h756j\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? &&\
    \ vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7g9xmhx\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 29661.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  vowels = \"AEIOU\"\
    \n  count = 0\n  s.each_char.with_index do |char, index|\n    if index.even? &&\
    \ vowels.include?(char)\n      count += 1\n    end\n  end\n  count\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
    \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
    ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2wxoc5pq\n\
    Started\n.\nFinished in 0.000278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3597.12 tests/s, 25179.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjjede21\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 31250.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi_sz621e\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  s.chars.each_with_index.count\
    \ { |char, i| char =~ /[AEIOU]/ && i.even? }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n    candidate\
    \ = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"))\n  \
    \  assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
    dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
    U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
    EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ploz83i\n\
    Started\n.\nFinished in 0.000692 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1445.09 tests/s, 10115.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpky5pmfd4\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 29045.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaj6jgou8\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 32407.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    count += 1 if char =~ /[AEIOU]/ && index.even?\n  end\n\
    \  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi74d0sk3\n\
    Started\n.\nFinished in 0.000291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3436.43 tests/s, 24054.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuoxpok4a\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.split('').each_with_index\
    \ do |char, index|\n    if index.even? && char =~ /[AEIOU]/\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2_ibrui_\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if char =~ /[AEIOU]/ && index.even?\n      count += 1\n\
    \    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_upper\n    candidate = method(:count_upper)\n    assert_equal(1,\
    \ candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"abcdefg\"\
    ))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0, candidate.call(\"\
    B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb50pf9ro\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 29535.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a string s, count the number of uppercase vowels in even indices.\n\
    # For example:\n# count_upper('aBCdEf') returns 1\n# count_upper('abcdefg') returns\
    \ 0\n# count_upper('dBBE') returns 0\ndef count_upper(s)\n  count = 0\n  s.each_char.with_index\
    \ do |char, index|\n    if index.even? && char.match(/[AEIOU]/)\n      count +=\
    \ 1\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_count_upper\n    candidate = method(:count_upper)\n\
    \    assert_equal(1, candidate.call(\"aBCdEf\"))\n    assert_equal(0, candidate.call(\"\
    abcdefg\"))\n    assert_equal(0, candidate.call(\"dBBE\"))\n    assert_equal(0,\
    \ candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"U\"))\n    assert_equal(0,\
    \ candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"EEEE\"))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqn_a7hb_\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
