name: HumanEval_132_is_nested
language: ruby
results:
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length == 1\n  return\
    \ false if string.length.odd?\n  return false if string.count('[') != string.count(']')\n\
    \  return true if string.count('[') == string.count(']')\n  return true if string.count('[')\
    \ > string.count(']')\n  return true if string.count('[') < string.count(']')\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyp8hr7o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyp8hr7o.rb:25:in\
    \ `test_is_nested'\n     22:     candidate = method(:is_nested)\n     23:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     28:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.72 tests/s, 656.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwehzhuy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwehzhuy.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.31 tests/s, 325.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') != 0\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqzx8oxy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcqzx8oxy.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.96 tests/s, 947.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpctxbd3mf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpctxbd3mf.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.43 tests/s, 622.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqha7t5ql\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqha7t5ql.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.21 tests/s, 618.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt0y1c099\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt0y1c099.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003831 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    261.03 tests/s, 522.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0hf3zrn1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0hf3zrn1.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.015583 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.17 tests/s, 128.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length % 2 != 0\n  return\
    \ false if string.count('[') != string.count(']')\n  return false if string.start_with?(']')\
    \ || string.end_with?('[')\n  return true if string.include?('[[') || string.include?(']]')\n\
    \  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo68v7k9e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo68v7k9e.rb:31:in\
    \ `test_is_nested'\n     28:     assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n     29:     assert_equal(false, candidate.call(\"[[]\"))\n     30:     assert_equal(false,\
    \ candidate.call(\"[]]\"))\n  => 31:     assert_equal(true, candidate.call(\"\
    [[]][[\"))\n     32:     assert_equal(true, candidate.call(\"[[][]]\"))\n    \
    \ 33:     assert_equal(false, candidate.call(\"\"))\n     34:     assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n<true> expected but was\n<false>\n\ndiff:\n?\
    \ tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.28 tests/s, 3132.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6rsiuq2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6rsiuq2.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.06 tests/s, 630.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphpd3b45r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphpd3b45r.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.028739 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    34.80 tests/s, 69.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_863aff_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_863aff_.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.031828 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    31.42 tests/s, 94.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ true if string.include?('[]')\n  return false if string.length == 0\n  return\
    \ false if string.length == 1\n  return false if string.length == 2 && string\
    \ != '[]'\n  return false if string.length == 3 && string != '[[]]'\n  return\
    \ false if string.length == 4 && string != '[[][]]'\n  return false if string.length\
    \ == 5 && string != '[[[]]]'\n  return false if string.length == 6 && string !=\
    \ '[[[]][]]'\n  return false if string.length == 7 && string != '[[[][]]]'\n \
    \ return false if string.length == 8 && string != '[[[][][]]]'\n  return false\
    \ if string.length == 9 && string != '[[[[]]][]]'\n  return false if string.length\
    \ == 10 && string != '[[[[][]]]]'\n  return false if string.length == 11 && string\
    \ != '[[[[][][]]]]'\n  return false if string.length == 12 && string != '[[[[][][][]]]]'\n\
    \  return false if string.length == 13 && string != '[[[[[]]][]]]'\n  return false\
    \ if string.length == 14 && string != '[[[[[]]][][]]]'\n  return false if string.length\
    \ == 15 && string != '[[[[[][]]]]]'\n  return false if string.length == 16 &&\
    \ string != '[[[[[][][]]]]]'\n  return false if string.length == 17 && string\
    \ != '[[[[[][][][]]]]]'\n  return false if string.length == 18 && string != '[[[[[][][][][]]]]]'\n\
    \  return false if string.length == 19 && string != '[[[[[[]]][]]]]'\n  return\
    \ false if string.length == 20 && string != '[[[[[[]]][][]]]]'\n  return false\
    \ if string.length == 21 && string != '[[[[[[][]]]]]]'\n  return false if string.length\
    \ == 22 && string != '[[[[[[][][]]]]]]'\n  return false if string.length == 23\
    \ && string != '[[[[[[][][][]]]]]]'\n  return false if string.length == 24 &&\
    \ string != '[[[[[[][][][][]]]]\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw9vv8fg.rb:37: syntax\
    \ error, unexpected local variable or method, expecting `end'\nrequire 'test/unit'\n\
    \         ^~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw9vv8fg.rb:37:\
    \ syntax error, unexpected string literal, expecting `do' or '{' or '('\nrequire\
    \ 'test/unit'\n                  ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw9vv8fg.rb:56:\
    \ unterminated string meets end of file\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw9vv8fg.rb:56:\
    \ syntax error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.gsub!(/\\\
    [\\]/, \"\")\n\tstring.length == 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "false\nfalse\ntrue\ntrue\nfalse\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lyem9iv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4lyem9iv.rb:24:in\
    \ `test_is_nested'\n     21: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 22:   def test_is_nested\n     23:     candidate = method(:is_nested)\n  =>\
    \ 24:     assert_equal(true, candidate.call(\"[[]]\"))\n     25:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     26:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     27:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    290.78 tests/s, 290.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8_z1yq6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8_z1yq6.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.19 tests/s, 626.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    stack\
    \ = []\n    string.each_char do |char|\n        if char == '['\n            stack.push(char)\n\
    \        else\n            if stack.empty?\n                return false\n   \
    \         else\n                stack.pop\n            end\n        end\n    end\n\
    \    return stack.empty?\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlrsaehe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlrsaehe.rb:37:in\
    \ `test_is_nested'\n     34:     candidate = method(:is_nested)\n     35:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 37:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     38:     assert_equal(false, candidate.call(\"[]\"))\n     39: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     40:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.69 tests/s, 752.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptid3y2h_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptid3y2h_.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.75 tests/s, 902.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpueif21f2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpueif21f2.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.013392 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.67 tests/s, 74.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7hq8vfop\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7hq8vfop.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003717 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.03 tests/s, 538.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiani9oxn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiani9oxn.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.88 tests/s, 609.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') != 0\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdi8r1h1i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdi8r1h1i.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.93 tests/s, 830.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwkyqqluu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwkyqqluu.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.99 tests/s, 589.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8ox7jst\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf8ox7jst.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.030701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.57 tests/s, 65.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxci5lwzk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxci5lwzk.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.035498 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    28.17 tests/s, 56.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  # if\
    \ string.include?(\"[]\")\n  #   return true\n  # else\n  #   return false\n \
    \ # end\n  string.include?(\"[]\")\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n\
    \    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"\
    []]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbi0ms75\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnbi0ms75.rb:23:in\
    \ `test_is_nested'\n     20:   def test_is_nested\n     21:     candidate = method(:is_nested)\n\
    \     22:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 23:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     24:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     25:     assert_equal(false, candidate.call(\"[]\"))\n     26: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.73 tests/s, 651.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mdh9jw0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_mdh9jw0.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.023443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    42.66 tests/s, 85.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptbn3ba22\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptbn3ba22.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.85 tests/s, 932.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpphn0jnf1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpphn0jnf1.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.90 tests/s, 917.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqjpj9sn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqjpj9sn.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003512 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.74 tests/s, 569.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplq3fy058\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplq3fy058.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.033378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    29.96 tests/s, 59.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaaeh7jed\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaaeh7jed.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.41 tests/s, 650.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rcwt9t6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rcwt9t6.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.03 tests/s, 642.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgz39emmg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgz39emmg.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010865 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.04 tests/s, 184.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.count('[')\
    \ == string.count(']')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_sof_e0r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_sof_e0r.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.44 tests/s, 964.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwny0_75h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwny0_75h.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.022531 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.38 tests/s, 88.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp90imufsn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp90imufsn.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.78 tests/s, 219.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe58ov2zv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe58ov2zv.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.62 tests/s, 641.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_m_5ion\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz_m_5ion.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.62 tests/s, 595.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe0wjhh4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppe0wjhh4.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.48 tests/s, 644.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5lzbiks\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe5lzbiks.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.66 tests/s, 621.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbbty4the\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbbty4the.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.59 tests/s, 429.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk6h98rol\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk6h98rol.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003287 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.23 tests/s, 608.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2spj79nw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2spj79nw.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.70 tests/s, 938.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9z0j416u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9z0j416u.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003328 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.48 tests/s, 600.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp36zy4a1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp36zy4a1.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004103 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.72 tests/s, 487.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpji9_p04d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpji9_p04d.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.005161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.76 tests/s, 387.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpborglmgj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpborglmgj.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00317 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.46 tests/s, 630.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvnhv_8yi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvnhv_8yi.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.15 tests/s, 140.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length == 1\n  return\
    \ false if string.length % 2 != 0\n  return false if string.count('[') != string.count(']')\n\
    \  return true if string.count('[') == string.count(']') && string.count('[')\
    \ > 1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5yx9_5z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5yx9_5z.rb:23:in\
    \ `test_is_nested'\n     20:     candidate = method(:is_nested)\n     21:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 23:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     24:     assert_equal(false, candidate.call(\"[]\"))\n     25: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     26:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.18 tests/s, 891.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxnual_34\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxnual_34.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.14 tests/s, 286.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbny6wh7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplbny6wh7.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003342 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.22 tests/s, 598.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp269xf24y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp269xf24y.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.59 tests/s, 639.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp544eef6r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp544eef6r.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003861 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.00 tests/s, 518.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv73tj2c0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv73tj2c0.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.015776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    63.39 tests/s, 63.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 0\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7f_drfqc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7f_drfqc.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.005612 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.19 tests/s, 534.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, \"\")\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n\
    \    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"\
    []]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqj69m7_7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqj69m7_7.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.009988 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.12 tests/s, 100.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length == 1\n  return\
    \ false if string.length == 2 && string[0] == string[1]\n  return true if string.length\
    \ == 2 && string[0] != string[1]\n  return true if string.length == 3 && string[0]\
    \ == string[2]\n  return false if string.length == 3 && string[0] != string[2]\n\
    \  return true if string.length == 4 && string[0] == string[2] && string[1] ==\
    \ string[3]\n  return false if string.length == 4 && string[0] == string[2] &&\
    \ string[1] != string[3]\n  return false if string.length == 4 && string[0] !=\
    \ string[2] && string[1] == string[3]\n  return false if string.length == 4 &&\
    \ string[0] != string[2] && string[1] != string[3]\n  return true if string.length\
    \ == 5 && string[0] == string[2] && string[1] == string[3] && string[4] == string[2]\n\
    \  return true if string.length == 5 && string[0] == string[2] && string[1] ==\
    \ string[3] && string[4] == string[0]\n  return true if string.length == 5 &&\
    \ string[0] == string[2] && string[1] == string[4] && string[3] == string[2]\n\
    \  return true if string.length == 5 && string[0] == string[2] && string[1] ==\
    \ string[4] && string[3] == string[0]\n  return true if string.length == 5 &&\
    \ string[0] == string[4] && string[1] == string[3] && string[2] == string[0]\n\
    \  return true if string.length == 5 && string[0] == string[4] && string[1] ==\
    \ string[3] && string[2] == string[1]\n  return true if string.length == 5 &&\
    \ string[0] == string[4] && string[1] == string[2] && string[3] == string[0]\n\
    \  return true if string.length == 5 && string\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n\
    \    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"\
    []]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92b7vhh4.rb:30: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92b7vhh4.rb:48: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmikj5wxc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmikj5wxc.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.97 tests/s, 609.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ti17yya\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ti17yya.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.009429 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.06 tests/s, 106.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    if\
    \ string.count('[') == string.count(']')\n        return false\n    else\n   \
    \     return true\n    end\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "false\ntrue\nfalse\nfalse\nfalse\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9hdlxfvp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9hdlxfvp.rb:27:in\
    \ `test_is_nested'\n     24: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 25:   def test_is_nested\n     26:     candidate = method(:is_nested)\n  =>\
    \ 27:     assert_equal(true, candidate.call(\"[[]]\"))\n     28:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     29:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     30:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.030638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.64 tests/s, 32.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.gsub!(/\\\
    [\\]/, \"\")\n    string.length == 0\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n\
    \    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"\
    []]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwe47chw6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwe47chw6.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.021587 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    46.32 tests/s, 46.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq1otj_f4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq1otj_f4.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.47 tests/s, 636.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rq4s8i9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rq4s8i9.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.011722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.31 tests/s, 170.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc8tn6omq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc8tn6omq.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004115 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    243.01 tests/s, 486.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\topen_brackets\
    \ = []\n\tstring.each_char do |char|\n\t\tif char == \"[\"\n\t\t\topen_brackets\
    \ << char\n\t\telsif char == \"]\"\n\t\t\tif open_brackets.empty?\n\t\t\t\treturn\
    \ false\n\t\t\telse\n\t\t\t\topen_brackets.pop\n\t\t\tend\n\t\tend\n\tend\n\t\
    return true\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs\
    \ is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbgiy4l22\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbgiy4l22.rb:37:in\
    \ `test_is_nested'\n     34:     candidate = method(:is_nested)\n     35:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 37:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     38:     assert_equal(false, candidate.call(\"[]\"))\n     39: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     40:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.66 tests/s, 346.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvce_nxk1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvce_nxk1.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.19 tests/s, 626.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn3hhfdlx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn3hhfdlx.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.41 tests/s, 618.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    stack\
    \ = []\n    string.each_char do |char|\n        if char == '['\n            stack.push(char)\n\
    \        else\n            if stack.length == 0\n                return false\n\
    \            else\n                stack.pop\n            end\n        end\n \
    \   end\n    return stack.length == 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhoc_qjl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhoc_qjl.rb:37:in\
    \ `test_is_nested'\n     34:     candidate = method(:is_nested)\n     35:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 37:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     38:     assert_equal(false, candidate.call(\"[]\"))\n     39: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     40:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.44 tests/s, 658.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvvh7993_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvvh7993_.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003372 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.56 tests/s, 593.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4bp2s2id\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4bp2s2id.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.26 tests/s, 632.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2e5j7sys\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2e5j7sys.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.57 tests/s, 461.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2w5fze4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw2w5fze4.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004855 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.97 tests/s, 411.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3epa8a2q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3epa8a2q.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.013519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.97 tests/s, 147.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9lwkb__\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg9lwkb__.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006703 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.19 tests/s, 298.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkemc_yv8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkemc_yv8.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.01558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.18 tests/s, 128.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    stack\
    \ = []\n    string.each_char do |char|\n        if char == '['\n            stack.push(char)\n\
    \        else\n            if stack.length == 0\n                return false\n\
    \            else\n                stack.pop\n            end\n        end\n \
    \   end\n    return stack.length == 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcwcq9xh9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcwcq9xh9.rb:37:in\
    \ `test_is_nested'\n     34:     candidate = method(:is_nested)\n     35:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 37:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     38:     assert_equal(false, candidate.call(\"[]\"))\n     39: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     40:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.04 tests/s, 897.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ggquuss\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ggquuss.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.33 tests/s, 311.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length == 1\n  return\
    \ false if string.length.odd?\n  return false if string.count('[') != string.count(']')\n\
    \  return true if string.count('[') == string.count(']')\n  return true if string.count('[')\
    \ > string.count(']')\n  return true if string.count('[') < string.count(']')\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t2dt3jx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t2dt3jx.rb:25:in\
    \ `test_is_nested'\n     22:     candidate = method(:is_nested)\n     23:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     28:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.16 tests/s, 948.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdw1b1433\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdw1b1433.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.93 tests/s, 905.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length == 1\n  return\
    \ false if string.length.odd?\n  return false if string.count('[') != string.count(']')\n\
    \  return true if string.count('[') == string.count(']') && string.count('[')\
    \ > 1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72aenrj6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72aenrj6.rb:23:in\
    \ `test_is_nested'\n     20:     candidate = method(:is_nested)\n     21:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 23:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     24:     assert_equal(false, candidate.call(\"[]\"))\n     25: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     26:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.42 tests/s, 823.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7o5s00n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd7o5s00n.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    254.13 tests/s, 508.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1w5mhjb7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1w5mhjb7.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.03 tests/s, 200.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tif\
    \ string.include?(\"[]\")\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstbd_qt3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstbd_qt3.rb:28:in\
    \ `test_is_nested'\n     25:   def test_is_nested\n     26:     candidate = method(:is_nested)\n\
    \     27:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 28:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     29:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     30:     assert_equal(false, candidate.call(\"[]\"))\n     31: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.86 tests/s, 587.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8tnikf3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8tnikf3.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003741 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.31 tests/s, 534.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp20pw53hd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp20pw53hd.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.50 tests/s, 215.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vgdf1hd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8vgdf1hd.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00891 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.23 tests/s, 224.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeuq3z6c2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeuq3z6c2.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.019165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.18 tests/s, 104.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr240g_73\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr240g_73.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.00332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.20 tests/s, 301.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.count('[')\
    \ == string.count(']') && string.count('[') > 0\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3a95fda\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg3a95fda.rb:25:in\
    \ `test_is_nested'\n     22:     candidate = method(:is_nested)\n     23:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     28:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.027959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    35.77 tests/s, 107.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphcz_bdxb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphcz_bdxb.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.015625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    64.00 tests/s, 128.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.gsub!(/\\\
    [\\]/, '')\n\tstring.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp65u5idwb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp65u5idwb.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.77 tests/s, 287.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_8wgeh3i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_8wgeh3i.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003162 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.26 tests/s, 632.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfd_3tme6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfd_3tme6.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.31 tests/s, 646.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiblduh9q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiblduh9q.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.22 tests/s, 614.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 0\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuplxacm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwuplxacm.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.36 tests/s, 946.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2389vy1u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2389vy1u.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.21 tests/s, 212.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl2rw4ufu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl2rw4ufu.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.011441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.40 tests/s, 174.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp328wx542\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp328wx542.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008026 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.60 tests/s, 249.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl2h1rw0k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl2h1rw0k.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.025678 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.94 tests/s, 77.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo4v_bxcg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo4v_bxcg.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.75 tests/s, 603.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length < 2\n  return false if string.count('[') != string.count(']')\n\
    \  string.gsub!('[]', '')\n  return true if string.empty?\n  is_nested(string)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0eg60bn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0eg60bn.rb:23:in\
    \ `test_is_nested'\n     20:     candidate = method(:is_nested)\n     21:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 23:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     24:     assert_equal(false, candidate.call(\"[]\"))\n     25: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     26:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.00 tests/s, 968.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyejd48ql\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyejd48ql.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    259.20 tests/s, 518.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp622p5qyk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp622p5qyk.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.008873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.70 tests/s, 225.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.gsub!(/\\\
    [\\]/, '')\n    string.empty?\nend\np is_nested('[[]]')\np is_nested('[]]]]]]][[[[[]')\n\
    p is_nested('[][]')\np is_nested('[]')\np is_nested('[[][]]')\np is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "false\nfalse\ntrue\ntrue\nfalse\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2gzckwb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2gzckwb.rb:24:in\
    \ `test_is_nested'\n     21: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 22:   def test_is_nested\n     23:     candidate = method(:is_nested)\n  =>\
    \ 24:     assert_equal(true, candidate.call(\"[[]]\"))\n     25:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     26:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     27:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003158 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.66 tests/s, 316.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    stack\
    \ = []\n    string.each_char do |char|\n        if char == '['\n            stack.push(char)\n\
    \        else\n            if stack.empty?\n                return false\n   \
    \         else\n                stack.pop\n            end\n        end\n    end\n\
    \    return stack.empty?\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmploto0ot7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmploto0ot7.rb:37:in\
    \ `test_is_nested'\n     34:     candidate = method(:is_nested)\n     35:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 37:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     38:     assert_equal(false, candidate.call(\"[]\"))\n     39: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     40:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    237.93 tests/s, 713.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnn6cbr3a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnn6cbr3a.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.25 tests/s, 648.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7d353v7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7d353v7.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.61 tests/s, 279.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length < 2\n  return false if string.length.odd?\n  return false\
    \ if string.count('[') != string.count(']')\n  return false if string.count('[')\
    \ == 1 && string.count(']') == 1\n  return true if string.count('[') > 1 && string.count(']')\
    \ > 1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9puqjonx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9puqjonx.rb:23:in\
    \ `test_is_nested'\n     20:     candidate = method(:is_nested)\n     21:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 23:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     24:     assert_equal(false, candidate.call(\"[]\"))\n     25: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     26:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.86 tests/s, 539.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpon90mlyv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpon90mlyv.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.02 tests/s, 604.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    #\
    \ if string.count('[') == string.count(']')\n    #     return false\n    # else\n\
    \    #     return true\n    # end\n    string.count('[') != string.count(']')\n\
    end\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "false\ntrue\nfalse\nfalse\nfalse\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkm4akclh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkm4akclh.rb:28:in\
    \ `test_is_nested'\n     25: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 26:   def test_is_nested\n     27:     candidate = method(:is_nested)\n  =>\
    \ 28:     assert_equal(true, candidate.call(\"[[]]\"))\n     29:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     30:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     31:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.16 tests/s, 316.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length == 1\n  return\
    \ false if string.length == 2 && string[0] == '[' && string[1] == ']'\n  return\
    \ true if string.length == 2 && string[0] == '[' && string[1] == '['\n  return\
    \ true if string.length == 2 && string[0] == ']' && string[1] == ']'\n  return\
    \ true if string.length == 2 && string[0] == ']' && string[1] == '['\n  return\
    \ false if string.length == 2 && string[0] == ']' && string[1] == ']'\n  return\
    \ true if string.length == 3 && string[0] == '[' && string[1] == '[' && string[2]\
    \ == ']'\n  return true if string.length == 3 && string[0] == '[' && string[1]\
    \ == ']' && string[2] == ']'\n  return true if string.length == 3 && string[0]\
    \ == '[' && string[1] == ']' && string[2] == '['\n  return true if string.length\
    \ == 3 && string[0] == ']' && string[1] == '[' && string[2] == '['\n  return true\
    \ if string.length == 3 && string[0] == ']' && string[1] == '[' && string[2] ==\
    \ ']'\n  return true if string.length == 3 && string[0] == ']' && string[1] ==\
    \ ']' && string[2] == '['\n  return true if string.length == 3 && string[0] ==\
    \ ']' && string[1] == ']' && string[2] == ']'\n  return true if string.length\
    \ == 4 && string[0] == '[' && string[1] == '[' && string[2] == ']' && string[3]\
    \ == ']'\n  return true if string.length == 4 && string[0] == '[' && string[1]\
    \ == '[' && string[2] == ']' && string[3] == '['\n  return true if string.length\
    \ == 4 && string[0] == '[' && string[1] == '[' && string[2] == '[' && string[3]\
    \ ==\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmvp9yney.rb:28: syntax\
    \ error, unexpected string literal, expecting `do' or '{' or '('\nrequire 'test/unit'\n\
    \        ^\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmvp9yney.rb:29:\
    \ class definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n\
    ^~~~~~~~~~~~~~~~~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmvp9yney.rb:47:\
    \ syntax error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length == 1\n  return\
    \ false if string.length == 2 && string[0] == string[1]\n  return true if string.length\
    \ == 2 && string[0] != string[1]\n  return false if string.length == 3 && string[0]\
    \ == string[1] && string[1] == string[2]\n  return true if string.length == 3\
    \ && string[0] == string[1] && string[1] != string[2]\n  return true if string.length\
    \ == 3 && string[0] != string[1] && string[1] == string[2]\n  return true if string.length\
    \ == 3 && string[0] != string[1] && string[1] != string[2]\n  return false if\
    \ string.length == 4 && string[0] == string[1] && string[1] == string[2] && string[2]\
    \ == string[3]\n  return true if string.length == 4 && string[0] == string[1]\
    \ && string[1] == string[2] && string[2] != string[3]\n  return true if string.length\
    \ == 4 && string[0] == string[1] && string[1] != string[2] && string[2] == string[3]\n\
    \  return true if string.length == 4 && string[0] == string[1] && string[1] !=\
    \ string[2] && string[2] != string[3]\n  return true if string.length == 4 &&\
    \ string[0] != string[1] && string[1] == string[2] && string[2] == string[3]\n\
    \  return true if string.length == 4 && string[0] != string[1] && string[1] ==\
    \ string[2] && string[2] != string[3]\n  return true if string.length == 4 &&\
    \ string[0] != string[1] && string[1] != string[2] && string[2] == string[3]\n\
    \  return true if string.length == 4 && string[0] != string[1] && string[1] !=\
    \ string[2] && string[2] != string[3]\n  return false if string.length == 5 &&\
    \ string\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ln3540v.rb:29: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ln3540v.rb:47: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxga1re3b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxga1re3b.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    135.46 tests/s, 270.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvqgk1gy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphvqgk1gy.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003505 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.31 tests/s, 570.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcy2cknbf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcy2cknbf.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004868 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.42 tests/s, 410.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppfpj0y22\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppfpj0y22.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.03 tests/s, 614.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') != 0\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5xva79km\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5xva79km.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.32 tests/s, 912.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpetajl8_x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpetajl8_x.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.010378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.36 tests/s, 192.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rldt4o8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9rldt4o8.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00765 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.72 tests/s, 261.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tif\
    \ string.include?(\"[\") && string.include?(\"]\")\n\t\treturn true\n\telse\n\t\
    \treturn false\n\tend\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc_1t6f2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc_1t6f2.rb:28:in\
    \ `test_is_nested'\n     25:   def test_is_nested\n     26:     candidate = method(:is_nested)\n\
    \     27:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 28:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     29:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     30:     assert_equal(false, candidate.call(\"[]\"))\n     31: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.022614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.22 tests/s, 88.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj7hedae\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj7hedae.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.57 tests/s, 302.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq03gs7jv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq03gs7jv.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.005419 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.54 tests/s, 369.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknbcl1fk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpknbcl1fk.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.016174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.83 tests/s, 123.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vdxydar\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3vdxydar.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.76 tests/s, 605.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsq_yv3xs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsq_yv3xs.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.15 tests/s, 280.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu0tcr2rb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu0tcr2rb.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.60 tests/s, 307.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.count('[')\
    \ == string.count(']') && string.count('[') > 0\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpdny3ut\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpdny3ut.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.66 tests/s, 904.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    return\
    \ false if string.length == 0\n    return false if string.length == 1\n    return\
    \ false if string.length == 2 && string[0] == '[' && string[1] == ']'\n    return\
    \ true if string.length == 2 && string[0] == '[' && string[1] == '['\n    return\
    \ true if string.length == 2 && string[0] == ']' && string[1] == ']'\n    return\
    \ true if string.length == 3 && string[0] == '[' && string[1] == '[' && string[2]\
    \ == ']'\n    return true if string.length == 3 && string[0] == ']' && string[1]\
    \ == ']' && string[2] == ']'\n    return true if string.length == 3 && string[0]\
    \ == '[' && string[1] == ']' && string[2] == ']'\n    return true if string.length\
    \ == 3 && string[0] == ']' && string[1] == '[' && string[2] == ']'\n    return\
    \ true if string.length == 3 && string[0] == ']' && string[1] == ']' && string[2]\
    \ == '['\n    return true if string.length == 3 && string[0] == '[' && string[1]\
    \ == ']' && string[2] == '['\n    return true if string.length == 3 && string[0]\
    \ == '[' && string[1] == '[' && string[2] == '['\n    return true if string.length\
    \ == 3 && string[0] == ']' && string[1] == ']' && string[2] == ']'\n    return\
    \ true if string.length == 3 && string[0] == ']' && string[1] == '[' && string[2]\
    \ == '['\n    return true if string.length == 3 && string[0] == '[' && string[1]\
    \ == ']' && string[2] == ']'\n    return true if string.length == 3 && string[0]\
    \ == '[' && string[1] == '[' && string[2] == ']'\n    return true if string.length\
    \ == 3 && string[0] == ']' && string[1] == '[' && string[2] == ']'\n    return\
    \ true if string\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03ban1ut.rb:30: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03ban1ut.rb:48: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.split('').each_with_index\
    \ do |char, index|\n    if char == '[' && string[index + 1] == ']'\n      return\
    \ true\n    end\n  end\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n\
    \    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"\
    []]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29_d_uxs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29_d_uxs.rb:23:in\
    \ `test_is_nested'\n     20:   def test_is_nested\n     21:     candidate = method(:is_nested)\n\
    \     22:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 23:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     24:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     25:     assert_equal(false, candidate.call(\"[]\"))\n     26: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.43 tests/s, 622.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpo33kji\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpo33kji.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.41 tests/s, 670.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length == 1\n  return\
    \ false if string.length.odd?\n  return false if string.count('[') != string.count(']')\n\
    \  return true if string.count('[') == string.count(']') && string.count('[')\
    \ > 1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz42cv3jh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz42cv3jh.rb:23:in\
    \ `test_is_nested'\n     20:     candidate = method(:is_nested)\n     21:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 23:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     24:     assert_equal(false, candidate.call(\"[]\"))\n     25: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     26:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.56 tests/s, 919.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0tchw6g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0tchw6g.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.86 tests/s, 629.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.count('[')\
    \ == string.count(']')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp51loiqa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp51loiqa.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.21 tests/s, 936.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7z3iuxvp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7z3iuxvp.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.37 tests/s, 620.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\t# return\
    \ false if string.length % 2 != 0\n\t# return false if string.length == 0\n\t\
    # return false if string.length == 2\n\t# return true if string.length > 2\n\t\
    # return true if string.length == 4\n\t# return true if string.length == 6\n\t\
    # return true if string.length == 8\n\t# return true if string.length == 10\n\t\
    # return true if string.length == 12\n\t# return true if string.length == 14\n\
    \t# return true if string.length == 16\n\t# return true if string.length == 18\n\
    \t# return true if string.length == 20\n\t# return true if string.length == 22\n\
    \t# return true if string.length == 24\n\t# return true if string.length == 26\n\
    \t# return true if string.length == 28\n\t# return true if string.length == 30\n\
    \t# return true if string.length == 32\n\t# return true if string.length == 34\n\
    \t# return true if string.length == 36\n\t# return true if string.length == 38\n\
    \t# return true if string.length == 40\n\t# return true if string.length == 42\n\
    \t# return true if string.length == 44\n\t# return true if string.length == 46\n\
    \t# return true if string.length == 48\n\t# return true if string.length == 50\n\
    \t# return true if string.length == 52\n\t# return true if string.length == 54\n\
    \t# return true if string.length == 56\n\t# return true if string.length == 58\n\
    \t# return true if string.length == 60\n\t# return true if string.length == 62\n\
    \t# return true if string.length == 64\n\t# return true if string.length == 66\n\
    \t# return true if string.length == 68\n\t# return true if string.length == 70\n\
    \t# return true if string.length == 72\n\t# return true if string.length == 74\n\
    \t# return true if string.length == 76\n\t# return true if string.length == 78\n\
    \t# return true if string.length == 80\n\t# return true if string.length == 82\n\
    \t# return true if string.length == 84\n\t# return true if string.length == 86\n\
    \t# return\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmt38ro5_.rb:59: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmt38ro5_.rb:77: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size == string.size / 2\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n\
    \    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"\
    []]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4apf7gb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4apf7gb.rb:17:in\
    \ `test_is_nested'\n     14: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n  =>\
    \ 17:     assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.89 tests/s, 297.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '')\n  string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyq4nxl8u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyq4nxl8u.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.69 tests/s, 309.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefb_z4mw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefb_z4mw.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.79 tests/s, 625.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).length > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6b59i7r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq6b59i7r.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.02769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.11 tests/s, 72.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dvknfgr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dvknfgr.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.25 tests/s, 564.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvr4m7f6z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvr4m7f6z.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.48 tests/s, 967.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tfm16z2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tfm16z2.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.038764 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.80 tests/s, 51.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd074a4a7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd074a4a7.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003131 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.39 tests/s, 638.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    if\
    \ string.count('[') == string.count(']')\n        return false\n    else\n   \
    \     return true\n    end\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "false\ntrue\nfalse\nfalse\nfalse\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpylkhgovu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpylkhgovu.rb:27:in\
    \ `test_is_nested'\n     24: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 25:   def test_is_nested\n     26:     candidate = method(:is_nested)\n  =>\
    \ 27:     assert_equal(true, candidate.call(\"[[]]\"))\n     28:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     29:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     30:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.004311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.96 tests/s, 231.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpamms4fdv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpamms4fdv.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.49 tests/s, 898.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuhuajtuu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuhuajtuu.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    249.88 tests/s, 499.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy1amwb37\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy1amwb37.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.53 tests/s, 623.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.gsub!(/\\\
    [\\]/, '')\n    string.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n\
    \    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"\
    []]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj5sy4u2l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj5sy4u2l.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.51 tests/s, 293.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxuce38v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxuce38v.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.35 tests/s, 662.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgroqcys9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgroqcys9.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003274 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.44 tests/s, 610.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolgyfez3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolgyfez3.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.017701 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.49 tests/s, 112.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdoqpy3wu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdoqpy3wu.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.75 tests/s, 905.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_27_d8q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6_27_d8q.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.36 tests/s, 208.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptsuzawwk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptsuzawwk.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.09 tests/s, 626.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr52chyd1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr52chyd1.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.89 tests/s, 625.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3k25nzb8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3k25nzb8.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.86 tests/s, 607.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46sq8aso\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46sq8aso.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.16 tests/s, 634.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpykhvjhu9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpykhvjhu9.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.039886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.07 tests/s, 50.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ql4jt45\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ql4jt45.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.12 tests/s, 572.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsiqu2_sq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsiqu2_sq.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.004703 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.63 tests/s, 425.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz3hhlf0n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz3hhlf0n.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.02 tests/s, 927.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9b73boq8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9b73boq8.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.005594 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.76 tests/s, 357.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq7o14cae\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq7o14cae.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.0084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.05 tests/s, 238.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    stack\
    \ = []\n    string.each_char do |char|\n        if char == '['\n            stack.push(char)\n\
    \        else\n            if stack.empty?\n                return false\n   \
    \         else\n                stack.pop\n            end\n        end\n    end\n\
    \    return stack.empty?\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz9shfhs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz9shfhs.rb:37:in\
    \ `test_is_nested'\n     34:     candidate = method(:is_nested)\n     35:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 37:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     38:     assert_equal(false, candidate.call(\"[]\"))\n     39: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     40:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.30 tests/s, 900.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50is01be\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp50is01be.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.10 tests/s, 640.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjugwy1j\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjugwy1j.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.014702 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.02 tests/s, 136.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjjzbxj24\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjjzbxj24.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.24 tests/s, 622.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') ? false : true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n\
    \    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"\
    []]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zk5fvaw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5zk5fvaw.rb:17:in\
    \ `test_is_nested'\n     14: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n  =>\
    \ 17:     assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.56 tests/s, 306.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpek_t148c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpek_t148c.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.41 tests/s, 608.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp54ajqtf3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp54ajqtf3.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.97 tests/s, 583.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp01l4n_he\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp01l4n_he.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003408 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.43 tests/s, 586.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2jlfq3dh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2jlfq3dh.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.011106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.04 tests/s, 180.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy74e2_12\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy74e2_12.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.31 tests/s, 640.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94d2obyh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94d2obyh.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.007004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    142.78 tests/s, 285.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.gsub!(/\\\
    [\\]/, '')\n\tstring.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb1ycpra1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb1ycpra1.rb:18:in\
    \ `test_is_nested'\n     15: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 16:   def test_is_nested\n     17:     candidate = method(:is_nested)\n  =>\
    \ 18:     assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.21 tests/s, 302.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    return\
    \ false if string.length == 0\n    return false if string.length == 1\n    return\
    \ true if string.length == 2 && string[0] == \"[\" && string[1] == \"]\"\n   \
    \ return false if string.length == 2 && string[0] != \"[\" && string[1] != \"\
    ]\"\n    return false if string.length == 2 && string[0] == \"[\" && string[1]\
    \ != \"]\"\n    return false if string.length == 2 && string[0] != \"[\" && string[1]\
    \ == \"]\"\n    return true if string.length == 3 && string[0] == \"[\" && string[1]\
    \ == \"[\" && string[2] == \"]\"\n    return true if string.length == 3 && string[0]\
    \ == \"[\" && string[1] == \"]\" && string[2] == \"]\"\n    return true if string.length\
    \ == 3 && string[0] == \"[\" && string[1] == \"]\" && string[2] == \"[\"\n   \
    \ return true if string.length == 3 && string[0] == \"]\" && string[1] == \"[\"\
    \ && string[2] == \"]\"\n    return true if string.length == 3 && string[0] ==\
    \ \"]\" && string[1] == \"]\" && string[2] == \"[\"\n    return true if string.length\
    \ == 3 && string[0] == \"]\" && string[1] == \"]\" && string[2] == \"]\"\n   \
    \ return true if string.length == 3 && string[0] == \"]\" && string[1] == \"[\"\
    \ && string[2] == \"[\"\n    return true if string.length == 3 && string[0] ==\
    \ \"[\" && string[1] == \"[\" && string[2] == \"[\"\n    return true if string.length\
    \ == 3 && string[0] == \"[\" && string[1] == \"[\" && string[2] == \"]\"\n   \
    \ return true if string.length == 3 && string[0] == \"[\" && string[1] == \"]\"\
    \ && string[2] == \"[\"\n    return true if string.length == 3 && string[0] ==\
    \ \"]\" && string[1] == \"[\" && string[2] == \"[\"\n    return true if string.length\
    \ == 3 && string[0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv92924sy.rb:29: syntax\
    \ error, unexpected local variable or method, expecting ']'\nrequire 'test/unit'\n\
    ^~~~~~~\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv92924sy.rb:30: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv92924sy.rb:48: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0biq9rwj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0biq9rwj.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.01037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.43 tests/s, 192.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3m3qat2c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3m3qat2c.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.26 tests/s, 652.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.gsub!(/\\\
    [\\]/, '') until string.gsub!(/\\[\\]/, '').nil?\n  string.empty?\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3dgm0sp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3dgm0sp.rb:20:in\
    \ `test_is_nested'\n     17:     candidate = method(:is_nested)\n     18:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     19:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 20:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     21:     assert_equal(false, candidate.call(\"[]\"))\n     22: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     23:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.17 tests/s, 924.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    count\
    \ = 0\n    string.each_char do |char|\n        if char == '['\n            count\
    \ += 1\n        elsif char == ']'\n            count -= 1\n        end\n     \
    \   if count < 0\n            return false\n        end\n    end\n    return count\
    \ == 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\n\
    puts is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppffry_aq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppffry_aq.rb:36:in\
    \ `test_is_nested'\n     33:     candidate = method(:is_nested)\n     34:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     35:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 36:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     37:     assert_equal(false, candidate.call(\"[]\"))\n     38: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     39:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.022224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.00 tests/s, 134.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return false if string.length == 1\n  return\
    \ false if string.length % 2 != 0\n  return false if string.count('[') != string.count(']')\n\
    \  return true if string.count('[') == string.count(']')\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate\
    \ = method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n   \
    \ assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2fap8qgh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2fap8qgh.rb:23:in\
    \ `test_is_nested'\n     20:     candidate = method(:is_nested)\n     21:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 23:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     24:     assert_equal(false, candidate.call(\"[]\"))\n     25: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     26:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.009466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.64 tests/s, 316.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd575wo5v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd575wo5v.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.06 tests/s, 948.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length < 2\n  return false if string.length.odd?\n  return false\
    \ if string.count('[') != string.count(']')\n  return true if string.count('[')\
    \ == 1 && string.count(']') == 1\n  return true if string.count('[') == 2 && string.count(']')\
    \ == 2\n  return true if string.count('[') == 3 && string.count(']') == 3\n  return\
    \ true if string.count('[') == 4 && string.count(']') == 4\n  return true if string.count('[')\
    \ == 5 && string.count(']') == 5\n  return true if string.count('[') == 6 && string.count(']')\
    \ == 6\n  return true if string.count('[') == 7 && string.count(']') == 7\n  return\
    \ true if string.count('[') == 8 && string.count(']') == 8\n  return true if string.count('[')\
    \ == 9 && string.count(']') == 9\n  return true if string.count('[') == 10 &&\
    \ string.count(']') == 10\n  return true if string.count('[') == 11 && string.count(']')\
    \ == 11\n  return true if string.count('[') == 12 && string.count(']') == 12\n\
    \  return true if string.count('[') == 13 && string.count(']') == 13\n  return\
    \ true if string.count('[') == 14 && string.count(']') == 14\n  return true if\
    \ string.count('[') == 15 && string.count(']') == 15\n  return true if string.count('[')\
    \ == 16 && string.count(']') == 16\n  return true if string.count('[') == 17 &&\
    \ string.count(']') == 17\n  return true if string.count('[') == 18 && string.count(']')\
    \ == 18\n  return true if string.count('[') == 19 && string.count(']') == 19\n\
    \  return true if string.count('[') == 20 && string.count(']') == 20\n  return\
    \ true if string.count('[') == 21 && string.count(']') == 21\n  return true if\
    \ string.count('[')\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjfmg0cj.rb:37: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjfmg0cj.rb:55: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tif\
    \ string.include?(\"[[\") || string.include?(\"]]\")\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\nfalse\nfalse\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4ejvxog\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4ejvxog.rb:28:in\
    \ `test_is_nested'\n     25:   def test_is_nested\n     26:     candidate = method(:is_nested)\n\
    \     27:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 28:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     29:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     30:     assert_equal(false, candidate.call(\"[]\"))\n     31: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.57 tests/s, 605.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    return\
    \ false if string.length == 0\n    return false if string.length == 1\n    return\
    \ false if string.length.odd?\n    return false if string.count('[') != string.count(']')\n\
    \    return true if string.include?('[[')\n    return true if string.include?(']]')\n\
    \    return true if string.include?('][')\n    return true if string.include?('][')\n\
    \    return false\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\nfalse\ntrue\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphfv0mbtw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphfv0mbtw.rb:33:in\
    \ `test_is_nested'\n     30:     candidate = method(:is_nested)\n     31:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     32:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 33:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     34:     assert_equal(false, candidate.call(\"[]\"))\n     35: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.85 tests/s, 932.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    return\
    \ false if string.length == 0\n    return false if string.length == 1\n    return\
    \ false if string.length % 2 != 0\n    return false if string.count('[') != string.count(']')\n\
    \    return true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp08ctkgfb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp08ctkgfb.rb:23:in\
    \ `test_is_nested'\n     20:     candidate = method(:is_nested)\n     21:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 23:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     24:     assert_equal(false, candidate.call(\"[]\"))\n     25: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     26:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.21 tests/s, 873.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\treturn\
    \ true if string.include?(\"[]\")\n\treturn false\nend\nputs is_nested('[[]]')\n\
    puts is_nested('[]]]]]]][[[[[]')\nputs is_nested('[][]')\nputs is_nested('[]')\n\
    puts is_nested('[[][]]')\nputs is_nested('[[]][[')\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjklzkke_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjklzkke_.rb:25:in\
    \ `test_is_nested'\n     22:   def test_is_nested\n     23:     candidate = method(:is_nested)\n\
    \     24:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 25:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     26:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     27:     assert_equal(false, candidate.call(\"[]\"))\n     28: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.006782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.45 tests/s, 294.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzxixey5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzxixey5.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    287.36 tests/s, 574.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).length > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoew2p4_9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoew2p4_9.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003313 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.84 tests/s, 603.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') ? false : true\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_is_nested\n    candidate = method(:is_nested)\n\
    \    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"\
    []]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjvhmxmc1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjvhmxmc1.rb:17:in\
    \ `test_is_nested'\n     14: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n  =>\
    \ 17:     assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003486 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.86 tests/s, 286.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8anrr82\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt8anrr82.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.00312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.51 tests/s, 641.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 0\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcb13s49q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcb13s49q.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.77 tests/s, 941.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    stack\
    \ = []\n    string.each_char do |char|\n        if char == '['\n            stack.push(char)\n\
    \        else\n            if stack.length == 0\n                return false\n\
    \            else\n                stack.pop\n            end\n        end\n \
    \   end\n    return stack.length == 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ite_o2b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ite_o2b.rb:37:in\
    \ `test_is_nested'\n     34:     candidate = method(:is_nested)\n     35:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     36:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 37:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     38:     assert_equal(false, candidate.call(\"[]\"))\n     39: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     40:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003272 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.62 tests/s, 916.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length < 2\n  return false if string.length % 2 != 0\n  return\
    \ false if string.count('[') != string.count(']')\n  return true if string.count('[')\
    \ == string.count(']')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6zp2x8m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps6zp2x8m.rb:22:in\
    \ `test_is_nested'\n     19:     candidate = method(:is_nested)\n     20:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     21:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 22:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     23:     assert_equal(false, candidate.call(\"[]\"))\n     24: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     25:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.18 tests/s, 867.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp83wp8ou5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp83wp8ou5.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.14 tests/s, 660.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  return\
    \ false if string.length == 0\n  return true if string.length == 2\n  return false\
    \ if string.length == 1\n  return true if string.length == 4\n  return false if\
    \ string.length == 3\n  return true if string.length == 6\n  return false if string.length\
    \ == 5\n  return true if string.length == 8\n  return false if string.length ==\
    \ 7\n  return true if string.length == 10\n  return false if string.length ==\
    \ 9\n  return true if string.length == 12\n  return false if string.length ==\
    \ 11\n  return true if string.length == 14\n  return false if string.length ==\
    \ 13\n  return true if string.length == 16\n  return false if string.length ==\
    \ 15\n  return true if string.length == 18\n  return false if string.length ==\
    \ 17\n  return true if string.length == 20\n  return false if string.length ==\
    \ 19\n  return true if string.length == 22\n  return false if string.length ==\
    \ 21\n  return true if string.length == 24\n  return false if string.length ==\
    \ 23\n  return true if string.length == 26\n  return false if string.length ==\
    \ 25\n  return true if string.length == 28\n  return false if string.length ==\
    \ 27\n  return true if string.length == 30\n  return false if string.length ==\
    \ 29\n  return true if string.length == 32\n  return false if string.length ==\
    \ 31\n  return true if string.length == 34\n  return false if string.length ==\
    \ 33\n  return true if string.length == 36\n  return false if string.length ==\
    \ 35\n  return true if string.length == 38\n  return false if string.length ==\
    \ 37\n  return true if string.length == 40\n  return false if string.length ==\
    \ 39\n  return true if string.length == 42\n  return false if string.length ==\
    \ 41\n  return true if string.length == 44\n  return false if string.length ==\
    \ 43\n  return true if string.length == 46\n  return false if string.length ==\
    \ 45\n  return true if string.length == 48\n  return false if string.length ==\
    \ 47\n  return true if string.length == 50\n  return false if string.length ==\
    \ 49\n \nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_woa5yg.rb:64: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj_woa5yg.rb:82: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n\tstring.scan(/\\\
    [\\]/).size > 0\nend\np is_nested('[[]]')\np is_nested('[]]]]]]][[[[[]')\np is_nested('[][]')\n\
    p is_nested('[]')\np is_nested('[[][]]')\np is_nested('[[]][[')\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate\
    \ = method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n   \
    \ assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjmkbi96w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjmkbi96w.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003129 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.59 tests/s, 639.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.scan(/\\\
    [\\]/).size > 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_is_nested\n    candidate = method(:is_nested)\n    assert_equal(true,\
    \ candidate.call(\"[[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[][]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]\"))\n    assert_equal(true, candidate.call(\"[[[[]]]]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true,\
    \ candidate.call(\"[][][[]]\"))\n    assert_equal(false, candidate.call(\"[[]\"\
    ))\n    assert_equal(false, candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"\
    [[]][[\"))\n    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false,\
    \ candidate.call(\"\"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n\
    \    assert_equal(false, candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiz6ex1_6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiz6ex1_6.rb:18:in\
    \ `test_is_nested'\n     15:   def test_is_nested\n     16:     candidate = method(:is_nested)\n\
    \     17:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.002901 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    344.71 tests/s, 689.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    if\
    \ string.count('[') == string.count(']')\n        return false\n    else\n   \
    \     return true\n    end\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "false\ntrue\nfalse\nfalse\nfalse\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6i1y5qvo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6i1y5qvo.rb:27:in\
    \ `test_is_nested'\n     24: class TestHumanEval < Test::Unit::TestCase\n    \
    \ 25:   def test_is_nested\n     26:     candidate = method(:is_nested)\n  =>\
    \ 27:     assert_equal(true, candidate.call(\"[[]]\"))\n     28:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     29:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     30:     assert_equal(false, candidate.call(\"[]\"))\n<true> expected\
    \ but was\n<false>\n\ndiff:\n? tru e\n? fals \n? ??? \n===============================================================================\n\
    \nFinished in 0.003144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.07 tests/s, 318.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n  string.count('[')\
    \ == string.count(']') && string.count('[') > 1\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n    candidate =\
    \ method(:is_nested)\n    assert_equal(true, candidate.call(\"[[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false, candidate.call(\"\
    [][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n    assert_equal(true,\
    \ candidate.call(\"[[[[]]]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]]]]]\"\
    ))\n    assert_equal(true, candidate.call(\"[][][[]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[[]\"))\n    assert_equal(false, candidate.call(\"[]]\"))\n\
    \    assert_equal(true, candidate.call(\"[[]][[\"))\n    assert_equal(true, candidate.call(\"\
    [[][]]\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(false,\
    \ candidate.call(\"[[[[[[[[\"))\n    assert_equal(false, candidate.call(\"]]]]]]]]\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4helg1r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg4helg1r.rb:19:in\
    \ `test_is_nested'\n     16:     candidate = method(:is_nested)\n     17:    \
    \ assert_equal(true, candidate.call(\"[[]]\"))\n     18:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n  => 19:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     20:     assert_equal(false, candidate.call(\"[]\"))\n     21: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n     22:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n<false> expected but was\n<true>\n\ndiff:\n\
    ? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.003153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.16 tests/s, 951.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes a string as input which contains only square\
    \ brackets.\n# The function should return True if and only if there is a valid\
    \ subsequence of brackets \n# where at least one bracket in the subsequence is\
    \ nested.\n# is_nested('[[]]') \u279E True\n# is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n# is_nested('[][]') \u279E False\n# is_nested('[]') \u279E False\n# is_nested('[[][]]')\
    \ \u279E True\n# is_nested('[[]][[') \u279E True\ndef is_nested(string)\n    string.scan(/\\\
    [\\]/).length > 0\nend\nputs is_nested('[[]]')\nputs is_nested('[]]]]]]][[[[[]')\n\
    puts is_nested('[][]')\nputs is_nested('[]')\nputs is_nested('[[][]]')\nputs is_nested('[[]][[')\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_nested\n\
    \    candidate = method(:is_nested)\n    assert_equal(true, candidate.call(\"\
    [[]]\"))\n    assert_equal(false, candidate.call(\"[]]]]]]][[[[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[][]\"))\n    assert_equal(false, candidate.call(\"[]\"))\n\
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]]]]]]]]]\"))\n    assert_equal(true, candidate.call(\"[][][[]]\"\
    ))\n    assert_equal(false, candidate.call(\"[[]\"))\n    assert_equal(false,\
    \ candidate.call(\"[]]\"))\n    assert_equal(true, candidate.call(\"[[]][[\"))\n\
    \    assert_equal(true, candidate.call(\"[[][]]\"))\n    assert_equal(false, candidate.call(\"\
    \"))\n    assert_equal(false, candidate.call(\"[[[[[[[[\"))\n    assert_equal(false,\
    \ candidate.call(\"]]]]]]]]\"))\n  end\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\nLoaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06001b89\n\
    Started\nF\n===============================================================================\n\
    Failure: test_is_nested(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp06001b89.rb:24:in\
    \ `test_is_nested'\n     21:   def test_is_nested\n     22:     candidate = method(:is_nested)\n\
    \     23:     assert_equal(true, candidate.call(\"[[]]\"))\n  => 24:     assert_equal(false,\
    \ candidate.call(\"[]]]]]]][[[[[]\"))\n     25:     assert_equal(false, candidate.call(\"\
    [][]\"))\n     26:     assert_equal(false, candidate.call(\"[]\"))\n     27: \
    \    assert_equal(true, candidate.call(\"[[[[]]]]\"))\n<false> expected but was\n\
    <true>\n\ndiff:\n? false\n? tru  \n? ????  \n===============================================================================\n\
    \nFinished in 0.002753 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    363.24 tests/s, 726.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
