name: HumanEval_92_any_int
language: ruby
results:
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return false if x.is_a?(Float)\
    \ || y.is_a?(Float) || z.is_a?(Float)\n  x == y + z || y == x + z || z == x +\
    \ y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_any_int\n    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2,\
    \ 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyrlnktj\n\
    Started\n.\nFinished in 0.000351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2849.00 tests/s, 28490.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t81kmld\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t81kmld.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.66 tests/s, 931.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpucmctp0p\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 44444.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcs0ify1z\n\
    Started\n.\nFinished in 0.00031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3225.81 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppfv9klq4\n\
    Started\n.\nFinished in 0.000253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3952.57 tests/s, 39525.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpblk_0b0h\n\
    Started\n.\nFinished in 0.000306 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3267.97 tests/s, 32679.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwd7jcyk4\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 41322.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxub6wbyv\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 41322.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    x + y == z || x + z == y || y + z == x\n  else\n  \
    \  false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2a287kkl\n\
    Started\n.\nFinished in 0.003836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    260.69 tests/s, 2606.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x == y + z || y == x + z || z == x + y)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl45cgpl7\n\
    Started\n.\nFinished in 0.000301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3322.26 tests/s, 33222.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu8fmj3pk\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 40983.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31_kbv5u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31_kbv5u.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.00384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    260.42 tests/s, 781.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyaez3fjo\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 44052.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72sjrihc\n\
    Started\n.\nFinished in 0.000301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3322.26 tests/s, 33222.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return true if x == y + z ||\
    \ y == x + z || z == x + y\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpruk7k3zp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpruk7k3zp.rb:19:in\
    \ `test_any_int'\n     16:     candidate = method(:any_int)\n     17:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     18:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 19:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 20:     assert_equal(false, candidate.call(2, 6, 2))\n     21:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     22:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.004393 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.63 tests/s, 682.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    return true if x == y + z || y == x + z || z == x +\
    \ y\n  end\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa_548fz3\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 46082.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1242_k77\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1242_k77.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.004612 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.83 tests/s, 650.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp598vtcun\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp598vtcun.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.59 tests/s, 802.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgsptxrte\n\
    Started\n.\nFinished in 0.000382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2617.80 tests/s, 26178.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1iekni3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1iekni3.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.04 tests/s, 858.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n    if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n        if x == y + z || y == x + z || z == x + y\n   \
    \         return true\n        else\n            return false\n        end\n \
    \   else\n        return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9n4rwx0l\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 42553.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjgqdy6r8\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 40160.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyl1lfg2b\n\
    Started\n.\nFinished in 0.000793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1261.03 tests/s, 12610.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return true if x == y + z ||\
    \ y == x + z || z == x + y\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp692azbna\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp692azbna.rb:19:in\
    \ `test_any_int'\n     16:     candidate = method(:any_int)\n     17:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     18:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 19:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 20:     assert_equal(false, candidate.call(2, 6, 2))\n     21:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     22:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.05557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    18.00 tests/s, 53.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gupzw5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gupzw5.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003259 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.84 tests/s, 920.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsavqfdb\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 42735.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa2rxk0cd\n\
    Started\n.\nFinished in 0.000293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3412.97 tests/s, 34129.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94lnairg\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 40000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_sqzxxag\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 39370.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmparu8b32f\n\
    Started\n.\nFinished in 0.000276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3623.19 tests/s, 36231.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if (x.is_a? Integer) && (y.is_a?\
    \ Integer) && (z.is_a? Integer)\n    if (x + y == z) || (x + z == y) || (y + z\
    \ == x)\n      return true\n    else\n      return false\n    end\n  else\n  \
    \  return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv_03_mbu\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 46296.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfqj62ref\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 47393.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq42vg408\n\
    Started\n.\nFinished in 0.000246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4065.04 tests/s, 40650.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0jh57vgk\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 44444.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprilrxt0d\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 47169.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvtuenr6x\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 45454.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2ctq3m7t\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 44052.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdw0g50wx\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 41493.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    x + y == z || x + z == y || y + z == x\n  else\n  \
    \  false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwf3k92sd\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 40160.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxg2p7nia\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 46082.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmc21787s\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 42016.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n    if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n        if x == y + z || y == x + z || z == x + y\n   \
    \         return true\n        else\n            return false\n        end\n \
    \   else\n        return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnwq4wah9\n\
    Started\n.\nFinished in 0.000316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3164.56 tests/s, 31645.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x == y + z || y == x + z || z == x + y)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo66v1ygj\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 46728.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjsfku74p\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 46728.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwzi43uy3\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 42194.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppr4jyfs8\n\
    Started\n.\nFinished in 0.000243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4115.23 tests/s, 41152.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if (x.is_a? Integer) && (y.is_a?\
    \ Integer) && (z.is_a? Integer)\n    if (x + y == z) || (x + z == y) || (y + z\
    \ == x)\n      return true\n    else\n      return false\n    end\n  else\n  \
    \  return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpce46cmz3\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 44444.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnq5_l_0\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 43103.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx2m138o9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx2m138o9.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003522 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.93 tests/s, 851.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46xll9z8\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 43668.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return true if x == y + z ||\
    \ y == x + z || z == x + y\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdh6onxf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdh6onxf.rb:19:in\
    \ `test_any_int'\n     16:     candidate = method(:any_int)\n     17:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     18:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 19:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 20:     assert_equal(false, candidate.call(2, 6, 2))\n     21:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     22:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.005266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.90 tests/s, 569.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2ujlddp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc2ujlddp.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.84 tests/s, 902.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiljlzq1d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiljlzq1d.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003803 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.95 tests/s, 788.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  (x + y == z) || (x + z == y)\
    \ || (y + z == x)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ps9cllu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ps9cllu.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.07144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    14.00 tests/s, 41.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if (x.is_a? Integer) && (y.is_a?\
    \ Integer) && (z.is_a? Integer)\n    if (x + y == z) || (x + z == y) || (y + z\
    \ == x)\n      return true\n    else\n      return false\n    end\n  else\n  \
    \  return false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp215wnjuo\n\
    Started\n.\nFinished in 0.001147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    871.84 tests/s, 8718.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnm1ysiqd\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 40322.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprf96kaxa\n\
    Started\n.\nFinished in 0.000666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1501.50 tests/s, 15015.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_rn6i2a\n\
    Started\n.\nFinished in 0.00036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2777.78 tests/s, 27777.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdx9x6wpw\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 43478.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxlxypqxg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxlxypqxg.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.77 tests/s, 866.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x ? true : false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19txkmtc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp19txkmtc.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.009291 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.63 tests/s, 322.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n    return (x == y + z) || (y ==\
    \ x + z) || (z == x + y)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ijbqlpr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ijbqlpr.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.008916 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.16 tests/s, 336.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9y7ak6_a\n\
    Started\n.\nFinished in 0.000245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4081.63 tests/s, 40816.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0zsxyibk\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 41322.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyxum7j5\n\
    Started\n.\nFinished in 0.000257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3891.05 tests/s, 38910.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpop7b7e_n\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 40160.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n\tif x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n\t\tif x == y + z || y == x + z || z == x + y\n\t\t\treturn\
    \ true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf7meiqlj\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 40160.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcl1ocgsp\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 41322.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpooghhx51\n\
    Started\n.\nFinished in 0.001364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    733.14 tests/s, 7331.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n    if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n        if x == y + z || y == x + z || z == x + y\n   \
    \         return true\n        else\n            return false\n        end\n \
    \   else\n        return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeajvknt2\n\
    Started\n.\nFinished in 0.000248 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4032.26 tests/s, 40322.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpki17shvp\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 43103.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_h3ihmu\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 42372.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszve2euk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszve2euk.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.021925 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    45.61 tests/s, 136.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfurarsv4\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 41841.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1zxdpn3f\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 42372.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x == y + z || y == x + z || z\
    \ == x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88mahl0_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88mahl0_.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.006238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.31 tests/s, 480.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8k_jxshs\n\
    Started\n.\nFinished in 0.001645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    607.90 tests/s, 6079.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfca3zfea\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfca3zfea.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.00467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.13 tests/s, 642.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpej86rt9_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpej86rt9_.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.004426 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.94 tests/s, 677.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x == y + z || y == x + z ||\
    \ z == x + y\n    true\n  else\n    false\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwnon4d_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprwnon4d_.rb:22:in\
    \ `test_any_int'\n     19:     candidate = method(:any_int)\n     20:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     21:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 22:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 23:     assert_equal(false, candidate.call(2, 6, 2))\n     24:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     25:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.005098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.16 tests/s, 588.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0tcb31i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe0tcb31i.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003911 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.69 tests/s, 767.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3_xzfd24\n\
    Started\n.\nFinished in 0.000621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1610.31 tests/s, 16103.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzpntjgv\n\
    Started\n.\nFinished in 0.000881 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1135.07 tests/s, 11350.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgllnwdaa\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 44843.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4d9jzn9f\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 40485.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc16yurxr\n\
    Started\n.\nFinished in 0.000644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1552.80 tests/s, 15527.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnz18gj_\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 42735.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8849p4qv\n\
    Started\n.\nFinished in 0.000725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1379.31 tests/s, 13793.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x + y == z || x + z == y || y + z == x\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprn9o366u\n\
    Started\n.\nFinished in 0.000379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2638.52 tests/s, 26385.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplwihhcv\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 45045.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9g45oegn\n\
    Started\n.\nFinished in 0.000644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1552.80 tests/s, 15527.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3yxstj7i\n\
    Started\n.\nFinished in 0.000225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4444.44 tests/s, 44444.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7kqbrzvx\n\
    Started\n.\nFinished in 0.000343 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2915.45 tests/s, 29154.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n\tif x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n\t\tif x == y + z || y == x + z || z == x + y\n\t\t\treturn\
    \ true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr2d0_ns4\n\
    Started\n.\nFinished in 0.000338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2958.58 tests/s, 29585.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzp1r0_51\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 42553.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8meq8dxn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8meq8dxn.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.75 tests/s, 905.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynuqmgss\n\
    Started\n.\nFinished in 0.000716 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1396.65 tests/s, 13966.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0d5fzybg\n\
    Started\n.\nFinished in 0.001042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    959.69 tests/s, 9596.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2cpkr_5h\n\
    Started\n.\nFinished in 0.000293 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3412.97 tests/s, 34129.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzf9arj4l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzf9arj4l.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.008206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.86 tests/s, 365.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpubkke_0d\n\
    Started\n.\nFinished in 0.000319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.80 tests/s, 31347.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return true if x == y + z ||\
    \ y == x + z || z == x + y\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvyqru_m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvyqru_m.rb:19:in\
    \ `test_any_int'\n     16:     candidate = method(:any_int)\n     17:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     18:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 19:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 20:     assert_equal(false, candidate.call(2, 6, 2))\n     21:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     22:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.006596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.61 tests/s, 454.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpybaoi64n\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 42372.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x == y + z || y == x + z || z == x + y)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_cr1zrh\n\
    Started\n.\nFinished in 0.00385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    259.74 tests/s, 2597.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpju04jlwu\n\
    Started\n.\nFinished in 0.000236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4237.29 tests/s, 42372.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return true if x == y + z ||\
    \ y == x + z || z == x + y\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf3rolpb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcf3rolpb.rb:19:in\
    \ `test_any_int'\n     16:     candidate = method(:any_int)\n     17:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     18:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 19:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 20:     assert_equal(false, candidate.call(2, 6, 2))\n     21:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     22:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.93 tests/s, 926.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return true if x == y + z ||\
    \ y == x + z || z == x + y\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqpjykq5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzqpjykq5.rb:19:in\
    \ `test_any_int'\n     16:     candidate = method(:any_int)\n     17:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     18:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 19:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 20:     assert_equal(false, candidate.call(2, 6, 2))\n     21:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     22:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.86 tests/s, 947.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphbb1kifi\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 44843.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    x + y == z || x + z == y || y + z == x\n  else\n  \
    \  false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzv6q1y3l\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 45454.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    x + y == z || x + z == y || y + z == x\n  else\n  \
    \  false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt_px2lu\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 43290.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyou1d1jv\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 46511.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if (x + y == z) || (x + z ==\
    \ y) || (y + z == x)\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw64zsa2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw64zsa2.rb:22:in\
    \ `test_any_int'\n     19:     candidate = method(:any_int)\n     20:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     21:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 22:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 23:     assert_equal(false, candidate.call(2, 6, 2))\n     24:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     25:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.30 tests/s, 936.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpylua17wg\n\
    Started\n.\nFinished in 0.000238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4201.68 tests/s, 42016.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxdpqe_t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxdpqe_t.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003159 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.56 tests/s, 949.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1np4i78q\n\
    Started\n.\nFinished in 0.000349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2865.33 tests/s, 28653.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp1fer0q8\n\
    Started\n.\nFinished in 0.000234 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4273.50 tests/s, 42735.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaggdjla\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoaggdjla.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.008233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.46 tests/s, 364.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x == y + z || y == x + z || z\
    \ == x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjed6peu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjed6peu.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.131006 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    7.63 tests/s, 22.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi54orkf_\n\
    Started\n.\nFinished in 0.000627 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1594.90 tests/s, 15948.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7loyox8v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7loyox8v.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.090464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    11.05 tests/s, 33.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe174crj0\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 41493.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo0oj4mw0\n\
    Started\n.\nFinished in 0.00042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2380.95 tests/s, 23809.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg2cp3ct6\n\
    Started\n.\nFinished in 0.000554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1805.05 tests/s, 18050.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvf3ol434\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 43103.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    x + y == z || x + z == y || y + z == x\n  else\n  \
    \  false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpil1jndzh\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 44642.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x == y + z || y == x + z || z == x + y)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7132p5d\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 43290.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4cduybv\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 42918.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn3u7b0cw\n\
    Started\n.\nFinished in 0.00025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4000.00 tests/s, 40000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjt6viviy\n\
    Started\n.\nFinished in 0.000242 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4132.23 tests/s, 41322.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      true\n\
    \    else\n      false\n    end\n  else\n    false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate\
    \ = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false,\
    \ candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n\
    \    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4,\
    \ 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_t_72bx\n\
    Started\n.\nFinished in 0.000543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1841.62 tests/s, 18416.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1aipf0yg\n\
    Started\n.\nFinished in 0.000226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4424.78 tests/s, 44247.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuymvakrt\n\
    Started\n.\nFinished in 0.000281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3558.72 tests/s, 35587.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp98s9zup4\n\
    Started\n.\nFinished in 0.000366 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2732.24 tests/s, 27322.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpabukmwcv\n\
    Started\n.\nFinished in 0.002498 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    400.32 tests/s, 4003.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7gedh0pl\n\
    Started\n.\nFinished in 0.004084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    244.86 tests/s, 2448.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x == y + z || y == x + z || z\
    \ == x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwmf0y7r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuwmf0y7r.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.007628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.10 tests/s, 393.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x == y + z || y == x + z || z\
    \ == x + y ? true : false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprjcfwizg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprjcfwizg.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.005284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.25 tests/s, 567.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx_8yy3fz\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 45871.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcq0wgu6_\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 42918.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t0fuz7_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1t0fuz7_.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.00331 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.11 tests/s, 906.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return true if x == y + z ||\
    \ y == x + z || z == x + y\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7va0gfwo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7va0gfwo.rb:19:in\
    \ `test_any_int'\n     16:     candidate = method(:any_int)\n     17:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     18:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 19:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 20:     assert_equal(false, candidate.call(2, 6, 2))\n     21:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     22:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.00334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.40 tests/s, 898.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0thd3p8k\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 39370.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x + y == z || x + z == y || y + z == x\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp86zpwm83\n\
    Started\n.\nFinished in 0.001992 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    502.01 tests/s, 5020.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04c0zy8y\n\
    Started\n.\nFinished in 0.000384 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2604.17 tests/s, 26041.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return false if x.is_a?(Float)\
    \ || y.is_a?(Float) || z.is_a?(Float)\n  return true if x == y + z || y == x +\
    \ z || z == x + y\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ja_84eo\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 43103.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4t7fioz7\n\
    Started\n.\nFinished in 0.000473 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2114.16 tests/s, 21141.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1v0x2hrg\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 40983.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqt8xphmc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqt8xphmc.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.04176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.95 tests/s, 71.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyjeatey\n\
    Started\n.\nFinished in 0.00212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    471.70 tests/s, 4716.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x == y + z || y == x + z || z\
    \ == x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpek3mwysd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpek3mwysd.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.006602 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.47 tests/s, 454.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2l9i67gb\n\
    Started\n.\nFinished in 0.002555 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    391.39 tests/s, 3913.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x == y + z || y == x + z || z == x + y)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb5pg1zkg\n\
    Started\n.\nFinished in 0.00024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4166.67 tests/s, 41666.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpduc8ks2_\n\
    Started\n.\nFinished in 0.000228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4385.96 tests/s, 43859.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return true if x == y + z ||\
    \ y == x + z || z == x + y\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c8z7ns5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8c8z7ns5.rb:19:in\
    \ `test_any_int'\n     16:     candidate = method(:any_int)\n     17:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     18:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 19:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 20:     assert_equal(false, candidate.call(2, 6, 2))\n     21:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     22:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.07 tests/s, 819.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  (x + y == z) || (x + z == y)\
    \ || (y + z == x)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvofl83uy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvofl83uy.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.41 tests/s, 826.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvprbyig\n\
    Started\n.\nFinished in 0.001863 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    536.77 tests/s, 5367.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmxt67hzy\n\
    Started\n.\nFinished in 0.000877 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1140.25 tests/s, 11402.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x + y == z || x + z == y || y + z == x\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwe0l1jh\n\
    Started\n.\nFinished in 0.00031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3225.81 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    x + y == z || x + z == y || y + z == x\n  else\n  \
    \  false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgd864yv4\n\
    Started\n.\nFinished in 0.000324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3086.42 tests/s, 30864.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjbkvizp7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjbkvizp7.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.015147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.02 tests/s, 198.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ckbwnoj\n\
    Started\n.\nFinished in 0.001282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    780.03 tests/s, 7800.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyfpl1k7v\n\
    Started\n.\nFinished in 0.000285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3508.77 tests/s, 35087.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n67swlk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7n67swlk.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.007107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.71 tests/s, 422.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    x + y == z || x + z == y || y + z == x\n  else\n  \
    \  false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwxy5_4qm\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 45045.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqsrm67gg\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 40983.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzm4feui\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 42194.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj14g6r_z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj14g6r_z.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    296.21 tests/s, 888.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6oa3rd0g\n\
    Started\n.\nFinished in 0.008967 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    111.52 tests/s, 1115.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n    if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n        if x == y + z || y == x + z || z == x + y\n   \
    \         return true\n        else\n            return false\n        end\n \
    \   else\n        return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl0xtldl7\n\
    Started\n.\nFinished in 0.000712 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1404.49 tests/s, 14044.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5_konwk\n\
    Started\n.\nFinished in 0.036295 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    27.55 tests/s, 275.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      true\n\
    \    else\n      false\n    end\n  else\n    false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate\
    \ = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false,\
    \ candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n\
    \    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4,\
    \ 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6nz9fdr1\n\
    Started\n.\nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 3139.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpino1we6r\n\
    Started\n.\nFinished in 0.000322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3105.59 tests/s, 31055.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1yyqqi9\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 46296.30 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x == y + z || y == x + z || z\
    \ == x + y ? true : false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpchh69uoi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpchh69uoi.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.62 tests/s, 859.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyv6zyh4\n\
    Started\n.\nFinished in 0.00441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    226.76 tests/s, 2267.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x == y + z || y == x + z || z == x + y)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vdoshog\n\
    Started\n.\nFinished in 0.000244 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4098.36 tests/s, 40983.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzu64g63\n\
    Started\n.\nFinished in 0.00023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4347.83 tests/s, 43478.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if (x + y == z) || (x + z ==\
    \ y) || (y + z == x)\n    return true\n  else\n    return false\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxn5dqvld\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxn5dqvld.rb:22:in\
    \ `test_any_int'\n     19:     candidate = method(:any_int)\n     20:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     21:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 22:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 23:     assert_equal(false, candidate.call(2, 6, 2))\n     24:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     25:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.045276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    22.09 tests/s, 66.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      true\n\
    \    else\n      false\n    end\n  else\n    false\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n    candidate\
    \ = method(:any_int)\n    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false,\
    \ candidate.call(2.5, 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n\
    \    assert_equal(false, candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4,\
    \ 2, 2))\n    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg1asut48\n\
    Started\n.\nFinished in 0.000233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4291.85 tests/s, 42918.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp46502pa\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 45045.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgfol2v6r\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 44843.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnw2qjip7\n\
    Started\n.\nFinished in 0.0004 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2500.00 tests/s, 25000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x + y == z || x + z == y || y\
    \ + z == x\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9bj3duc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu9bj3duc.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003182 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.27 tests/s, 942.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgvd753nc\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 47393.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x == y + z || y == x + z || z == x + y)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb55tv7m6\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 45454.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptpkolowq\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 44642.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    x + y == z || x + z == y || y + z == x\n  else\n  \
    \  false\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc7b72cj0\n\
    Started\n.\nFinished in 0.000223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4484.30 tests/s, 44843.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  (x + y == z) || (x + z == y)\
    \ || (y + z == x)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphszwhpl8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphszwhpl8.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003907 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.95 tests/s, 767.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return false if x.is_a?(Float)\
    \ || y.is_a?(Float) || z.is_a?(Float)\n  return true if x == y + z || y == x +\
    \ z || z == x + y\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1zzaqkyj\n\
    Started\n.\nFinished in 0.000247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4048.58 tests/s, 40485.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x == y + z || y == x + z || z\
    \ == x + y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_any_int\n    candidate = method(:any_int)\n    assert_equal(true,\
    \ candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n\
    \    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn972vc1f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn972vc1f.rb:18:in\
    \ `test_any_int'\n     15:     candidate = method(:any_int)\n     16:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     17:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 18:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 19:     assert_equal(false, candidate.call(2, 6, 2))\n     20:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     21:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.003199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.60 tests/s, 937.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return true if x == y + z ||\
    \ y == x + z || z == x + y\n  return false\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_any_int\n    candidate = method(:any_int)\n\
    \    assert_equal(true, candidate.call(2, 3, 1))\n    assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n    assert_equal(false, candidate.call(1.5, 5, 3.5))\n    assert_equal(false,\
    \ candidate.call(2, 6, 2))\n    assert_equal(true, candidate.call(4, 2, 2))\n\
    \    assert_equal(false, candidate.call(2.2, 2.2, 2.2))\n    assert_equal(true,\
    \ candidate.call(-4, 6, 2))\n    assert_equal(true, candidate.call(2, 1, 1))\n\
    \    assert_equal(true, candidate.call(3, 4, 7))\n    assert_equal(false, candidate.call(3.0,\
    \ 4, 7))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwjwyukv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_any_int(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwjwyukv.rb:19:in\
    \ `test_any_int'\n     16:     candidate = method(:any_int)\n     17:     assert_equal(true,\
    \ candidate.call(2, 3, 1))\n     18:     assert_equal(false, candidate.call(2.5,\
    \ 2, 3))\n  => 19:     assert_equal(false, candidate.call(1.5, 5, 3.5))\n    \
    \ 20:     assert_equal(false, candidate.call(2, 6, 2))\n     21:     assert_equal(true,\
    \ candidate.call(4, 2, 2))\n     22:     assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n<false> expected but was\n<true>\n\ndiff:\n? false\n? tru  \n? ????\
    \  \n===============================================================================\n\
    \nFinished in 0.004481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.16 tests/s, 669.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer) && (x + y == z || x + z == y || y + z == x)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp21wq42nm\n\
    Started\n.\nFinished in 0.000271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3690.04 tests/s, 36900.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwf1tw41c\n\
    Started\n.\nFinished in 0.000396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2525.25 tests/s, 25252.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnpfw5m_b\n\
    Started\n.\nFinished in 0.000327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3058.10 tests/s, 30581.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgl1pryvl\n\
    Started\n.\nFinished in 0.000235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4255.32 tests/s, 42553.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  return false if x.is_a?(Float)\
    \ || y.is_a?(Float) || z.is_a?(Float)\n  x == y + z || y == x + z || z == x +\
    \ y\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_any_int\n    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2,\
    \ 3, 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb7oiaaqq\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 41493.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpklbmts96\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 41493.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9k8u7z6a\n\
    Started\n.\nFinished in 0.000315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3174.60 tests/s, 31746.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp424q71bo\n\
    Started\n.\nFinished in 0.000229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4366.81 tests/s, 43668.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Create a function that takes 3 numbers.\n# Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    # Returns false in any other cases.\n# Examples\n# any_int(5, 2, 7) \u279E True\n\
    # any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E True\n# any_int(3.6,\
    \ -2.2, 2) \u279E False\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer)\
    \ && z.is_a?(Integer)\n    if x == y + z || y == x + z || z == x + y\n      return\
    \ true\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_any_int\n\
    \    candidate = method(:any_int)\n    assert_equal(true, candidate.call(2, 3,\
    \ 1))\n    assert_equal(false, candidate.call(2.5, 2, 3))\n    assert_equal(false,\
    \ candidate.call(1.5, 5, 3.5))\n    assert_equal(false, candidate.call(2, 6, 2))\n\
    \    assert_equal(true, candidate.call(4, 2, 2))\n    assert_equal(false, candidate.call(2.2,\
    \ 2.2, 2.2))\n    assert_equal(true, candidate.call(-4, 6, 2))\n    assert_equal(true,\
    \ candidate.call(2, 1, 1))\n    assert_equal(true, candidate.call(3, 4, 7))\n\
    \    assert_equal(false, candidate.call(3.0, 4, 7))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuxz2sq04\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 10 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 46948.36 assertions/s\n"
  exit_code: 0
  status: OK
