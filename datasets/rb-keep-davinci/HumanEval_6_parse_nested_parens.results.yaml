name: HumanEval_6_parse_nested_parens
language: ruby
results:
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_w0bvzfp\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp_w0bvzfp.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005122572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.21 tests/s, 195.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, paren|\n\
    \      case paren\n      when '('\n        max_depth + 1\n      when ')'\n   \
    \     max_depth - 1\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt9fy2_iu\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpt9fy2_iu.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00541403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.71 tests/s, 184.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf6ic9ds5\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpf6ic9ds5.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005248229 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.54 tests/s, 190.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp67g3r1p2\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp67g3r1p2.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.00615337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.51 tests/s, 162.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxu5mefiy\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpxu5mefiy.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004745463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.73 tests/s, 210.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdwmjwba8\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpdwmjwba8.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005196711 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.43 tests/s, 192.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkpvyukvn\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpkpvyukvn.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006088649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    164.24 tests/s, 164.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6tz79veo\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp6tz79veo.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005443916 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.69 tests/s, 183.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n     \
    \ if char == '('\n        max_depth + 1\n      elsif char == ')'\n        max_depth\
    \ - 1\n      else\n        max_depth\n      end\n    }\n  }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsn3w9pmt\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpsn3w9pmt.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005577296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.30 tests/s, 179.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   char == '(' ? max_depth + 1 : max_depth - 1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb3_kllp4\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpb3_kllp4.rb:17:in `test_parse_nested_parens'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_parse_nested_parens\n\
    \     16:     candidate = method(:parse_nested_parens)\n  => 17:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     19:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     20:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005586664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.00 tests/s, 179.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n     \
    \ char == '(' ? max_depth + 1 : max_depth - 1\n    }\n  }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfhd1jq08\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpfhd1jq08.rb:17:in `test_parse_nested_parens'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_parse_nested_parens\n\
    \     16:     candidate = method(:parse_nested_parens)\n  => 17:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     19:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     20:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005508948 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.52 tests/s, 181.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphx_uxlgb\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmphx_uxlgb.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.007672987 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    130.33 tests/s, 130.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp97s4g7o8\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp97s4g7o8.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006526732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.22 tests/s, 153.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Write your code\
    \ here\n  result = []\n  paren_string.split(' ').each do |paren|\n    result <<\
    \ paren.scan(/\\(/).size\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzfsy5j1w\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpzfsy5j1w.rb:18:in `test_parse_nested_parens'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_parse_nested_parens\n\
    \     17:     candidate = method(:parse_nested_parens)\n  => 18:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     19:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     20:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     21:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006131599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.09 tests/s, 163.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, paren|\n\
    \      paren == '(' ? max_nesting + 1 : max_nesting - 1\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplm5ctldn\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmplm5ctldn.rb:17:in `test_parse_nested_parens'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_parse_nested_parens\n\
    \     16:     candidate = method(:parse_nested_parens)\n  => 17:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     19:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     20:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006681463 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.67 tests/s, 149.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnaxvkeaw\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpnaxvkeaw.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00546734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.90 tests/s, 182.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc15na8kd\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpc15na8kd.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005583659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.09 tests/s, 179.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n  \
    \    if char == '('\n        acc += 1\n      elsif char == ')'\n        acc -=\
    \ 1\n      end\n      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxok72408\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpxok72408.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00511117 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.65 tests/s, 195.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.scan(/\\(/).size }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmwg85_mt\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpmwg85_mt.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005305355 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.49 tests/s, 188.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph9rv6ljs\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmph9rv6ljs.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005354449 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.76 tests/s, 186.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      max_depth\
    \ += 1 if char == '('\n      max_depth -= 1 if char == ')'\n      max_depth\n\
    \    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1ewhnqlk\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp1ewhnqlk.rb:19:in `test_parse_nested_parens'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_parse_nested_parens\n\
    \     18:     candidate = method(:parse_nested_parens)\n  => 19:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     20:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     21:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     22:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00539835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.24 tests/s, 185.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa5r_w20e\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpa5r_w20e.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005603346 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.46 tests/s, 178.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph1w_94x5\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmph1w_94x5.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005713212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.03 tests/s, 175.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n   \
    \   if char == '('\n        max_level += 1\n      elsif char == ')'\n        max_level\
    \ -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8jyfhix8\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp8jyfhix8.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006310485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.47 tests/s, 158.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkbngwstu\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpkbngwstu.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005705658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.26 tests/s, 175.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc65d11bv\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpc65d11bv.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005083128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.73 tests/s, 196.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.scan(/\\(/).size }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm6p2vayj\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpm6p2vayj.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005437204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.92 tests/s, 183.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgnmyfz9j\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpgnmyfz9j.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005486657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.26 tests/s, 182.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n      level\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp5gzg1v3\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpp5gzg1v3.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005389233 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.56 tests/s, 185.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_count = 0\n    max_paren_count = 0\n    paren.chars.each\
    \ do |char|\n      if char == '('\n        paren_count += 1\n        max_paren_count\
    \ = paren_count if paren_count > max_paren_count\n      elsif char == ')'\n  \
    \      paren_count -= 1\n      end\n    end\n    max_paren_count\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpki1_4owk\nStarted\n.\nFinished in 0.000349568 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2860.67 tests/s, 8582.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    max_nesting = 0\n    current_nesting = 0\n    parens.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe84qp8cm\nStarted\n.\nFinished in 0.000343465 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2911.50 tests/s, 8734.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8k9j7hzd\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp8k9j7hzd.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005283104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.28 tests/s, 189.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqy3v4fxd\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpqy3v4fxd.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005312809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.22 tests/s, 188.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp44bsrsl2\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp44bsrsl2.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005763046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.52 tests/s, 173.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1j67g0ny\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp1j67g0ny.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005242928 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.73 tests/s, 190.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp4d8h5ly\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpp4d8h5ly.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005549464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.20 tests/s, 180.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcozqtw83\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpcozqtw83.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005331916 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.55 tests/s, 187.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n     \
    \ case char\n      when '('\n        max_depth + 1\n      when ')'\n        max_depth\
    \ - 1\n      end\n    }\n  }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_7qn063o\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp_7qn063o.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005319332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.99 tests/s, 187.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_0o5ioqv\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp_0o5ioqv.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005532011 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.77 tests/s, 180.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6bwecbxv\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp6bwecbxv.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004739481 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.99 tests/s, 210.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplktcpymx\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmplktcpymx.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006863896 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.69 tests/s, 145.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpc7r5vkuk\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpc7r5vkuk.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006807009 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.91 tests/s, 146.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_zj7xl7a\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp_zj7xl7a.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00487166 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.27 tests/s, 205.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5bea7wr6\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp5bea7wr6.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006230955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.49 tests/s, 160.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzlgzoaig\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpzlgzoaig.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006239141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.28 tests/s, 160.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphuqacydj\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmphuqacydj.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006216819 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.85 tests/s, 160.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1dde9cqf\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp1dde9cqf.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005229433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.23 tests/s, 191.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_stack = []\n    max_nesting = 0\n    paren.each_char\
    \ do |char|\n      if char == '('\n        paren_stack.push(char)\n        max_nesting\
    \ = paren_stack.length if paren_stack.length > max_nesting\n      elsif char ==\
    \ ')'\n        paren_stack.pop\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmqm1xano\nStarted\n.\nFinished in 0.000437212 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2287.22 tests/s, 6861.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group| paren_group.scan(/\\(/).size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4dgg2pqx\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp4dgg2pqx.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005704536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.30 tests/s, 175.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkhlyzapr\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpkhlyzapr.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005989261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.97 tests/s, 166.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf9k47uit\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpf9k47uit.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005235544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.00 tests/s, 191.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    max_depth = 0\n    current_depth = 0\n    parens.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxi7xymel\nStarted\n.\nFinished in 0.000343306 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2912.85 tests/s, 8738.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvbion9u3\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpvbion9u3.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.00537093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.19 tests/s, 186.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.count('(') - paren.count(')')\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp000c72th\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp000c72th.rb:15:in `test_parse_nested_parens'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_parse_nested_parens\n\
    \     14:     candidate = method(:parse_nested_parens)\n  => 15:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     16:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     17:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     18:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005505261 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.64 tests/s, 181.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.chars.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxdeo_vua\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpxdeo_vua.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005392099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.46 tests/s, 185.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgqho0bls\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpgqho0bls.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005342586 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.18 tests/s, 187.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptj_kq1kg\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmptj_kq1kg.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006941181 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.07 tests/s, 144.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgpjknkw4\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpgpjknkw4.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005611411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.21 tests/s, 178.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp50s72l3m\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp50s72l3m.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006258838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.77 tests/s, 159.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzklr3u2w\nStarted\n.\nFinished in 0.000368231 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2715.69 tests/s, 8147.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n  \
    \    if char == '('\n        acc += 1\n      elsif char == ')'\n        acc -=\
    \ 1\n      end\n      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx_g4eejm\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpx_g4eejm.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005258226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.18 tests/s, 190.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdaka5a_6\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpdaka5a_6.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005046439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.16 tests/s, 198.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg6rjkxuw\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpg6rjkxuw.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005344539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.11 tests/s, 187.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl265pi0o\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpl265pi0o.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006422986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.69 tests/s, 155.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp40ldsll\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpp40ldsll.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006811688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.81 tests/s, 146.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmi5pqbl6\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpmi5pqbl6.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005441791 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.76 tests/s, 183.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptfietbjc\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmptfietbjc.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005469224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.84 tests/s, 182.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpir03iqpw\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpir03iqpw.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005276832 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.51 tests/s, 189.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |group| group.count('(') - group.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvah2brz8\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpvah2brz8.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005359859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.57 tests/s, 186.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm306_gtx\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpm306_gtx.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005461059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.11 tests/s, 183.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi5117ipa\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpi5117ipa.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005136268 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.69 tests/s, 194.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_array = paren.split('')\n    paren_array.each_with_index.map\
    \ do |char, index|\n      if char == '('\n        paren_array[index] = 1\n   \
    \   elsif char == ')'\n        paren_array[index] = -1\n      end\n    end\n \
    \   paren_array.reduce(0) do |acc, num|\n      if acc + num < 0\n        0\n \
    \     else\n        acc + num\n      end\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcj9aa0u6\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpcj9aa0u6.rb:29:in `test_parse_nested_parens'\n\
    \     26: class TestHumanEval < Test::Unit::TestCase\n     27:   def test_parse_nested_parens\n\
    \     28:     candidate = method(:parse_nested_parens)\n  => 29:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     30:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     31:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     32:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005592526 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.81 tests/s, 178.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n      level\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm1zh445z\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpm1zh445z.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006845732 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.08 tests/s, 146.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz9y9gcnu\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpz9y9gcnu.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006549965 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.67 tests/s, 152.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz4iob8_r\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpz4iob8_r.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005161475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.74 tests/s, 193.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxfku0ue8\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpxfku0ue8.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005078088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.92 tests/s, 196.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: implement this\
    \ function\n  paren_string.split(\" \").map { |paren| paren.count(\"(\") }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvs3c9_gg\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpvs3c9_gg.rb:14:in `test_parse_nested_parens'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_parse_nested_parens\n\
    \     13:     candidate = method(:parse_nested_parens)\n  => 14:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     15:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     16:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     17:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005204024 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.16 tests/s, 192.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6zxpnvye\nStarted\n.\nFinished in 0.000328388 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3045.18 tests/s, 9135.53 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaj9x3g7i\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpaj9x3g7i.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005689448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.76 tests/s, 175.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.chars.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_nj3f2ya\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp_nj3f2ya.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005724443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.69 tests/s, 174.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwf83jxxn\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpwf83jxxn.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005976337 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.33 tests/s, 167.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpu1tgqnrp\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpu1tgqnrp.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005854828 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.80 tests/s, 170.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7cu2lnh3\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp7cu2lnh3.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005532683 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.74 tests/s, 180.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjlmepx2e\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpjlmepx2e.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005534687 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.68 tests/s, 180.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4qbt1qga\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp4qbt1qga.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005490243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.14 tests/s, 182.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmhc238vk\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpmhc238vk.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005091704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.40 tests/s, 196.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphz0w5rvx\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmphz0w5rvx.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004784266 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.02 tests/s, 209.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj56xor8u\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpj56xor8u.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006032613 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    165.77 tests/s, 165.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5qjkr7_v\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp5qjkr7_v.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005679188 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.08 tests/s, 176.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_19yzhg8\nStarted\n.\nFinished in 0.000503015 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1988.01 tests/s, 5964.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8gdksz91\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp8gdksz91.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005444507 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.67 tests/s, 183.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_count = 0\n    max_paren_count = 0\n    paren.each_char\
    \ do |char|\n      if char == '('\n        paren_count += 1\n        max_paren_count\
    \ = paren_count if paren_count > max_paren_count\n      elsif char == ')'\n  \
    \      paren_count -= 1\n      end\n    end\n    max_paren_count\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpme9z32do\nStarted\n.\nFinished in 0.000467289 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2140.00 tests/s, 6420.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == '('\n        max_depth + 1\n      elsif char == ')'\n      \
    \  max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy47pyyp8\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpy47pyyp8.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.007133853 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.18 tests/s, 140.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |level, char|\n      char ==\
    \ '(' ? level + 1 : level - 1\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpajb9z53l\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpajb9z53l.rb:17:in `test_parse_nested_parens'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_parse_nested_parens\n\
    \     16:     candidate = method(:parse_nested_parens)\n  => 17:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     19:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     20:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005221558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.51 tests/s, 191.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmyqrz97z\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpmyqrz97z.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006129996 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.13 tests/s, 163.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_stack = []\n    max_depth = 0\n    paren.chars.each\
    \ do |char|\n      if char == '('\n        paren_stack.push(char)\n        max_depth\
    \ = paren_stack.length if paren_stack.length > max_depth\n      elsif char ==\
    \ ')'\n        paren_stack.pop\n      end\n    end\n    max_depth\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqod5xu2u\nStarted\n.\nFinished in 0.000363694 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2749.56 tests/s, 8248.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      char ==\
    \ '(' ? max_depth + 1 : max_depth - 1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprd8ey8yl\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmprd8ey8yl.rb:17:in `test_parse_nested_parens'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_parse_nested_parens\n\
    \     16:     candidate = method(:parse_nested_parens)\n  => 17:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     19:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     20:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00532396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.83 tests/s, 187.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n      level\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpubz6mf4a\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpubz6mf4a.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005277202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.49 tests/s, 189.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx10c5zqw\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpx10c5zqw.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006985977 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    143.14 tests/s, 143.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3cyaejfl\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp3cyaejfl.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005455688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.29 tests/s, 183.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8djflys7\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp8djflys7.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005296959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.79 tests/s, 188.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\n  paren_string.split(' ').map { |paren| paren.count('(') }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpll24xfcx\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpll24xfcx.rb:14:in `test_parse_nested_parens'\n\
    \     11: class TestHumanEval < Test::Unit::TestCase\n     12:   def test_parse_nested_parens\n\
    \     13:     candidate = method(:parse_nested_parens)\n  => 14:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     15:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     16:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     17:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.006184278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.70 tests/s, 161.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4n7z1yow\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp4n7z1yow.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005502927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.72 tests/s, 181.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8u8_5lve\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp8u8_5lve.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005220725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.54 tests/s, 191.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm9soi40p\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpm9soi40p.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004921413 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.19 tests/s, 203.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmporo7x8gq\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmporo7x8gq.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005619446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.95 tests/s, 177.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1gq2yopl\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp1gq2yopl.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.004907707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.76 tests/s, 203.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpoo3ztr3y\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpoo3ztr3y.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005629886 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.62 tests/s, 177.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map { |paren| paren.count(\"(\") }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcgo2z_36\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpcgo2z_36.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005404441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.03 tests/s, 185.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwkguf5tj\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpwkguf5tj.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005526972 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.93 tests/s, 180.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvommd8aw\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpvommd8aw.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006214193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.92 tests/s, 160.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbw3793i5\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpbw3793i5.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005169821 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.43 tests/s, 193.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp33nur5td\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp33nur5td.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005617453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.02 tests/s, 178.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map { |paren| paren.count(\"(\") }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqzrwqphh\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpqzrwqphh.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005165973 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.57 tests/s, 193.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyks14emo\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpyks14emo.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00599929 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.69 tests/s, 166.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy892s29k\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpy892s29k.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005445549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.64 tests/s, 183.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbtwlh72c\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpbtwlh72c.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005912086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.15 tests/s, 169.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpfserhyus\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpfserhyus.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005344479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.11 tests/s, 187.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.chars.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_t32xv6s\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp_t32xv6s.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005148942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.21 tests/s, 194.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp95vh7yij\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp95vh7yij.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.0059353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.48 tests/s, 168.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm3iqypxs\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpm3iqypxs.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005677294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.14 tests/s, 176.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   char == '(' ? max_depth + 1 : max_depth - 1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1besig9i\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp1besig9i.rb:17:in `test_parse_nested_parens'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_parse_nested_parens\n\
    \     16:     candidate = method(:parse_nested_parens)\n  => 17:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     19:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     20:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005726597 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.62 tests/s, 174.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map { |paren| paren.count(\"(\") }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiozkx6jv\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpiozkx6jv.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005920723 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.90 tests/s, 168.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4_78zpkb\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp4_78zpkb.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005533935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.70 tests/s, 180.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp606bkq__\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp606bkq__.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006766524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.79 tests/s, 147.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplpup6mbm\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmplpup6mbm.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005864728 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.51 tests/s, 170.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe59mc8av\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpe59mc8av.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004926102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.00 tests/s, 203.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcag9d7xs\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpcag9d7xs.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.004976777 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.93 tests/s, 200.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwf0x_s0l\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpwf0x_s0l.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006170422 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.06 tests/s, 162.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp142550uf\nStarted\n.\nFinished in 0.000367081 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2724.19 tests/s, 8172.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzbif193u\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpzbif193u.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005226967 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.32 tests/s, 191.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa8z53erw\nStarted\n.\nFinished in 0.000327326 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3055.06 tests/s, 9165.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdttk_w4m\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpdttk_w4m.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006880908 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.33 tests/s, 145.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3xaeoe3h\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp3xaeoe3h.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005228561 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.26 tests/s, 191.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8kdodpod\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp8kdodpod.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005076725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.98 tests/s, 196.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == '('\n        max_depth + 1\n      elsif char == ')'\n      \
    \  max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpep1hrvtl\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpep1hrvtl.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005317849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.05 tests/s, 188.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppdy_3e5a\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmppdy_3e5a.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005362322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.49 tests/s, 186.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpr2vowjjn\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpr2vowjjn.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005651467 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.95 tests/s, 176.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx2kn8555\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpx2kn8555.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005615939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.06 tests/s, 178.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcgzhaf0z\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpcgzhaf0z.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005589659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.90 tests/s, 178.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkr4euwhj\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpkr4euwhj.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005018015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.28 tests/s, 199.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpljqca7u_\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpljqca7u_.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00625401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.90 tests/s, 159.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp19j1o_no\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp19j1o_no.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005928857 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.67 tests/s, 168.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_level, char|\n\
    \      if char == '('\n        max_level + 1\n      elsif char == ')'\n      \
    \  max_level - 1\n      else\n        max_level\n      end\n    }\n  }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpk1ci03cx\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpk1ci03cx.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005738381 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.27 tests/s, 174.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt05ozwof\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpt05ozwof.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005511694 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.43 tests/s, 181.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_array = paren.split('')\n    paren_array.each_with_index.map\
    \ do |char, index|\n      if char == '('\n        paren_array[index] = 1\n   \
    \   elsif char == ')'\n        paren_array[index] = -1\n      end\n    end\n \
    \   paren_array.inject(0) { |sum, n| [sum + n, 0].max }\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpde4ygo0d\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpde4ygo0d.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005719165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.85 tests/s, 174.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmrlauzhl\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpmrlauzhl.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005420532 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.48 tests/s, 184.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n   \
    \   if char == '('\n        max_level += 1\n      elsif char == ')'\n        max_level\
    \ -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps3pv5ctc\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmps3pv5ctc.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.007177254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.33 tests/s, 139.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqfo0u__i\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpqfo0u__i.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005365819 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.36 tests/s, 186.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnhirfjvp\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpnhirfjvp.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006185319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    161.67 tests/s, 161.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpno24rp88\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpno24rp88.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005885657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.90 tests/s, 169.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      max_depth += 1 if char == '('\n      max_depth -= 1 if char == ')'\n  \
    \    max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnup2u2um\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpnup2u2um.rb:19:in `test_parse_nested_parens'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_parse_nested_parens\n\
    \     18:     candidate = method(:parse_nested_parens)\n  => 19:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     20:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     21:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     22:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005755743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.74 tests/s, 173.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpb1xct9al\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpb1xct9al.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005251083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.44 tests/s, 190.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\n  paren_string.split(\" \").map do |paren|\n    paren.count(\"(\"\
    )\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpyyyrj56l\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpyyyrj56l.rb:16:in `test_parse_nested_parens'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_parse_nested_parens\n\
    \     15:     candidate = method(:parse_nested_parens)\n  => 16:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     17:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     18:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     19:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005443666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.70 tests/s, 183.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpdpfssd88\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpdpfssd88.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005297611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.76 tests/s, 188.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| parse_nested_parens_helper(paren_group) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_zjizlbh\nStarted\nE\n===============================================================================\n\
    Error: test_parse_nested_parens(TestHumanEval):\n  NoMethodError: undefined method\
    \ `parse_nested_parens_helper' for #<TestHumanEval:0x000055deed15a118>\n  Did\
    \ you mean?  parse_nested_parens\n/tmp/tmp_zjizlbh.rb:7:in `block in parse_nested_parens'\n\
    /tmp/tmp_zjizlbh.rb:7:in `map'\n/tmp/tmp_zjizlbh.rb:7:in `parse_nested_parens'\n\
    /tmp/tmp_zjizlbh.rb:13:in `call'\n/tmp/tmp_zjizlbh.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n===============================================================================\n\
    \nFinished in 0.014969766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.80 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvt_m064l\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpvt_m064l.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005628854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.66 tests/s, 177.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7z1_h7fp\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp7z1_h7fp.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005457843 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.22 tests/s, 183.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp07871m7s\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp07871m7s.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005089339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.49 tests/s, 196.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n      char\
    \ == '(' ? acc + 1 : acc - 1\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpun2l4k2p\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpun2l4k2p.rb:17:in `test_parse_nested_parens'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_parse_nested_parens\n\
    \     16:     candidate = method(:parse_nested_parens)\n  => 17:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     19:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     20:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005518276 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.22 tests/s, 181.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjabcn0m7\nStarted\n.\nFinished in 0.000621228 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1609.71 tests/s, 4829.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7tc0wsi9\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp7tc0wsi9.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005697662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.51 tests/s, 175.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpee1rxqhe\nStarted\n.\nFinished in 0.000340409 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2937.64 tests/s, 8812.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz4hk8r2l\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpz4hk8r2l.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005209495 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.96 tests/s, 191.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwo4g7rc5\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpwo4g7rc5.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005376128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.01 tests/s, 186.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7c6fi6kd\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp7c6fi6kd.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00626596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.59 tests/s, 159.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, paren|\n\
    \      if paren == '('\n        max_level + 1\n      elsif paren == ')'\n    \
    \    max_level - 1\n      else\n        max_level\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuadt0ybs\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpuadt0ybs.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005891747 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.73 tests/s, 169.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcnk1tp35\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpcnk1tp35.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005576966 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.31 tests/s, 179.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpd2gy9cpg\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpd2gy9cpg.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006304174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.63 tests/s, 158.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpy7ywog48\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpy7ywog48.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005954265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.95 tests/s, 167.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm6vz8j1q\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpm6vz8j1q.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.00538146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.82 tests/s, 185.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuaw_i_wk\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpuaw_i_wk.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006864157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    145.68 tests/s, 145.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpsu93wx_p\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpsu93wx_p.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005699538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.45 tests/s, 175.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgchdqbn9\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpgchdqbn9.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005489411 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.17 tests/s, 182.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |level, char|\n      if char == '('\n\
    \        level += 1\n      elsif char == ')'\n        level -= 1\n      end\n\
    \      level\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpte2ib4p_\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpte2ib4p_.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005884083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.95 tests/s, 169.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\n  paren_string.split(' ').map do |paren|\n    paren.chars.reduce(0)\
    \ do |max, char|\n      if char == '('\n        max + 1\n      elsif char == ')'\n\
    \        max - 1\n      else\n        max\n      end\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvct9_5a5\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpvct9_5a5.rb:24:in `test_parse_nested_parens'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_parse_nested_parens\n\
    \     23:     candidate = method(:parse_nested_parens)\n  => 24:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     25:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     26:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     27:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005438445 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.88 tests/s, 183.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    }\n  }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmad00vbn\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpmad00vbn.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005351592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.86 tests/s, 186.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n      char\
    \ == '(' ? level + 1 : level - 1\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpw1jk1fnp\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpw1jk1fnp.rb:17:in `test_parse_nested_parens'\n\
    \     14: class TestHumanEval < Test::Unit::TestCase\n     15:   def test_parse_nested_parens\n\
    \     16:     candidate = method(:parse_nested_parens)\n  => 17:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     19:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     20:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.006625968 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.92 tests/s, 150.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn7z4d08h\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpn7z4d08h.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005401737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.13 tests/s, 185.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n      if char\
    \ == '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp30tgqptx\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp30tgqptx.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005512935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.39 tests/s, 181.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppgn7347f\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmppgn7347f.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005411766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.78 tests/s, 184.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqxi_68nx\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpqxi_68nx.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005337836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.34 tests/s, 187.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_nesting, char|\n      if char\
    \ == '('\n        max_nesting + 1\n      elsif char == ')'\n        max_nesting\
    \ - 1\n      else\n        max_nesting\n      end\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpklth4rs8\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpklth4rs8.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.00557385 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.41 tests/s, 179.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    nesting = 0\n    paren_group.each_char\
    \ do |c|\n      if c == '('\n        nesting += 1\n        max_nesting = nesting\
    \ if nesting > max_nesting\n      elsif c == ')'\n        nesting -= 1\n     \
    \ end\n    end\n    max_nesting\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuzdxv6qz\nStarted\n.\nFinished in 0.000357373 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2798.20 tests/s, 8394.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5o6wb6hm\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp5o6wb6hm.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005954356 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.94 tests/s, 167.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.scan(/\\(/).count }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_fu5du7j\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp_fu5du7j.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005115489 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.48 tests/s, 195.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5en5iks2\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp5en5iks2.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005476997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.58 tests/s, 182.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjbom1v78\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpjbom1v78.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005277062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.50 tests/s, 189.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2sfh_0e4\nStarted\n.\nFinished in 0.000334478 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2989.73 tests/s, 8969.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpeug5gamq\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpeug5gamq.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004559172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.34 tests/s, 219.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp8fm_hmad\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp8fm_hmad.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005101963 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.00 tests/s, 196.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphev3d0f_\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmphev3d0f_.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005493089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.05 tests/s, 182.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpglwbeywb\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpglwbeywb.rb:22:in `test_parse_nested_parens'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_parse_nested_parens\n\
    \     21:     candidate = method(:parse_nested_parens)\n  => 22:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     23:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     24:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     25:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.005131389 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.88 tests/s, 194.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzxivltwn\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpzxivltwn.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005104197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.92 tests/s, 195.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.scan(/\\(/).size }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbn0phwwn\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpbn0phwwn.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.005380997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.84 tests/s, 185.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3dh13a8g\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp3dh13a8g.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.004910974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.63 tests/s, 203.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcl5na10j\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpcl5na10j.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.004819893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.47 tests/s, 207.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_level, char|\n\
    \      if char == '('\n        max_level + 1\n      elsif char == ')'\n      \
    \  max_level - 1\n      else\n        max_level\n      end\n    }\n  }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1h1lhb3w\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp1h1lhb3w.rb:23:in `test_parse_nested_parens'\n\
    \     20: class TestHumanEval < Test::Unit::TestCase\n     21:   def test_parse_nested_parens\n\
    \     22:     candidate = method(:parse_nested_parens)\n  => 23:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     24:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     25:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     26:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.004907037 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.79 tests/s, 203.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.count('(') - paren.count(')')\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpa__qpvdy\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmpa__qpvdy.rb:15:in `test_parse_nested_parens'\n\
    \     12: class TestHumanEval < Test::Unit::TestCase\n     13:   def test_parse_nested_parens\n\
    \     14:     candidate = method(:parse_nested_parens)\n  => 15:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     16:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     17:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     18:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1, 3]\n?  0  0  0  0 \n===============================================================================\n\
    \nFinished in 0.004987969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.48 tests/s, 200.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.scan(/\\(/).size }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp97pu5v1v\nStarted\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/tmp/tmp97pu5v1v.rb:13:in `test_parse_nested_parens'\n\
    \     10: class TestHumanEval < Test::Unit::TestCase\n     11:   def test_parse_nested_parens\n\
    \     12:     candidate = method(:parse_nested_parens)\n  => 13:     assert_equal([2,\
    \ 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"))\n     14:     assert_equal([1,\
    \ 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"))\n     15:     assert_equal([4],\
    \ candidate.call(\"(()(())((())))\"))\n     16:   end\n<[2, 3, 1, 3]> expected\
    \ but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,    1, 3]\n?        3,    5 \n===============================================================================\n\
    \nFinished in 0.004821124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.42 tests/s, 207.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
