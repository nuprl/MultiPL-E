name: HumanEval_6_parse_nested_parens
language: ruby
results:
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjw12z31m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjw12z31m.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003454 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.52 tests/s, 289.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, paren|\n\
    \      case paren\n      when '('\n        max_depth + 1\n      when ')'\n   \
    \     max_depth - 1\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeh8py5py\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeh8py5py.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.30 tests/s, 144.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqgchaf9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeqgchaf9.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.48 tests/s, 231.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4m1p5v7q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4m1p5v7q.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.25 tests/s, 284.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67qi_c8r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67qi_c8r.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003336 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.76 tests/s, 299.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2hf7vin\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm2hf7vin.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004692 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.13 tests/s, 213.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzhw4hbu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqzhw4hbu.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.12 tests/s, 227.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xejjnp5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xejjnp5.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.82 tests/s, 107.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n     \
    \ if char == '('\n        max_depth + 1\n      elsif char == ')'\n        max_depth\
    \ - 1\n      else\n        max_depth\n      end\n    }\n  }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfdxydew\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzfdxydew.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004368 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.94 tests/s, 228.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   char == '(' ? max_depth + 1 : max_depth - 1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptilp0th7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptilp0th7.rb:17:in\
    \ `test_parse_nested_parens'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_parse_nested_parens\n     16:     candidate = method(:parse_nested_parens)\n\
    \  => 17:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     18:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     19:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     20:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.011679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.62 tests/s, 85.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n     \
    \ char == '(' ? max_depth + 1 : max_depth - 1\n    }\n  }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcj2rb3b8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcj2rb3b8.rb:17:in\
    \ `test_parse_nested_parens'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_parse_nested_parens\n     16:     candidate = method(:parse_nested_parens)\n\
    \  => 17:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     18:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     19:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     20:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004548 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.88 tests/s, 219.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc06rebg4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc06rebg4.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.77 tests/s, 232.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplst6ruai\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplst6ruai.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004501 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.17 tests/s, 222.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Write your code\
    \ here\n  result = []\n  paren_string.split(' ').each do |paren|\n    result <<\
    \ paren.scan(/\\(/).size\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgscdjpi8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgscdjpi8.rb:18:in\
    \ `test_parse_nested_parens'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_parse_nested_parens\n     17:     candidate = method(:parse_nested_parens)\n\
    \  => 18:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     19:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     20:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     21:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    272.78 tests/s, 272.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, paren|\n\
    \      paren == '(' ? max_nesting + 1 : max_nesting - 1\n    end\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp41vlmw3o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp41vlmw3o.rb:17:in\
    \ `test_parse_nested_parens'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_parse_nested_parens\n     16:     candidate = method(:parse_nested_parens)\n\
    \  => 17:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     18:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     19:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     20:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.025185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.71 tests/s, 39.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbigy0kiv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbigy0kiv.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004552 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.68 tests/s, 219.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnlggjxw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnlggjxw.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.016554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.41 tests/s, 60.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n  \
    \    if char == '('\n        acc += 1\n      elsif char == ')'\n        acc -=\
    \ 1\n      end\n      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcl37gy6i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcl37gy6i.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.026072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.36 tests/s, 38.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.scan(/\\(/).size }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ma7tqxy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ma7tqxy.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003726 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.38 tests/s, 268.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7m03m8zu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7m03m8zu.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003735 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    267.74 tests/s, 267.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      max_depth\
    \ += 1 if char == '('\n      max_depth -= 1 if char == ')'\n      max_depth\n\
    \    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7n1yh3l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo7n1yh3l.rb:19:in\
    \ `test_parse_nested_parens'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_parse_nested_parens\n     18:     candidate = method(:parse_nested_parens)\n\
    \  => 19:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     20:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     21:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     22:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.27 tests/s, 222.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx6y7fhrf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx6y7fhrf.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00884 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.12 tests/s, 113.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjonomgd_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjonomgd_.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.09 tests/s, 278.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n   \
    \   if char == '('\n        max_level += 1\n      elsif char == ')'\n        max_level\
    \ -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphatfeic8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphatfeic8.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.006543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.84 tests/s, 152.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpav_hf9kq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpav_hf9kq.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.030296 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    33.01 tests/s, 33.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8t56_dlx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8t56_dlx.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.061111 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    16.36 tests/s, 16.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.scan(/\\(/).size }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6agkudpl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6agkudpl.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.37 tests/s, 283.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzsuy5xnk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzsuy5xnk.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004926 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.00 tests/s, 203.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n      level\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmd49c0q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqmd49c0q.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.007694 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.97 tests/s, 129.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_count = 0\n    max_paren_count = 0\n    paren.chars.each\
    \ do |char|\n      if char == '('\n        paren_count += 1\n        max_paren_count\
    \ = paren_count if paren_count > max_paren_count\n      elsif char == ')'\n  \
    \      paren_count -= 1\n      end\n    end\n    max_paren_count\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnvty31uv\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 13761.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    max_nesting = 0\n    current_nesting = 0\n    parens.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgcmcg9y1\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 14563.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4nktqbc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw4nktqbc.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.011472 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    87.17 tests/s, 87.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ldplki4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5ldplki4.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005257 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.22 tests/s, 190.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0pptpkhf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0pptpkhf.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.91 tests/s, 231.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtwj1wws\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbtwj1wws.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.025092 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.85 tests/s, 39.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajey6bdm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpajey6bdm.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.91 tests/s, 292.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6s60jb7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6s60jb7.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.00378 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.55 tests/s, 264.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n     \
    \ case char\n      when '('\n        max_depth + 1\n      when ')'\n        max_depth\
    \ - 1\n      end\n    }\n  }\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h5hc6fs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h5hc6fs.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.020066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.84 tests/s, 49.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcros8qag\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcros8qag.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.36 tests/s, 214.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8qjamj7u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8qjamj7u.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003391 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.90 tests/s, 294.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ct6jl56\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ct6jl56.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.005023 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.08 tests/s, 199.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3pmsvsx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3pmsvsx.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.47 tests/s, 277.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpakm1cd1i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpakm1cd1i.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005557 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.95 tests/s, 179.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf7lzkrxu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf7lzkrxu.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.81 tests/s, 223.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rr6b20m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4rr6b20m.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.0073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.99 tests/s, 136.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprs1xt7uo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprs1xt7uo.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.004051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    246.85 tests/s, 246.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88jvxcjo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp88jvxcjo.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.80 tests/s, 274.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_stack = []\n    max_nesting = 0\n    paren.each_char\
    \ do |char|\n      if char == '('\n        paren_stack.push(char)\n        max_nesting\
    \ = paren_stack.length if paren_stack.length > max_nesting\n      elsif char ==\
    \ ')'\n        paren_stack.pop\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjz2p8ih\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 14634.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group| paren_group.scan(/\\(/).size }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1nozgq98\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1nozgq98.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003711 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    269.47 tests/s, 269.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprv6qjhtj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprv6qjhtj.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.038592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    25.91 tests/s, 25.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyhjx4zep\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyhjx4zep.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.024194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    41.33 tests/s, 41.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    max_depth = 0\n    current_depth = 0\n    parens.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rzht1ap\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 14563.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvcvtg6kz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvcvtg6kz.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003798 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.30 tests/s, 263.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.count('(') - paren.count(')')\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy19md_uf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy19md_uf.rb:15:in\
    \ `test_parse_nested_parens'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_parse_nested_parens\n     14:     candidate = method(:parse_nested_parens)\n\
    \  => 15:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     16:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     17:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     18:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.013739 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.79 tests/s, 72.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.chars.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjmekblwo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjmekblwo.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.007715 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.62 tests/s, 129.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsshzinja\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsshzinja.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    181.19 tests/s, 181.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqj49bx7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptqj49bx7.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    292.91 tests/s, 292.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw98zlmjr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw98zlmjr.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.90 tests/s, 273.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7gnxxrbu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7gnxxrbu.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.004734 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    211.24 tests/s, 211.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcum1dimj\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 14705.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n  \
    \    if char == '('\n        acc += 1\n      elsif char == ')'\n        acc -=\
    \ 1\n      end\n      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv2qui7oi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv2qui7oi.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.007239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    138.14 tests/s, 138.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxxnjf6f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxxnjf6f.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004458 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.32 tests/s, 224.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnx4eudj4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnx4eudj4.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004301 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    232.50 tests/s, 232.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnlqcpe6e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnlqcpe6e.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.12 tests/s, 274.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcuhb2_u_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcuhb2_u_.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00475 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.53 tests/s, 210.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_pt_d3u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo_pt_d3u.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.17 tests/s, 220.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4v9kiu6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt4v9kiu6.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.101781 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    9.83 tests/s, 9.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9kgkyjd1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9kgkyjd1.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005629 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.65 tests/s, 177.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |group| group.count('(') - group.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsk8wnmqo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsk8wnmqo.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.54 tests/s, 203.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpphr2qnkf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpphr2qnkf.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.15 tests/s, 150.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaaiw9sfx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaaiw9sfx.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004577 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.48 tests/s, 218.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_array = paren.split('')\n    paren_array.each_with_index.map\
    \ do |char, index|\n      if char == '('\n        paren_array[index] = 1\n   \
    \   elsif char == ')'\n        paren_array[index] = -1\n      end\n    end\n \
    \   paren_array.reduce(0) do |acc, num|\n      if acc + num < 0\n        0\n \
    \     else\n        acc + num\n      end\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo1gnibxo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo1gnibxo.rb:29:in\
    \ `test_parse_nested_parens'\n     26: class TestHumanEval < Test::Unit::TestCase\n\
    \     27:   def test_parse_nested_parens\n     28:     candidate = method(:parse_nested_parens)\n\
    \  => 29:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     30:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     31:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     32:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.011686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.57 tests/s, 85.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n      level\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn180vjqh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn180vjqh.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.36 tests/s, 228.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd44nz3a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppd44nz3a.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.032058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    31.19 tests/s, 31.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgk39lu1i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgk39lu1i.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.18 tests/s, 297.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7umtje_8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7umtje_8.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.79 tests/s, 309.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: implement this\
    \ function\n  paren_string.split(\" \").map { |paren| paren.count(\"(\") }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptwniiwi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptwniiwi.rb:14:in\
    \ `test_parse_nested_parens'\n     11: class TestHumanEval < Test::Unit::TestCase\n\
    \     12:   def test_parse_nested_parens\n     13:     candidate = method(:parse_nested_parens)\n\
    \  => 14:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     15:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     16:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     17:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.82 tests/s, 284.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoyzxagyu\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 14285.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9w210vyb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9w210vyb.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.006547 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    152.74 tests/s, 152.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.chars.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkvbl7pt3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkvbl7pt3.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.004029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.20 tests/s, 248.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvkw2ozlv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvkw2ozlv.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004546 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.97 tests/s, 219.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp466e_wzl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp466e_wzl.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.73 tests/s, 225.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tsdqbj_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tsdqbj_.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.02 tests/s, 177.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvi3roazw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvi3roazw.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.016466 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    60.73 tests/s, 60.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpni713zp7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpni713zp7.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003973 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    251.70 tests/s, 251.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5vcr1i0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz5vcr1i0.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004281 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.59 tests/s, 233.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcm2yvoxo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcm2yvoxo.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.01 tests/s, 312.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir3uz24k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpir3uz24k.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.004559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.35 tests/s, 219.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxaxx0_2p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxaxx0_2p.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.21 tests/s, 223.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpablt22zs\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 14285.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplx9onw1c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplx9onw1c.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.37 tests/s, 103.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_count = 0\n    max_paren_count = 0\n    paren.each_char\
    \ do |char|\n      if char == '('\n        paren_count += 1\n        max_paren_count\
    \ = paren_count if paren_count > max_paren_count\n      elsif char == ')'\n  \
    \      paren_count -= 1\n      end\n    end\n    max_paren_count\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvmwaolbc\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 15000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == '('\n        max_depth + 1\n      elsif char == ')'\n      \
    \  max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckwgam3f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpckwgam3f.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.81 tests/s, 223.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |level, char|\n      char ==\
    \ '(' ? level + 1 : level - 1\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nbeq8k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nbeq8k.rb:17:in\
    \ `test_parse_nested_parens'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_parse_nested_parens\n     16:     candidate = method(:parse_nested_parens)\n\
    \  => 17:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     18:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     19:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     20:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.70 tests/s, 215.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxk4aci12\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxk4aci12.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004459 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    224.27 tests/s, 224.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_stack = []\n    max_depth = 0\n    paren.chars.each\
    \ do |char|\n      if char == '('\n        paren_stack.push(char)\n        max_depth\
    \ = paren_stack.length if paren_stack.length > max_depth\n      elsif char ==\
    \ ')'\n        paren_stack.pop\n      end\n    end\n    max_depth\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa9lfevn1\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 14563.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      char ==\
    \ '(' ? max_depth + 1 : max_depth - 1\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6dxh8kj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6dxh8kj.rb:17:in\
    \ `test_parse_nested_parens'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_parse_nested_parens\n     16:     candidate = method(:parse_nested_parens)\n\
    \  => 17:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     18:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     19:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     20:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    187.48 tests/s, 187.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n\
    \      if char == '('\n        level += 1\n      elsif char == ')'\n        level\
    \ -= 1\n      end\n      level\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8zqi1e56\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8zqi1e56.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.079279 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    12.61 tests/s, 12.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrntbmhb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrntbmhb.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003804 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    262.88 tests/s, 262.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjjvgfu_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsjjvgfu_.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.011681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    85.61 tests/s, 85.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcu0yt5fp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcu0yt5fp.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.22 tests/s, 216.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\n  paren_string.split(' ').map { |paren| paren.count('(') }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4u82o4n9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4u82o4n9.rb:14:in\
    \ `test_parse_nested_parens'\n     11: class TestHumanEval < Test::Unit::TestCase\n\
    \     12:   def test_parse_nested_parens\n     13:     candidate = method(:parse_nested_parens)\n\
    \  => 14:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     15:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     16:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     17:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003625 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    275.86 tests/s, 275.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lddvai3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lddvai3.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.43 tests/s, 227.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1z23lxkl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1z23lxkl.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.57 tests/s, 235.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23vp22xv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23vp22xv.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.58 tests/s, 313.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4ppfczu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr4ppfczu.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004407 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.91 tests/s, 226.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgikzgvz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgikzgvz.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.80 tests/s, 285.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfc7lc5gw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfc7lc5gw.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003596 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    278.09 tests/s, 278.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map { |paren| paren.count(\"(\") }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3l_wlpll\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3l_wlpll.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.011623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.04 tests/s, 86.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn42sswyp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn42sswyp.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.72 tests/s, 191.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpldd5qza0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpldd5qza0.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004389 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.84 tests/s, 227.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67q7hk_c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67q7hk_c.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.93 tests/s, 221.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2y9jcz35\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2y9jcz35.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.034939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    28.62 tests/s, 28.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map { |paren| paren.count(\"(\") }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzt_c8ghl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzt_c8ghl.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.005986 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.06 tests/s, 167.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpohhk4lcf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpohhk4lcf.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.83 tests/s, 228.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7n5hfmk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7n5hfmk.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004416 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.45 tests/s, 226.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9ckowf3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph9ckowf3.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.17 tests/s, 220.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuy3w83sw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuy3w83sw.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004493 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.57 tests/s, 222.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.chars.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxcc2s1f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxcc2s1f.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.018018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    55.50 tests/s, 55.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_aw221k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg_aw221k.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.22 tests/s, 198.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptrizc4m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptrizc4m.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.005484 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    182.35 tests/s, 182.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   char == '(' ? max_depth + 1 : max_depth - 1\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9mv478jf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9mv478jf.rb:17:in\
    \ `test_parse_nested_parens'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_parse_nested_parens\n     16:     candidate = method(:parse_nested_parens)\n\
    \  => 17:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     18:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     19:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     20:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004843 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.48 tests/s, 206.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map { |paren| paren.count(\"(\") }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp901hnb05\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp901hnb05.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.37 tests/s, 273.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnjsu_mn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjnjsu_mn.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.04 tests/s, 210.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptol00klx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptol00klx.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004606 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.11 tests/s, 217.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75x1g3wb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp75x1g3wb.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.010849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    92.17 tests/s, 92.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwxo8k6g5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwxo8k6g5.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003189 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.58 tests/s, 313.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lmcvodw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5lmcvodw.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.00 tests/s, 231.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0c03_oj_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0c03_oj_.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004702 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.68 tests/s, 212.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp92qgbyc3\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 13824.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpegkyc980\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpegkyc980.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003615 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    276.63 tests/s, 276.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqed8t7gx\n\
    Started\n.\nFinished in 0.00253 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    395.26 tests/s, 1185.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpystker67\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpystker67.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.025155 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    39.75 tests/s, 39.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1pbwnqm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1pbwnqm.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.013774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.60 tests/s, 72.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0mhtbst\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn0mhtbst.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.004143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    241.37 tests/s, 241.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == '('\n        max_depth + 1\n      elsif char == ')'\n      \
    \  max_depth - 1\n      else\n        max_depth\n      end\n    }\n  }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpge2zh0l8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpge2zh0l8.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005699 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    175.47 tests/s, 175.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3xex_h7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3xex_h7.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004905 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.87 tests/s, 203.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphc8ggimr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphc8ggimr.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003537 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    282.73 tests/s, 282.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxuoazm4b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxuoazm4b.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004413 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.60 tests/s, 226.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0nxb6sti\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0nxb6sti.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.96 tests/s, 218.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdjy_ceut\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdjy_ceut.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.92 tests/s, 214.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3p84toos\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3p84toos.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.007433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.54 tests/s, 134.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ud1598v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ud1598v.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004951 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.98 tests/s, 201.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_level, char|\n\
    \      if char == '('\n        max_level + 1\n      elsif char == ')'\n      \
    \  max_level - 1\n      else\n        max_level\n      end\n    }\n  }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1fvhxq_i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1fvhxq_i.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.019396 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    51.56 tests/s, 51.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n\
    \      if char == '('\n        max_level += 1\n      elsif char == ')'\n     \
    \   max_level -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppbnu1aad\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppbnu1aad.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004468 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.81 tests/s, 223.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren_array = paren.split('')\n    paren_array.each_with_index.map\
    \ do |char, index|\n      if char == '('\n        paren_array[index] = 1\n   \
    \   elsif char == ')'\n        paren_array[index] = -1\n      end\n    end\n \
    \   paren_array.inject(0) { |sum, n| [sum + n, 0].max }\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelp39z_b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpelp39z_b.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    231.96 tests/s, 231.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvsv3psbb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvsv3psbb.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.73 tests/s, 229.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, char|\n   \
    \   if char == '('\n        max_level += 1\n      elsif char == ')'\n        max_level\
    \ -= 1\n      end\n      max_level\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn14vfki2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn14vfki2.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005029 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.85 tests/s, 198.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwklu8v53\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwklu8v53.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.58 tests/s, 204.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyecihp9z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyecihp9z.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004386 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.00 tests/s, 228.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvezvjeh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvezvjeh.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.009232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.32 tests/s, 108.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      max_depth += 1 if char == '('\n      max_depth -= 1 if char == ')'\n  \
    \    max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lzibo06\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9lzibo06.rb:19:in\
    \ `test_parse_nested_parens'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_parse_nested_parens\n     18:     candidate = method(:parse_nested_parens)\n\
    \  => 19:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     20:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     21:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     22:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004251 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.24 tests/s, 235.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5iy4871x\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5iy4871x.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.007124 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    140.37 tests/s, 140.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\n  paren_string.split(\" \").map do |paren|\n    paren.count(\"(\"\
    )\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt5tx0yj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppt5tx0yj.rb:16:in\
    \ `test_parse_nested_parens'\n     13: class TestHumanEval < Test::Unit::TestCase\n\
    \     14:   def test_parse_nested_parens\n     15:     candidate = method(:parse_nested_parens)\n\
    \  => 16:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     17:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     18:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     19:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.004256 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    234.96 tests/s, 234.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz354zb51\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz354zb51.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.97 tests/s, 222.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| parse_nested_parens_helper(paren_group) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppjzxpkf\n\
    Started\nE\n===============================================================================\n\
    Error: test_parse_nested_parens(TestHumanEval):\n  NoMethodError: undefined method\
    \ `parse_nested_parens_helper' for #<TestHumanEval:0x00000001008f3e40 @method_name=\"\
    test_parse_nested_parens\", @internal_data=#<Test::Unit::TestCase::InternalData:0x00000001008f3df0\
    \ @start_time=2022-07-28 19:24:21.029854 -0400, @elapsed_time=nil, @passed=false,\
    \ @interrupted=true, @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000000100a30510\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00000001042fbcc8\
    \ @test_name=\"test_parse_nested_parens(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `parse_nested_parens_helper' for #<TestHumanEval:0x00000001008f3e40\
    \ ...>\n  \n    paren_string.split(' ').map { |paren_group| parse_nested_parens_helper(paren_group)\
    \ }\n                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  Did you mean?  parse_nested_parens>, @method_name=\"test_parse_nested_parens\"\
    >], @stop_tag=#<Object:0x0000000104347e20>, @failures=[], @errors=[#<Test::Unit::Error:0x00000001042fbcc8\
    \ @test_name=\"test_parse_nested_parens(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `parse_nested_parens_helper' for #<TestHumanEval:0x00000001008f3e40\
    \ ...>\n  \n    paren_string.split(' ').map { |paren_group| parse_nested_parens_helper(paren_group)\
    \ }\n                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  Did you mean?  parse_nested_parens>, @method_name=\"test_parse_nested_parens\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000000104347c40 @a_proc=#<Proc:0x0000000104347c68\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4365515880>=>#<Proc:0x0000000104347c68 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001043476a0\
    \ @a_proc=#<Proc:0x00000001043476c8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4365514440>=>#<Proc:0x00000001043476c8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000104347218\
    \ @a_proc=#<Proc:0x0000000104347240 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4365513280>=>#<Proc:0x0000000104347240 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000104346e08\
    \ @a_proc=#<Proc:0x0000000104346e30 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4365512240>=>#<Proc:0x0000000104346e30 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppjzxpkf.rb:7:in `block in\
    \ parse_nested_parens'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppjzxpkf.rb:7:in\
    \ `map'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppjzxpkf.rb:7:in\
    \ `parse_nested_parens'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppjzxpkf.rb:13:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpppjzxpkf.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n===============================================================================\n\
    \nFinished in 0.016134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    61.98 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmor21o2t\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmor21o2t.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.041354 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.18 tests/s, 24.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuf5m98h9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuf5m98h9.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.69 tests/s, 283.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwjugdayr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwjugdayr.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004569 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.87 tests/s, 218.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n      char\
    \ == '(' ? acc + 1 : acc - 1\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fbqsqoz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8fbqsqoz.rb:17:in\
    \ `test_parse_nested_parens'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_parse_nested_parens\n     16:     candidate = method(:parse_nested_parens)\n\
    \  => 17:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     18:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     19:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     20:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.020793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    48.09 tests/s, 48.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm6s0e20z\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 13824.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp395jm295\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp395jm295.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004441 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.17 tests/s, 225.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    current_nesting = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_nesting += 1\n        max_nesting\
    \ = current_nesting if current_nesting > max_nesting\n      elsif char == ')'\n\
    \        current_nesting -= 1\n      end\n    end\n    max_nesting\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4qz43ueg\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 13698.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n \
    \     if char == '('\n        max_nesting + 1\n      elsif char == ')'\n     \
    \   max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4f7ahqq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4f7ahqq.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.33 tests/s, 225.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpra0mm6vb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpra0mm6vb.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.64 tests/s, 219.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdx7j6djp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdx7j6djp.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005553 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.08 tests/s, 180.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_level, paren|\n\
    \      if paren == '('\n        max_level + 1\n      elsif paren == ')'\n    \
    \    max_level - 1\n      else\n        max_level\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73vabp62\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp73vabp62.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00439 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.79 tests/s, 227.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmpk1cfiq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmpk1cfiq.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004444 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.02 tests/s, 225.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdnlib_76\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdnlib_76.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.017614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    56.77 tests/s, 56.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplau750tz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplau750tz.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.21 tests/s, 194.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbx26v_dt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbx26v_dt.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.37 tests/s, 283.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_nesting, char|\n\
    \      if char == '('\n        max_nesting + 1\n      elsif char == ')'\n    \
    \    max_nesting - 1\n      else\n        max_nesting\n      end\n    end\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51feb91r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51feb91r.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.031962 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    31.29 tests/s, 31.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxm9xnua\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplxm9xnua.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.017265 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.92 tests/s, 57.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam63ko0l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpam63ko0l.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.006222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    160.72 tests/s, 160.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |level, char|\n      if char == '('\n\
    \        level += 1\n      elsif char == ')'\n        level -= 1\n      end\n\
    \      level\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoacyuc87\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoacyuc87.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.014503 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.95 tests/s, 68.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\n  paren_string.split(' ').map do |paren|\n    paren.chars.reduce(0)\
    \ do |max, char|\n      if char == '('\n        max + 1\n      elsif char == ')'\n\
    \        max - 1\n      else\n        max\n      end\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbg6z9ukm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbg6z9ukm.rb:24:in\
    \ `test_parse_nested_parens'\n     21: class TestHumanEval < Test::Unit::TestCase\n\
    \     22:   def test_parse_nested_parens\n     23:     candidate = method(:parse_nested_parens)\n\
    \  => 24:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     25:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     26:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     27:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.007551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.43 tests/s, 132.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split(\"\
    \ \").map { |paren_group|\n    paren_group.chars.reduce(0) { |max_depth, char|\n\
    \      if char == \"(\"\n        max_depth += 1\n      elsif char == \")\"\n \
    \       max_depth -= 1\n      end\n      max_depth\n    }\n  }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ocnwsc_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ocnwsc_.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004858 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.85 tests/s, 205.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |level, char|\n      char\
    \ == '(' ? level + 1 : level - 1\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyourjvza\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyourjvza.rb:17:in\
    \ `test_parse_nested_parens'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_parse_nested_parens\n     16:     candidate = method(:parse_nested_parens)\n\
    \  => 17:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     18:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     19:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     20:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.01325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.47 tests/s, 75.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n\
    \      if char == '('\n        max_depth += 1\n      elsif char == ')'\n     \
    \   max_depth -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7g11ekk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx7g11ekk.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004442 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.12 tests/s, 225.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |acc, char|\n      if char\
    \ == '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy5kbs2p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy5kbs2p.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004349 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    229.94 tests/s, 229.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |paren_group|\n    paren_group.chars.reduce(0) do |max_depth, char|\n   \
    \   if char == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth\
    \ -= 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplkofnxtc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplkofnxtc.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004746 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.70 tests/s, 210.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9rzbyly\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9rzbyly.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004483 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.06 tests/s, 223.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_nesting, char|\n      if char\
    \ == '('\n        max_nesting + 1\n      elsif char == ')'\n        max_nesting\
    \ - 1\n      else\n        max_nesting\n      end\n    end\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1_7uckg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa1_7uckg.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.0132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.76 tests/s, 75.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_nesting = 0\n    nesting = 0\n    paren_group.each_char\
    \ do |c|\n      if c == '('\n        nesting += 1\n        max_nesting = nesting\
    \ if nesting > max_nesting\n      elsif c == ')'\n        nesting -= 1\n     \
    \ end\n    end\n    max_nesting\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpewj1i0my\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 14423.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split.map\
    \ do |parens|\n    parens.chars.reduce(0) do |max_depth, char|\n      if char\
    \ == '('\n        max_depth += 1\n      elsif char == ')'\n        max_depth -=\
    \ 1\n      end\n      max_depth\n    end\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate\
    \ = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3bbgb_6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl3bbgb_6.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004404 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.07 tests/s, 227.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.scan(/\\(/).count }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqw4a5dj1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqw4a5dj1.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003496 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    286.04 tests/s, 286.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa2v3li31\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa2v3li31.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.006327 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.05 tests/s, 158.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnenul7hp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnenul7hp.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003599 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.85 tests/s, 277.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren_group|\n    max_depth = 0\n    current_depth = 0\n    paren_group.each_char\
    \ do |char|\n      if char == '('\n        current_depth += 1\n        max_depth\
    \ = current_depth if current_depth > max_depth\n      elsif char == ')'\n    \
    \    current_depth -= 1\n      end\n    end\n    max_depth\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg6hgnmpz\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 13953.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # TODO: Implement this\
    \ function\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzll8wui\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbzll8wui.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.97 tests/s, 317.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9f48qsx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm9f48qsx.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003574 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    279.80 tests/s, 279.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |max, char|\n      if char ==\
    \ '('\n        max + 1\n      elsif char == ')'\n        max - 1\n      else\n\
    \        max\n      end\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46ii_2ab\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46ii_2ab.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.005437 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.92 tests/s, 183.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.chars.reduce(0) do |acc, char|\n      if char ==\
    \ '('\n        acc += 1\n      elsif char == ')'\n        acc -= 1\n      end\n\
    \      acc\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5nyamhe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp5nyamhe.rb:22:in\
    \ `test_parse_nested_parens'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_parse_nested_parens\n     21:     candidate = method(:parse_nested_parens)\n\
    \  => 22:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     23:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     24:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     25:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00612 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.40 tests/s, 163.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.count('(') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4v75s7yw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4v75s7yw.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.005794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.59 tests/s, 172.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group| paren_group.scan(/\\(/).size }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxegng0tx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxegng0tx.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003523 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    283.85 tests/s, 283.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyv3wi9vd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyv3wi9vd.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    233.81 tests/s, 233.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.count('(') - paren.count(')') }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n \
    \   candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
    (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
    () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
    ))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpww0jyymz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpww0jyymz.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    236.41 tests/s, 236.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren_group|\n    paren_group.chars.reduce(0) { |max_level, char|\n\
    \      if char == '('\n        max_level + 1\n      elsif char == ')'\n      \
    \  max_level - 1\n      else\n        max_level\n      end\n    }\n  }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposm62so5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmposm62so5.rb:23:in\
    \ `test_parse_nested_parens'\n     20: class TestHumanEval < Test::Unit::TestCase\n\
    \     21:   def test_parse_nested_parens\n     22:     candidate = method(:parse_nested_parens)\n\
    \  => 23:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     24:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     25:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     26:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.004179 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    239.29 tests/s, 239.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map do |paren|\n    paren.count('(') - paren.count(')')\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
    \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3],\
    \ candidate.call(\"(()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3,\
    \ 4], candidate.call(\"() (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"\
    (()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwpiy8sd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwpiy8sd.rb:15:in\
    \ `test_parse_nested_parens'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_parse_nested_parens\n     14:     candidate = method(:parse_nested_parens)\n\
    \  => 15:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     16:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     17:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     18:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[0, 0, 0, 0]>\n\ndiff:\n? [2, 3, 1,\
    \ 3]\n?  0  0  0  0 \n?  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.00425 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    235.29 tests/s, 235.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n# For each of the group, output the deepest\
    \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    # [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  paren_string.split('\
    \ ').map { |paren| paren.scan(/\\(/).size }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_parse_nested_parens\n    candidate = method(:parse_nested_parens)\n\
    \    assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n    assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n    assert_equal([4], candidate.call(\"(()(())((())))\"))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqht_da9s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_parse_nested_parens(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqht_da9s.rb:13:in\
    \ `test_parse_nested_parens'\n     10: class TestHumanEval < Test::Unit::TestCase\n\
    \     11:   def test_parse_nested_parens\n     12:     candidate = method(:parse_nested_parens)\n\
    \  => 13:     assert_equal([2, 3, 1, 3], candidate.call(\"(()()) ((())) () ((())()())\"\
    ))\n     14:     assert_equal([1, 2, 3, 4], candidate.call(\"() (()) ((())) (((())))\"\
    ))\n     15:     assert_equal([4], candidate.call(\"(()(())((())))\"))\n     16:\
    \   end\n<[2, 3, 1, 3]> expected but was\n<[3, 3, 1, 5]>\n\ndiff:\n? [2, 3,  \
    \  1, 3]\n?        3,    5 \n?  ---   +++   ? \n===============================================================================\n\
    \nFinished in 0.003652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    273.82 tests/s, 273.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
