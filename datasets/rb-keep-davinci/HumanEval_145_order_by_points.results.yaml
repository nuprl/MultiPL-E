name: HumanEval_145_order_by_points
language: ruby
results:
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa47ccx1\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa47ccx1.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa47ccx1.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa47ccx1.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa47ccx1.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa47ccx1.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa47ccx1.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa47ccx1.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqa47ccx1.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1510.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2au9dh0f\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2au9dh0f.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2au9dh0f.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2au9dh0f.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2au9dh0f.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2au9dh0f.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2au9dh0f.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2au9dh0f.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2au9dh0f.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1522.07 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt49gwdce\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt49gwdce.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt49gwdce.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt49gwdce.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt49gwdce.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt49gwdce.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt49gwdce.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt49gwdce.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt49gwdce.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1562.50 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx9astmj\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx9astmj.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx9astmj.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx9astmj.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx9astmj.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx9astmj.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx9astmj.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx9astmj.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsx9astmj.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000642 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1557.63 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dcbjg1m\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x00000001044fd828 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x00000001044fd7d8 @start_time=2022-07-28\
    \ 16:17:18.256537 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00000001046c9620\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00000001046c0f20\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x00000001044fd828 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x00000001046c9170>, @failures=[], @errors=[#<Test::Unit::Error:0x00000001046c0f20\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x00000001044fd828 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00000001046c8f18 @a_proc=#<Proc:0x00000001046c8f68\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4369190760>=>#<Proc:0x00000001046c8f68 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001046c8a68\
    \ @a_proc=#<Proc:0x00000001046c8a90 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4369189520>=>#<Proc:0x00000001046c8a90 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001046c8630\
    \ @a_proc=#<Proc:0x00000001046c8658 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4369188440>=>#<Proc:0x00000001046c8658 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001046c8108\
    \ @a_proc=#<Proc:0x00000001046c8130 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4369187120>=>#<Proc:0x00000001046c8130 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dcbjg1m.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dcbjg1m.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dcbjg1m.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dcbjg1m.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dcbjg1m.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dcbjg1m.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2dcbjg1m.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.052808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    18.94 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvu30j6s\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvu30j6s.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvu30j6s.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvu30j6s.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvu30j6s.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvu30j6s.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvu30j6s.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvu30j6s.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvu30j6s.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1584.79 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fg_q1wx\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fg_q1wx.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fg_q1wx.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fg_q1wx.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fg_q1wx.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fg_q1wx.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fg_q1wx.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fg_q1wx.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6fg_q1wx.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1582.28 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw6y5imk\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw6y5imk.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw6y5imk.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw6y5imk.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw6y5imk.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw6y5imk.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw6y5imk.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw6y5imk.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiw6y5imk.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1526.72 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_w0od\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_w0od.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_w0od.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_w0od.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_w0od.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_w0od.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_w0od.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_w0od.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_w0od.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000654 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1529.05 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprubs_9xq\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprubs_9xq.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprubs_9xq.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprubs_9xq.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprubs_9xq.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprubs_9xq.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprubs_9xq.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprubs_9xq.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprubs_9xq.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1610.31 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |n, i| [n.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszlpj_4u\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszlpj_4u.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszlpj_4u.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszlpj_4u.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszlpj_4u.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszlpj_4u.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszlpj_4u.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszlpj_4u.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszlpj_4u.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1615.51 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9vtqb87\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9vtqb87.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9vtqb87.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9vtqb87.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9vtqb87.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9vtqb87.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9vtqb87.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt9vtqb87.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000556 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1798.56 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbb3pfuxf\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x0000000102f32728 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x0000000102f32390 @start_time=2022-07-28\
    \ 16:17:18.382924 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000000102f6c1d0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00000001031379d8\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000102f32728 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x000000010313fb60>, @failures=[], @errors=[#<Test::Unit::Error:0x00000001031379d8\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000102f32728 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000000010313f980 @a_proc=#<Proc:0x000000010313f9a8\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4346608040>=>#<Proc:0x000000010313f9a8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010313f3e0\
    \ @a_proc=#<Proc:0x000000010313f408 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4346606600>=>#<Proc:0x000000010313f408 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010313ef58\
    \ @a_proc=#<Proc:0x000000010313ef80 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4346605440>=>#<Proc:0x000000010313ef80 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010313eb48\
    \ @a_proc=#<Proc:0x000000010313eb70 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4346604400>=>#<Proc:0x000000010313eb70 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbb3pfuxf.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbb3pfuxf.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbb3pfuxf.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbb3pfuxf.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbb3pfuxf.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbb3pfuxf.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbb3pfuxf.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.010939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.42 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2ulaiu\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2ulaiu.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2ulaiu.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2ulaiu.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2ulaiu.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2ulaiu.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2ulaiu.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2ulaiu.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptq2ulaiu.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000632 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1582.28 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9z0abys\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9z0abys.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9z0abys.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9z0abys.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9z0abys.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9z0abys.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9z0abys.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9z0abys.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw9z0abys.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1494.77 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf05458u\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf05458u.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf05458u.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf05458u.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf05458u.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf05458u.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf05458u.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf05458u.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptf05458u.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000673 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1485.88 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjgrl4j3\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjgrl4j3.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjgrl4j3.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjgrl4j3.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjgrl4j3.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjgrl4j3.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjgrl4j3.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjgrl4j3.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmjgrl4j3.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000623 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1605.14 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_id1mwe7\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_id1mwe7.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_id1mwe7.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_id1mwe7.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_id1mwe7.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_id1mwe7.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_id1mwe7.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_id1mwe7.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_id1mwe7.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000682 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1466.28 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7cts78m\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7cts78m.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7cts78m.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7cts78m.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7cts78m.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7cts78m.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7cts78m.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7cts78m.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7cts78m.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.008394 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    119.13 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rltyz86\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rltyz86.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rltyz86.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rltyz86.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rltyz86.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rltyz86.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rltyz86.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rltyz86.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5rltyz86.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1533.74 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc_zrsoq\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc_zrsoq.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc_zrsoq.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc_zrsoq.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc_zrsoq.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc_zrsoq.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc_zrsoq.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc_zrsoq.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyc_zrsoq.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000669 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1494.77 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplsweq0a\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplsweq0a.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplsweq0a.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplsweq0a.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplsweq0a.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplsweq0a.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplsweq0a.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplsweq0a.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpplsweq0a.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1499.25 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluy4dk2l\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluy4dk2l.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluy4dk2l.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluy4dk2l.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluy4dk2l.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluy4dk2l.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluy4dk2l.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluy4dk2l.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpluy4dk2l.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1497.01 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72vojff_\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72vojff_.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72vojff_.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72vojff_.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72vojff_.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72vojff_.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72vojff_.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72vojff_.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72vojff_.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1531.39 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphppcbc19\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphppcbc19.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphppcbc19.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphppcbc19.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphppcbc19.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphppcbc19.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphppcbc19.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphppcbc19.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphppcbc19.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1420.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppujkdlwu\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppujkdlwu.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppujkdlwu.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppujkdlwu.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppujkdlwu.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppujkdlwu.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppujkdlwu.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppujkdlwu.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppujkdlwu.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.0007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1428.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94nez3ah\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94nez3ah.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94nez3ah.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94nez3ah.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94nez3ah.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94nez3ah.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94nez3ah.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94nez3ah.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp94nez3ah.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1550.39 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ktht6r7\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ktht6r7.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ktht6r7.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ktht6r7.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ktht6r7.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ktht6r7.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ktht6r7.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ktht6r7.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ktht6r7.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.0007 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1428.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl76w6e3s\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl76w6e3s.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl76w6e3s.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl76w6e3s.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl76w6e3s.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl76w6e3s.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl76w6e3s.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl76w6e3s.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl76w6e3s.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1477.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemzs3rdh\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemzs3rdh.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemzs3rdh.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemzs3rdh.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemzs3rdh.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemzs3rdh.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemzs3rdh.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemzs3rdh.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpemzs3rdh.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000694 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1440.92 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2s_zez2\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2s_zez2.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2s_zez2.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2s_zez2.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2s_zez2.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2s_zez2.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2s_zez2.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2s_zez2.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo2s_zez2.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1392.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fxes_1s\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fxes_1s.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fxes_1s.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fxes_1s.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fxes_1s.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fxes_1s.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fxes_1s.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fxes_1s.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0fxes_1s.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1526.72 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index do |num, i|\n    [num.digits.sum, i]\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt293y_w\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt293y_w.rb:10:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt293y_w.rb:10:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt293y_w.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt293y_w.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt293y_w.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt293y_w.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt293y_w.rb:17:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwt293y_w.rb:17:in\
    \ `test_order_by_points'\n     14: class TestHumanEval < Test::Unit::TestCase\n\
    \     15:   def test_order_by_points\n     16:     candidate = method(:order_by_points)\n\
    \  => 17:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     18:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     19:     assert_equal([], candidate.call([]))\n\
    \     20:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000639 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1564.95 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyraq2xq\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyraq2xq.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyraq2xq.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyraq2xq.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyraq2xq.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyraq2xq.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyraq2xq.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyraq2xq.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyraq2xq.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1560.06 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojagd1q3\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojagd1q3.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojagd1q3.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojagd1q3.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojagd1q3.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojagd1q3.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojagd1q3.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojagd1q3.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpojagd1q3.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1418.44 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn27u435l\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn27u435l.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn27u435l.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn27u435l.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn27u435l.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn27u435l.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn27u435l.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn27u435l.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn27u435l.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1512.86 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_4thr8\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_4thr8.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_4thr8.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_4thr8.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_4thr8.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_4thr8.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_4thr8.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_4thr8.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9s_4thr8.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000708 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1412.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbi7s5aq\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbi7s5aq.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbi7s5aq.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbi7s5aq.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbi7s5aq.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbi7s5aq.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbi7s5aq.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbi7s5aq.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdbi7s5aq.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    544.07 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1992wns\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1992wns.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1992wns.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1992wns.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1992wns.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1992wns.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1992wns.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1992wns.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn1992wns.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    603.14 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaksyq_s9\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaksyq_s9.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaksyq_s9.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaksyq_s9.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaksyq_s9.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaksyq_s9.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaksyq_s9.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaksyq_s9.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaksyq_s9.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000636 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1572.33 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1a64txi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr1a64txi.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12, 11]> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.80 tests/s, 291.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphctg3_f0\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphctg3_f0.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphctg3_f0.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphctg3_f0.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphctg3_f0.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphctg3_f0.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphctg3_f0.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphctg3_f0.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphctg3_f0.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1388.89 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvx8vijg\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvx8vijg.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvx8vijg.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvx8vijg.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvx8vijg.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvx8vijg.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvx8vijg.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvx8vijg.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwvx8vijg.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1379.31 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqjgrmpf\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqjgrmpf.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqjgrmpf.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqjgrmpf.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqjgrmpf.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqjgrmpf.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqjgrmpf.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqjgrmpf.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppqjgrmpf.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000668 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1497.01 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmop3y41q\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmop3y41q.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmop3y41q.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmop3y41q.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmop3y41q.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmop3y41q.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmop3y41q.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmop3y41q.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmop3y41q.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1488.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolhcm8di\n\
    Started\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpolhcm8di.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12, 11]> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003921 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.04 tests/s, 255.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyykm5b2\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyykm5b2.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyykm5b2.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyykm5b2.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyykm5b2.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyykm5b2.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyykm5b2.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyykm5b2.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppyykm5b2.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000714 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1400.56 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p7q36te\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p7q36te.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p7q36te.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p7q36te.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p7q36te.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p7q36te.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p7q36te.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p7q36te.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5p7q36te.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000656 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1524.39 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasopsvwm\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasopsvwm.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasopsvwm.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasopsvwm.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasopsvwm.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasopsvwm.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasopsvwm.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasopsvwm.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpasopsvwm.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000758 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1319.26 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf37j4jqs\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf37j4jqs.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf37j4jqs.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf37j4jqs.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf37j4jqs.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf37j4jqs.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf37j4jqs.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf37j4jqs.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf37j4jqs.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1560.06 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppav0_pqg\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppav0_pqg.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppav0_pqg.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppav0_pqg.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppav0_pqg.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppav0_pqg.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppav0_pqg.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppav0_pqg.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppav0_pqg.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1414.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplka7rsyw\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplka7rsyw.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplka7rsyw.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplka7rsyw.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplka7rsyw.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplka7rsyw.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplka7rsyw.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplka7rsyw.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplka7rsyw.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1567.40 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_su_eq4t\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_su_eq4t.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_su_eq4t.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_su_eq4t.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_su_eq4t.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_su_eq4t.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_su_eq4t.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_su_eq4t.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_su_eq4t.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1107.42 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v70pg4y\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v70pg4y.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v70pg4y.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v70pg4y.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v70pg4y.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v70pg4y.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v70pg4y.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v70pg4y.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5v70pg4y.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1512.86 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ufgyjz_\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ufgyjz_.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ufgyjz_.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ufgyjz_.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ufgyjz_.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ufgyjz_.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ufgyjz_.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ufgyjz_.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ufgyjz_.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.007604 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.51 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.abs.digits.sum, nums.index(num)] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz3azrz6r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz3azrz6r.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12, 11]> expected but was\n\
    <[1, -1, 11, -11, -12]>\n\ndiff:\n? [1, -1, 11, -11, 1, -12, 11]\n===============================================================================\n\
    \nFinished in 0.008421 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.75 tests/s, 118.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l7ekvp2\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l7ekvp2.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l7ekvp2.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l7ekvp2.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l7ekvp2.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l7ekvp2.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l7ekvp2.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l7ekvp2.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l7ekvp2.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    809.72 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv97be7x\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv97be7x.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv97be7x.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv97be7x.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv97be7x.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv97be7x.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv97be7x.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv97be7x.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxv97be7x.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1517.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9wm6cgu\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9wm6cgu.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9wm6cgu.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9wm6cgu.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9wm6cgu.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9wm6cgu.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9wm6cgu.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9wm6cgu.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz9wm6cgu.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001314 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    761.04 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3amyhcm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm3amyhcm.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12, 11]> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003285 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.41 tests/s, 304.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvm0g5jf\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvm0g5jf.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvm0g5jf.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvm0g5jf.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvm0g5jf.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvm0g5jf.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvm0g5jf.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvm0g5jf.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcvm0g5jf.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1479.29 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39i8wnws\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39i8wnws.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39i8wnws.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39i8wnws.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39i8wnws.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39i8wnws.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39i8wnws.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39i8wnws.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39i8wnws.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000648 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1543.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz0067vu\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz0067vu.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz0067vu.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz0067vu.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz0067vu.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz0067vu.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz0067vu.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz0067vu.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz0067vu.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1510.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wko1148\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wko1148.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wko1148.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wko1148.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wko1148.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wko1148.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wko1148.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wko1148.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8wko1148.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1560.06 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjxu0tvg\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjxu0tvg.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjxu0tvg.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjxu0tvg.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjxu0tvg.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjxu0tvg.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjxu0tvg.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjxu0tvg.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxjxu0tvg.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.002744 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    364.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvncc47cm\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvncc47cm.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvncc47cm.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvncc47cm.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvncc47cm.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvncc47cm.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvncc47cm.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvncc47cm.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvncc47cm.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1414.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ju5d88t\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ju5d88t.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ju5d88t.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ju5d88t.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ju5d88t.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ju5d88t.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ju5d88t.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ju5d88t.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ju5d88t.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000641 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1560.06 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftjj1_du\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftjj1_du.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftjj1_du.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftjj1_du.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftjj1_du.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftjj1_du.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftjj1_du.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftjj1_du.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    825.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6us86jl2\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6us86jl2.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6us86jl2.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6us86jl2.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6us86jl2.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6us86jl2.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6us86jl2.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6us86jl2.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6us86jl2.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001927 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    518.94 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73379wb\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73379wb.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73379wb.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73379wb.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73379wb.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73379wb.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73379wb.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73379wb.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd73379wb.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000715 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1398.60 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtwk8a8g\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtwk8a8g.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtwk8a8g.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtwk8a8g.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtwk8a8g.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtwk8a8g.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtwk8a8g.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtwk8a8g.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphtwk8a8g.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000772 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1295.34 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszin6t4y\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszin6t4y.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszin6t4y.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszin6t4y.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszin6t4y.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszin6t4y.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszin6t4y.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszin6t4y.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszin6t4y.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001815 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    550.96 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahcccj8e\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahcccj8e.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahcccj8e.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahcccj8e.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahcccj8e.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahcccj8e.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahcccj8e.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahcccj8e.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpahcccj8e.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000679 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1472.75 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmoe26ouk\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmoe26ouk.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmoe26ouk.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmoe26ouk.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmoe26ouk.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmoe26ouk.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmoe26ouk.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmoe26ouk.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmoe26ouk.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001688 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    592.42 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tusp0zt\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tusp0zt.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tusp0zt.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tusp0zt.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tusp0zt.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tusp0zt.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tusp0zt.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tusp0zt.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5tusp0zt.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1515.15 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmdhubu_\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmdhubu_.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmdhubu_.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmdhubu_.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmdhubu_.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmdhubu_.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmdhubu_.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmdhubu_.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmdhubu_.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1526.72 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ug8eg4z\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ug8eg4z.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ug8eg4z.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ug8eg4z.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ug8eg4z.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ug8eg4z.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ug8eg4z.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ug8eg4z.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ug8eg4z.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000674 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1483.68 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8fargy5\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8fargy5.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8fargy5.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8fargy5.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8fargy5.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8fargy5.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8fargy5.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8fargy5.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb8fargy5.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.022352 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.74 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8j170hu\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8j170hu.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8j170hu.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8j170hu.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8j170hu.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8j170hu.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8j170hu.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8j170hu.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8j170hu.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    940.73 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h1_68_e\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x0000000103325858 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x0000000103325830 @start_time=2022-07-28\
    \ 16:17:19.204958 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x000000010343d5b0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000000103434eb0\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000103325858 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x000000010343d0d8>, @failures=[], @errors=[#<Test::Unit::Error:0x0000000103434eb0\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000103325858 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000000010343cea8 @a_proc=#<Proc:0x000000010343ced0\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4349742800>=>#<Proc:0x000000010343ced0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010343c9d0\
    \ @a_proc=#<Proc:0x000000010343c9f8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4349741560>=>#<Proc:0x000000010343c9f8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010343c598\
    \ @a_proc=#<Proc:0x000000010343c5e8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4349740520>=>#<Proc:0x000000010343c5e8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010343c098\
    \ @a_proc=#<Proc:0x000000010343c0c0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4349739200>=>#<Proc:0x000000010343c0c0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h1_68_e.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h1_68_e.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h1_68_e.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h1_68_e.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h1_68_e.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h1_68_e.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4h1_68_e.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.029112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    34.35 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo6kdsyg\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo6kdsyg.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo6kdsyg.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo6kdsyg.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo6kdsyg.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo6kdsyg.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo6kdsyg.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo6kdsyg.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxo6kdsyg.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00089 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1123.60 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcjrhhpd\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcjrhhpd.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcjrhhpd.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcjrhhpd.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcjrhhpd.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcjrhhpd.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcjrhhpd.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcjrhhpd.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptcjrhhpd.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1402.52 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt65uz5rw\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt65uz5rw.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt65uz5rw.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt65uz5rw.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt65uz5rw.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt65uz5rw.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt65uz5rw.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt65uz5rw.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt65uz5rw.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1197.60 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm78qd4ej\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm78qd4ej.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm78qd4ej.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm78qd4ej.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm78qd4ej.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm78qd4ej.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm78qd4ej.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm78qd4ej.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm78qd4ej.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1506.02 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdflq6a7\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdflq6a7.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdflq6a7.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdflq6a7.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdflq6a7.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdflq6a7.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdflq6a7.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdflq6a7.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdflq6a7.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1503.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [sum_digits(num), i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gvzxt6\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_digits' for #<TestHumanEval:0x0000000105069478 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x0000000105069428 @start_time=2022-07-28\
    \ 16:17:19.299367 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000000105281508\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000000105278e08\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_digits' for #<TestHumanEval:0x0000000105069478 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_digits(num), i] }\n         \
    \                               ^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x0000000105281080>, @failures=[], @errors=[#<Test::Unit::Error:0x0000000105278e08\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_digits' for #<TestHumanEval:0x0000000105069478 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_digits(num), i] }\n         \
    \                               ^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000000105280e28 @a_proc=#<Proc:0x0000000105280e50\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4381478480>=>#<Proc:0x0000000105280e50 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000105280950\
    \ @a_proc=#<Proc:0x0000000105280978 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4381477240>=>#<Proc:0x0000000105280978 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000105280518\
    \ @a_proc=#<Proc:0x0000000105280540 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4381476160>=>#<Proc:0x0000000105280540 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010527bfb8\
    \ @a_proc=#<Proc:0x0000000105280018 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4381474840>=>#<Proc:0x0000000105280018 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gvzxt6.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gvzxt6.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gvzxt6.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gvzxt6.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gvzxt6.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gvzxt6.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd1gvzxt6.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.024933 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.11 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5np955di\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5np955di.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5np955di.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5np955di.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5np955di.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5np955di.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5np955di.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5np955di.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5np955di.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.002811 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    355.75 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h7du1xk\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h7du1xk.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h7du1xk.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h7du1xk.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h7du1xk.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h7du1xk.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h7du1xk.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h7du1xk.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_h7du1xk.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    543.18 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t2fi2ps\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t2fi2ps.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t2fi2ps.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t2fi2ps.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t2fi2ps.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t2fi2ps.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t2fi2ps.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t2fi2ps.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6t2fi2ps.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1587.30 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypktf3oa\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypktf3oa.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypktf3oa.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypktf3oa.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypktf3oa.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypktf3oa.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypktf3oa.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypktf3oa.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpypktf3oa.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1533.74 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o7ifego\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o7ifego.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o7ifego.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o7ifego.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o7ifego.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o7ifego.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o7ifego.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o7ifego.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0o7ifego.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.018698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    53.48 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_order_by_points\n    candidate = method(:order_by_points)\n    assert_equal([-1,\
    \ -11, 1, -12, 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvni3rboa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvni3rboa.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12, 11]> expected but was\n\
    <nil>\n===============================================================================\n\
    \nFinished in 0.003284 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    304.51 tests/s, 304.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxje3i3b\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxje3i3b.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxje3i3b.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxje3i3b.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxje3i3b.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxje3i3b.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxje3i3b.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxje3i3b.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptxje3i3b.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1579.78 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl4dw3g_\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl4dw3g_.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl4dw3g_.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl4dw3g_.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl4dw3g_.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl4dw3g_.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl4dw3g_.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl4dw3g_.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl4dw3g_.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000655 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1526.72 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9krb870\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9krb870.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9krb870.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9krb870.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9krb870.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9krb870.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9krb870.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf9krb870.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1567.40 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04jvp6za\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04jvp6za.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04jvp6za.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04jvp6za.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04jvp6za.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04jvp6za.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04jvp6za.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04jvp6za.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp04jvp6za.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000647 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1545.60 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg07u07r\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg07u07r.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg07u07r.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg07u07r.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg07u07r.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg07u07r.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg07u07r.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg07u07r.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg07u07r.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000663 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1508.30 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6ancfy6\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6ancfy6.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6ancfy6.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6ancfy6.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6ancfy6.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6ancfy6.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6ancfy6.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6ancfy6.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi6ancfy6.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000686 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1457.73 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46136gbp\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46136gbp.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46136gbp.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46136gbp.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46136gbp.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46136gbp.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46136gbp.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46136gbp.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp46136gbp.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1315.79 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc4la1tt\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc4la1tt.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc4la1tt.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc4la1tt.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc4la1tt.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc4la1tt.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc4la1tt.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc4la1tt.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc4la1tt.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000661 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1512.86 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.abs.digits.sum, nums.index(num)] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxt2b73e\n\
    Started\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxt2b73e.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12, 11]> expected but was\n\
    <[1, -1, 11, -11, -12]>\n\ndiff:\n? [1, -1, 11, -11, 1, -12, 11]\n===============================================================================\n\
    \nFinished in 0.00849 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.79 tests/s, 117.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpxlhi2r\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpxlhi2r.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpxlhi2r.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpxlhi2r.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpxlhi2r.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpxlhi2r.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpxlhi2r.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpxlhi2r.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqpxlhi2r.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1468.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0jtwmuz\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0jtwmuz.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0jtwmuz.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0jtwmuz.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0jtwmuz.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0jtwmuz.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0jtwmuz.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0jtwmuz.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm0jtwmuz.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000681 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1468.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgmstynv\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgmstynv.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgmstynv.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgmstynv.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgmstynv.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgmstynv.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgmstynv.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgmstynv.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgmstynv.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1488.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdo27yvw\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdo27yvw.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdo27yvw.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdo27yvw.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdo27yvw.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdo27yvw.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdo27yvw.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdo27yvw.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdo27yvw.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000694 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1440.92 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo1e1699\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo1e1699.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo1e1699.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo1e1699.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo1e1699.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo1e1699.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo1e1699.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo1e1699.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoo1e1699.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00135 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    740.74 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozr0mql3\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozr0mql3.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozr0mql3.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozr0mql3.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozr0mql3.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozr0mql3.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozr0mql3.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozr0mql3.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpozr0mql3.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    471.70 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfearjknh\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfearjknh.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfearjknh.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfearjknh.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfearjknh.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfearjknh.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfearjknh.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfearjknh.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfearjknh.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000743 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1345.90 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrubswjq\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrubswjq.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrubswjq.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrubswjq.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrubswjq.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrubswjq.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrubswjq.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrubswjq.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqrubswjq.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000748 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1336.90 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu3rta75\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu3rta75.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu3rta75.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu3rta75.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu3rta75.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu3rta75.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu3rta75.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu3rta75.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxu3rta75.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000725 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1379.31 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2ecey2x\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2ecey2x.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2ecey2x.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2ecey2x.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2ecey2x.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2ecey2x.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2ecey2x.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2ecey2x.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps2ecey2x.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1272.26 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ekwj7kz\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ekwj7kz.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ekwj7kz.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ekwj7kz.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ekwj7kz.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ekwj7kz.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ekwj7kz.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ekwj7kz.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ekwj7kz.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001874 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    533.62 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvilxwjo\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvilxwjo.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvilxwjo.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvilxwjo.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvilxwjo.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvilxwjo.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvilxwjo.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvilxwjo.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbvilxwjo.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.002658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    376.22 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cunt9m4\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cunt9m4.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cunt9m4.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cunt9m4.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cunt9m4.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cunt9m4.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cunt9m4.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cunt9m4.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_cunt9m4.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1517.45 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttk5wex7\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttk5wex7.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttk5wex7.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttk5wex7.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttk5wex7.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttk5wex7.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttk5wex7.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttk5wex7.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttk5wex7.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1388.89 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4jcm7wb\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4jcm7wb.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4jcm7wb.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4jcm7wb.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4jcm7wb.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4jcm7wb.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4jcm7wb.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4jcm7wb.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx4jcm7wb.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000722 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1385.04 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e03mmh2\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e03mmh2.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e03mmh2.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e03mmh2.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e03mmh2.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e03mmh2.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e03mmh2.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e03mmh2.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7e03mmh2.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1506.02 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_27brd2\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_27brd2.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_27brd2.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_27brd2.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_27brd2.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_27brd2.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_27brd2.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_27brd2.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph_27brd2.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000733 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1364.26 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4s03824\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4s03824.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4s03824.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4s03824.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4s03824.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4s03824.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4s03824.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4s03824.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz4s03824.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1501.50 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29leuct9\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29leuct9.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29leuct9.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29leuct9.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29leuct9.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29leuct9.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29leuct9.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29leuct9.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp29leuct9.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000708 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1412.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpso1l31h9\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpso1l31h9.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpso1l31h9.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpso1l31h9.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpso1l31h9.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpso1l31h9.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpso1l31h9.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpso1l31h9.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpso1l31h9.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000705 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1418.44 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v5f33ao\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v5f33ao.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v5f33ao.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v5f33ao.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v5f33ao.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v5f33ao.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v5f33ao.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v5f33ao.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0v5f33ao.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1501.50 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ilsrhe\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ilsrhe.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ilsrhe.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ilsrhe.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ilsrhe.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ilsrhe.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ilsrhe.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ilsrhe.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo5ilsrhe.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.042794 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.37 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3s7nvjq\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3s7nvjq.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3s7nvjq.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3s7nvjq.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3s7nvjq.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3s7nvjq.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3s7nvjq.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3s7nvjq.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb3s7nvjq.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.044518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    22.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_tjkjpz\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_tjkjpz.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_tjkjpz.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_tjkjpz.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_tjkjpz.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_tjkjpz.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_tjkjpz.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_tjkjpz.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy_tjkjpz.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000784 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1275.51 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0trg0oy9\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0trg0oy9.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0trg0oy9.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0trg0oy9.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0trg0oy9.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0trg0oy9.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0trg0oy9.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0trg0oy9.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0trg0oy9.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.008718 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.71 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdslowt\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdslowt.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdslowt.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdslowt.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdslowt.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdslowt.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdslowt.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdslowt.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmdslowt.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001339 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    746.83 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [sum_of_digits(num), index] }\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcvl467z\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x0000000103126ea8 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x0000000103126750 @start_time=2022-07-28\
    \ 16:17:19.921533 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00000001031602c0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000000106d2fa30\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000103126ea8 ...>\n\
    \  \n    nums.sort_by.with_index { |num, index| [sum_of_digits(num), index] }\n\
    \                                            ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x0000000106d37bb8>, @failures=[], @errors=[#<Test::Unit::Error:0x0000000106d2fa30\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000103126ea8 ...>\n\
    \  \n    nums.sort_by.with_index { |num, index| [sum_of_digits(num), index] }\n\
    \                                            ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000000106d379d8 @a_proc=#<Proc:0x0000000106d37a00\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4409489920>=>#<Proc:0x0000000106d37a00 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000106d37438\
    \ @a_proc=#<Proc:0x0000000106d37460 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4409488480>=>#<Proc:0x0000000106d37460 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000106d36fb0\
    \ @a_proc=#<Proc:0x0000000106d36fd8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4409487320>=>#<Proc:0x0000000106d36fd8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000106d36ba0\
    \ @a_proc=#<Proc:0x0000000106d36bc8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4409486280>=>#<Proc:0x0000000106d36bc8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcvl467z.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcvl467z.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcvl467z.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcvl467z.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcvl467z.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcvl467z.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzcvl467z.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.124769 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    8.01 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7ao8zl9\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7ao8zl9.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7ao8zl9.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7ao8zl9.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7ao8zl9.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7ao8zl9.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7ao8zl9.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7ao8zl9.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg7ao8zl9.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    702.74 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5labj428\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5labj428.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5labj428.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5labj428.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5labj428.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5labj428.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5labj428.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5labj428.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5labj428.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1490.31 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0mr564y_\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0mr564y_.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0mr564y_.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0mr564y_.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0mr564y_.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0mr564y_.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0mr564y_.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0mr564y_.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0mr564y_.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.002123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    471.03 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yrs2dd5\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yrs2dd5.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yrs2dd5.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yrs2dd5.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yrs2dd5.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yrs2dd5.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yrs2dd5.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yrs2dd5.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6yrs2dd5.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1479.29 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb5c5ii5\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb5c5ii5.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb5c5ii5.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb5c5ii5.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb5c5ii5.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb5c5ii5.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb5c5ii5.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb5c5ii5.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsb5c5ii5.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000713 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1402.52 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl5rk68i\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl5rk68i.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl5rk68i.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl5rk68i.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl5rk68i.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl5rk68i.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl5rk68i.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl5rk68i.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbl5rk68i.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000703 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1422.48 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhu59uk1\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhu59uk1.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhu59uk1.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhu59uk1.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhu59uk1.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhu59uk1.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhu59uk1.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhu59uk1.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphhu59uk1.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1265.82 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nivtev\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nivtev.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nivtev.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nivtev.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nivtev.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nivtev.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nivtev.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nivtev.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_5nivtev.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00077 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1298.70 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4sprya0\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4sprya0.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4sprya0.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4sprya0.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4sprya0.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4sprya0.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4sprya0.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4sprya0.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4sprya0.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1381.22 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8yhhyri\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8yhhyri.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8yhhyri.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8yhhyri.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8yhhyri.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8yhhyri.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8yhhyri.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8yhhyri.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz8yhhyri.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000768 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1302.08 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdm_wgaxq\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdm_wgaxq.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdm_wgaxq.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdm_wgaxq.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdm_wgaxq.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdm_wgaxq.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdm_wgaxq.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdm_wgaxq.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdm_wgaxq.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1222.49 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_guozssa\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_guozssa.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_guozssa.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_guozssa.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_guozssa.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_guozssa.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_guozssa.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_guozssa.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_guozssa.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000657 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1522.07 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0171v23q\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x0000000102f32728 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x0000000102f32390 @start_time=2022-07-28\
    \ 16:17:20.075565 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00000001030201d0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00000001030e79d8\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000102f32728 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x00000001030efb60>, @failures=[], @errors=[#<Test::Unit::Error:0x00000001030e79d8\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000102f32728 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00000001030ef980 @a_proc=#<Proc:0x00000001030ef9a8\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4346280360>=>#<Proc:0x00000001030ef9a8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001030ef3e0\
    \ @a_proc=#<Proc:0x00000001030ef408 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4346278920>=>#<Proc:0x00000001030ef408 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001030eef58\
    \ @a_proc=#<Proc:0x00000001030eef80 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4346277760>=>#<Proc:0x00000001030eef80 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001030eeb48\
    \ @a_proc=#<Proc:0x00000001030eeb70 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4346276720>=>#<Proc:0x00000001030eeb70 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0171v23q.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0171v23q.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0171v23q.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0171v23q.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0171v23q.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0171v23q.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0171v23q.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.010653 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    93.87 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_vnwipd\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x0000000107d367d0 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x0000000107d36780 @start_time=2022-07-28\
    \ 16:17:20.254287 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000000107d70188\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x00000001128379b8\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000107d367d0 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x0000000112883b38>, @failures=[], @errors=[#<Test::Unit::Error:0x00000001128379b8\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000107d367d0 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000000112883958 @a_proc=#<Proc:0x0000000112883980\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4605884800>=>#<Proc:0x0000000112883980 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001128833b8\
    \ @a_proc=#<Proc:0x00000001128833e0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4605883360>=>#<Proc:0x00000001128833e0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000112882f30\
    \ @a_proc=#<Proc:0x0000000112882f58 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4605882200>=>#<Proc:0x0000000112882f58 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000112882b20\
    \ @a_proc=#<Proc:0x0000000112882b48 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4605881160>=>#<Proc:0x0000000112882b48 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_vnwipd.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_vnwipd.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_vnwipd.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_vnwipd.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_vnwipd.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_vnwipd.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4_vnwipd.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.018282 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    54.70 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvoobse7\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvoobse7.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvoobse7.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvoobse7.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvoobse7.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvoobse7.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvoobse7.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvoobse7.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsvoobse7.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000778 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1285.35 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9d422td\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9d422td.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9d422td.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9d422td.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9d422td.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9d422td.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9d422td.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9d422td.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps9d422td.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1547.99 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgfqkhyg\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgfqkhyg.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgfqkhyg.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgfqkhyg.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgfqkhyg.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgfqkhyg.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgfqkhyg.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgfqkhyg.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptgfqkhyg.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1536.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyh77_a_\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyh77_a_.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyh77_a_.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyh77_a_.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyh77_a_.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyh77_a_.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyh77_a_.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyh77_a_.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnyh77_a_.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000675 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1481.48 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8377tu\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8377tu.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8377tu.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8377tu.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8377tu.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8377tu.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8377tu.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8377tu.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpao8377tu.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000689 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1451.38 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo22pxkrd\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo22pxkrd.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo22pxkrd.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo22pxkrd.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo22pxkrd.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo22pxkrd.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo22pxkrd.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo22pxkrd.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo22pxkrd.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1552.80 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78ekuccp\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78ekuccp.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78ekuccp.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78ekuccp.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78ekuccp.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78ekuccp.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78ekuccp.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp78ekuccp.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000582 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1718.21 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xos78ei\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xos78ei.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xos78ei.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xos78ei.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xos78ei.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xos78ei.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xos78ei.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xos78ei.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7xos78ei.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000662 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1510.57 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlm7h9ol\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlm7h9ol.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlm7h9ol.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlm7h9ol.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlm7h9ol.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlm7h9ol.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlm7h9ol.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlm7h9ol.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphlm7h9ol.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1615.51 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hvbi55i\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hvbi55i.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hvbi55i.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hvbi55i.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hvbi55i.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hvbi55i.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hvbi55i.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hvbi55i.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hvbi55i.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00063 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1587.30 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39tjefuf\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39tjefuf.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39tjefuf.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39tjefuf.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39tjefuf.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39tjefuf.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39tjefuf.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39tjefuf.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp39tjefuf.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1470.59 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.abs.digits.sum, nums.index(num)] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpticbgu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbpticbgu.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12, 11]> expected but was\n\
    <[1, -1, 11, -11, -12]>\n\ndiff:\n? [1, -1, 11, -11, 1, -12, 11]\n===============================================================================\n\
    \nFinished in 0.003434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.21 tests/s, 291.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpui322odb\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpui322odb.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpui322odb.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpui322odb.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpui322odb.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpui322odb.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpui322odb.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpui322odb.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpui322odb.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1519.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfym50r5j\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfym50r5j.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfym50r5j.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfym50r5j.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfym50r5j.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfym50r5j.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfym50r5j.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfym50r5j.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfym50r5j.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.041774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.94 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3pq03oe3\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3pq03oe3.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3pq03oe3.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3pq03oe3.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3pq03oe3.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3pq03oe3.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3pq03oe3.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3pq03oe3.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3pq03oe3.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000742 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1347.71 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyzw0py4\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyzw0py4.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyzw0py4.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyzw0py4.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyzw0py4.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyzw0py4.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyzw0py4.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyzw0py4.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphyzw0py4.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1381.22 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8fpwiqp\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8fpwiqp.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8fpwiqp.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8fpwiqp.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8fpwiqp.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8fpwiqp.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8fpwiqp.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8fpwiqp.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8fpwiqp.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001312 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    762.20 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv__k3c0p\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv__k3c0p.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv__k3c0p.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv__k3c0p.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv__k3c0p.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv__k3c0p.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv__k3c0p.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv__k3c0p.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv__k3c0p.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.002361 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    423.55 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xe3ko5u\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xe3ko5u.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xe3ko5u.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xe3ko5u.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xe3ko5u.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xe3ko5u.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xe3ko5u.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xe3ko5u.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2xe3ko5u.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000664 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1506.02 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudgt3yrm\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudgt3yrm.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudgt3yrm.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudgt3yrm.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudgt3yrm.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudgt3yrm.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudgt3yrm.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudgt3yrm.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpudgt3yrm.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.002499 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    400.16 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zz3mcby\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zz3mcby.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zz3mcby.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zz3mcby.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zz3mcby.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zz3mcby.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zz3mcby.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9zz3mcby.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000647 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1545.60 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmsbuc9c\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmsbuc9c.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmsbuc9c.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmsbuc9c.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmsbuc9c.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmsbuc9c.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmsbuc9c.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmsbuc9c.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbmsbuc9c.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.008099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.47 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwzg7hqs\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwzg7hqs.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwzg7hqs.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwzg7hqs.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwzg7hqs.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwzg7hqs.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwzg7hqs.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwzg7hqs.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxwzg7hqs.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.007152 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.82 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_xd3okt\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_xd3okt.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_xd3okt.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_xd3okt.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_xd3okt.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_xd3okt.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_xd3okt.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_xd3okt.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_xd3okt.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001271 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    786.78 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply3izu5f\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply3izu5f.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply3izu5f.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply3izu5f.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply3izu5f.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply3izu5f.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply3izu5f.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply3izu5f.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmply3izu5f.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1434.72 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72mm528q\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72mm528q.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72mm528q.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72mm528q.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72mm528q.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72mm528q.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72mm528q.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72mm528q.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp72mm528q.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000626 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1597.44 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxy70g2\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxy70g2.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxy70g2.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxy70g2.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxy70g2.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxy70g2.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxy70g2.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxy70g2.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxy70g2.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.001388 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    720.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynhssxpo\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynhssxpo.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynhssxpo.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynhssxpo.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynhssxpo.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynhssxpo.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynhssxpo.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynhssxpo.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpynhssxpo.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1492.54 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof60hl0k\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof60hl0k.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof60hl0k.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof60hl0k.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof60hl0k.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof60hl0k.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof60hl0k.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof60hl0k.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpof60hl0k.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000683 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1464.13 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi85_lgw\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi85_lgw.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi85_lgw.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi85_lgw.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi85_lgw.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi85_lgw.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi85_lgw.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi85_lgw.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmi85_lgw.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000676 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1479.29 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8ylr541\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8ylr541.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8ylr541.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8ylr541.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8ylr541.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8ylr541.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8ylr541.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8ylr541.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps8ylr541.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1536.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gz4czg2\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gz4czg2.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gz4czg2.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gz4czg2.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gz4czg2.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gz4czg2.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gz4czg2.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gz4czg2.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gz4czg2.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000665 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1503.76 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7vw1rub\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7vw1rub.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7vw1rub.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7vw1rub.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7vw1rub.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7vw1rub.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7vw1rub.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7vw1rub.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph7vw1rub.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1477.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [num.digits.sum, idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_p49vtt\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_p49vtt.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_p49vtt.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_p49vtt.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_p49vtt.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_p49vtt.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_p49vtt.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_p49vtt.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl_p49vtt.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1414.43 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpziirn549\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpziirn549.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpziirn549.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpziirn549.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpziirn549.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpziirn549.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpziirn549.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpziirn549.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpziirn549.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000677 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1477.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw065ame\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw065ame.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw065ame.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw065ame.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw065ame.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw065ame.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw065ame.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw065ame.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcw065ame.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.038198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.18 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gy4rwqg\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gy4rwqg.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gy4rwqg.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gy4rwqg.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gy4rwqg.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gy4rwqg.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gy4rwqg.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gy4rwqg.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1gy4rwqg.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000672 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1488.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kn4eqfd\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kn4eqfd.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kn4eqfd.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kn4eqfd.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kn4eqfd.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kn4eqfd.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kn4eqfd.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kn4eqfd.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000551 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1814.88 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6atzjg38\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6atzjg38.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6atzjg38.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6atzjg38.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6atzjg38.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6atzjg38.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6atzjg38.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6atzjg38.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6atzjg38.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1610.31 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vp8_2dc\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vp8_2dc.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vp8_2dc.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vp8_2dc.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vp8_2dc.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vp8_2dc.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vp8_2dc.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vp8_2dc.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1730.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [sum_of_digits(num), idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p1oigwg\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x000000010476b970 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x000000010476b948 @start_time=2022-07-28\
    \ 16:17:20.796709 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00000001047a4388\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x000000010491fac8\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x000000010476b970 ...>\n\
    \  \n    nums.sort_by.with_index { |num, idx| [sum_of_digits(num), idx] }\n  \
    \                                        ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x000000010496bc48>, @failures=[], @errors=[#<Test::Unit::Error:0x000000010491fac8\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x000000010476b970 ...>\n\
    \  \n    nums.sort_by.with_index { |num, idx| [sum_of_digits(num), idx] }\n  \
    \                                        ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x000000010496ba68 @a_proc=#<Proc:0x000000010496ba90\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4371954320>=>#<Proc:0x000000010496ba90 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010496b4c8\
    \ @a_proc=#<Proc:0x000000010496b4f0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4371952880>=>#<Proc:0x000000010496b4f0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010496b040\
    \ @a_proc=#<Proc:0x000000010496b068 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4371951720>=>#<Proc:0x000000010496b068 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x000000010496ac30\
    \ @a_proc=#<Proc:0x000000010496ac58 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4371950680>=>#<Proc:0x000000010496ac58 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p1oigwg.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p1oigwg.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p1oigwg.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p1oigwg.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p1oigwg.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p1oigwg.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6p1oigwg.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.013542 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.84 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wbc1i5v\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wbc1i5v.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wbc1i5v.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wbc1i5v.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wbc1i5v.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wbc1i5v.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wbc1i5v.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wbc1i5v.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1wbc1i5v.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000649 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1540.83 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5upapnp\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5upapnp.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5upapnp.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5upapnp.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5upapnp.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5upapnp.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5upapnp.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5upapnp.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk5upapnp.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000671 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1490.31 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vjwsbzq\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x0000000105301848 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x0000000105301820 @start_time=2022-07-28\
    \ 16:17:20.822855 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00000001054195f0\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000000105410f18\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000105301848 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x0000000105419118>, @failures=[], @errors=[#<Test::Unit::Error:0x0000000105410f18\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000105301848 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000000105418ee8 @a_proc=#<Proc:0x0000000105418f10\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4383149840>=>#<Proc:0x0000000105418f10 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000105418a10\
    \ @a_proc=#<Proc:0x0000000105418a60 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4383148640>=>#<Proc:0x0000000105418a60 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000105418600\
    \ @a_proc=#<Proc:0x0000000105418628 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4383147560>=>#<Proc:0x0000000105418628 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001054180d8\
    \ @a_proc=#<Proc:0x0000000105418100 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4383146240>=>#<Proc:0x0000000105418100 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vjwsbzq.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vjwsbzq.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vjwsbzq.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vjwsbzq.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vjwsbzq.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vjwsbzq.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vjwsbzq.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.011065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    90.38 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80atdtf7\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80atdtf7.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80atdtf7.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80atdtf7.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80atdtf7.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80atdtf7.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80atdtf7.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80atdtf7.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp80atdtf7.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1584.79 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyuofan7\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyuofan7.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyuofan7.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyuofan7.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyuofan7.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyuofan7.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyuofan7.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyuofan7.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyuofan7.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00067 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1492.54 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.digits.sum, nums.index(num)] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnvr_d72\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnvr_d72.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnvr_d72.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnvr_d72.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnvr_d72.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnvr_d72.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnvr_d72.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphnvr_d72.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000558 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1792.11 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0pda1k\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0pda1k.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0pda1k.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0pda1k.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0pda1k.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0pda1k.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0pda1k.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0pda1k.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyr0pda1k.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00065 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1538.46 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoi7yups\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoi7yups.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoi7yups.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoi7yups.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoi7yups.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoi7yups.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoi7yups.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoi7yups.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqoi7yups.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00062 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1612.90 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23u_03uu\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x0000000105173940 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x0000000105173918 @start_time=2022-07-28\
    \ 16:17:20.925089 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x00000001051ac3a8\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000000105273b10\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000105173940 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x00000001052bfcb8>, @failures=[], @errors=[#<Test::Unit::Error:0x0000000105273b10\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x0000000105173940 ...>\n\
    \  \n    nums.sort_by.with_index { |num, i| [sum_of_digits(num), i] }\n      \
    \                                  ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x00000001052bfab0 @a_proc=#<Proc:0x00000001052bfad8\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4381735640>=>#<Proc:0x00000001052bfad8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001052bf510\
    \ @a_proc=#<Proc:0x00000001052bf538 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4381734200>=>#<Proc:0x00000001052bf538 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001052bf088\
    \ @a_proc=#<Proc:0x00000001052bf0b0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4381733040>=>#<Proc:0x00000001052bf0b0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001052bec78\
    \ @a_proc=#<Proc:0x00000001052beca0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4381732000>=>#<Proc:0x00000001052beca0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23u_03uu.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23u_03uu.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23u_03uu.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23u_03uu.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23u_03uu.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23u_03uu.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23u_03uu.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.01094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.41 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vemfonh\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vemfonh.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vemfonh.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vemfonh.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vemfonh.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vemfonh.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vemfonh.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vemfonh.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vemfonh.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1552.80 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, index| [num.digits.sum, index] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyl52sc6\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyl52sc6.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyl52sc6.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyl52sc6.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyl52sc6.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyl52sc6.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyl52sc6.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyl52sc6.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkyl52sc6.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000646 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1547.99 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hpf6ok1\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hpf6ok1.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hpf6ok1.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hpf6ok1.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hpf6ok1.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hpf6ok1.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hpf6ok1.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hpf6ok1.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1hpf6ok1.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000651 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1536.10 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe6_t5om\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe6_t5om.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe6_t5om.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe6_t5om.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe6_t5om.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe6_t5om.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe6_t5om.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe6_t5om.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbe6_t5om.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    934.58 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, idx| [sum_of_digits(num), idx] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4o3eh1fp\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval):\n  NoMethodError: undefined method\
    \ `sum_of_digits' for #<TestHumanEval:0x00000001050f1800 @method_name=\"test_order_by_points\"\
    , @internal_data=#<Test::Unit::TestCase::InternalData:0x00000001050f17d8 @start_time=2022-07-28\
    \ 16:17:20.918464 -0400, @elapsed_time=nil, @passed=false, @interrupted=true,\
    \ @test_data_label=nil, @test_data=nil>, @_result=#<Test::Unit::TestResult:0x0000000105209580\
    \ @assertion_count=0, @pass_count=0, @run_count=0, @summary_generators=[:failure_summary,\
    \ :error_summary, :pending_summary, :omission_summary, :notification_summary],\
    \ @problem_checkers=[:failure_occurred?, :error_occurred?], @faults=[#<Test::Unit::Error:0x0000000105200e80\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x00000001050f1800 ...>\n\
    \  \n    nums.sort_by.with_index { |num, idx| [sum_of_digits(num), idx] }\n  \
    \                                        ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @stop_tag=#<Object:0x00000001052090d0>, @failures=[], @errors=[#<Test::Unit::Error:0x0000000105200e80\
    \ @test_name=\"test_order_by_points(TestHumanEval)\", @exception=#<NoMethodError:\
    \ undefined method `sum_of_digits' for #<TestHumanEval:0x00000001050f1800 ...>\n\
    \  \n    nums.sort_by.with_index { |num, idx| [sum_of_digits(num), idx] }\n  \
    \                                        ^^^^^^^^^^^^^>, @method_name=\"test_order_by_points\"\
    >], @pendings=[], @omissions=[], @notifications=[], @channels={\"Test::Unit::TestResult::FINISHED\"\
    =>{#<Test::Unit::Util::ProcWrapper:0x0000000105208e78 @a_proc=#<Proc:0x0000000105208ea0\
    \ /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>,\
    \ @hash=4380987040>=>#<Proc:0x0000000105208ea0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:88>},\
    \ \"Test::Unit::TestResult::CHANGED\"=>{#<Test::Unit::Util::ProcWrapper:0x00000001052089c8\
    \ @a_proc=#<Proc:0x00000001052089f0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>,\
    \ @hash=4380985840>=>#<Proc:0x00000001052089f0 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:91>},\
    \ \"Test::Unit::TestResult::PASS_ASSERTION\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000105208590\
    \ @a_proc=#<Proc:0x00000001052085b8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>,\
    \ @hash=4380984760>=>#<Proc:0x00000001052085b8 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:94>},\
    \ \"Test::Unit::TestResult::FAULT\"=>{#<Test::Unit::Util::ProcWrapper:0x0000000105208068\
    \ @a_proc=#<Proc:0x0000000105208090 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>,\
    \ @hash=4380983440>=>#<Proc:0x0000000105208090 /opt/homebrew/Cellar/ruby/3.1.2/lib/ruby/gems/3.1.0/gems/test-unit-3.5.3/lib/test/unit/ui/testrunnermediator.rb:97>}}>>\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4o3eh1fp.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4o3eh1fp.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4o3eh1fp.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4o3eh1fp.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4o3eh1fp.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4o3eh1fp.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4o3eh1fp.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.01095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    91.32 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc8efna7\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc8efna7.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc8efna7.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc8efna7.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc8efna7.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc8efna7.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc8efna7.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc8efna7.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxc8efna7.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.000667 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1499.25 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by.with_index { |num, i| [num.digits.sum, i] }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n    candidate\
    \ = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12, 11], candidate.call([1,\
    \ 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1, -11, -32,\
    \ 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9],\
    \ candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_agkfl5\n\
    Started\nE\n===============================================================================\n\
    Error: test_order_by_points(TestHumanEval): Math::DomainError: out of domain\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_agkfl5.rb:9:in `digits'\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_agkfl5.rb:9:in `block in\
    \ order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_agkfl5.rb:9:in\
    \ `each'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_agkfl5.rb:9:in\
    \ `sort_by'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_agkfl5.rb:9:in\
    \ `with_index'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_agkfl5.rb:9:in\
    \ `order_by_points'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_agkfl5.rb:15:in\
    \ `call'\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq_agkfl5.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n===============================================================================\n\
    \nFinished in 0.00061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    1639.34 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Write a function which sorts the given list of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([]) == []\ndef order_by_points(nums)\n\
    \  nums.sort_by { |num| [num.abs.digits.sum, nums.index(num)] }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_order_by_points\n\
    \    candidate = method(:order_by_points)\n    assert_equal([-1, -11, 1, -12,\
    \ 11], candidate.call([1, 11, -1, -11, -12]))\n    assert_equal([0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457], candidate.call([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]))\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n    assert_equal([1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    assert_equal([-76,\
    \ -21, 0, 4, 23, 6, 6], candidate.call([0, 6, 6, -76, -21, 23, 4]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0g5dlqp5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_order_by_points(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0g5dlqp5.rb:15:in\
    \ `test_order_by_points'\n     12: class TestHumanEval < Test::Unit::TestCase\n\
    \     13:   def test_order_by_points\n     14:     candidate = method(:order_by_points)\n\
    \  => 15:     assert_equal([-1, -11, 1, -12, 11], candidate.call([1, 11, -1, -11,\
    \ -12]))\n     16:     assert_equal([0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457], candidate.call([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]))\n     17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([-3, -32, -98, -11, 1, 2, 43, 54], candidate.call([1,\
    \ -11, -32, 43, 54, -98, 2, -3]))\n<[-1, -11, 1, -12, 11]> expected but was\n\
    <[1, -1, 11, -11, -12]>\n\ndiff:\n? [1, -1, 11, -11, 1, -12, 11]\n===============================================================================\n\
    \nFinished in 0.0035 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    285.71 tests/s, 285.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
