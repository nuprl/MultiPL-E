name: HumanEval_104_unique_digits
language: ruby
prompt: "# Given a list of positive integers x. return a sorted list of all \n# elements\
  \ that hasn't any even digit.\n# Note: Returned list should be sorted in increasing\
  \ order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n\
  # >>> unique_digits([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
  \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
  \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n \
  \   assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
  \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
completions: ["  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\n\
    end", "  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? }\
    \ }.sort\nend", "  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end", "  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\nend", " \
    \ x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |i| i.to_s.split('').all? { |j| j.to_i.odd? } }.sort\nend", "  x.select {\
    \ |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "\tx.select { |num|\
    \ num.to_s.split('').all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select {\
    \ |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd? } }.sort\n\
    end", "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", " \
    \ x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select {\
    \ |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.none? { |digit| digit.to_i.even? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.split('').all? { |d| d.to_i.odd? } }.sort\nend", "  # your code\
    \ here\nend", "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? }\
    \ }.sort\nend", "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? }\
    \ }.sort\nend", "  x.select{|i| i.to_s.split('').all?{|j| j.to_i.odd?}}.sort\n\
    end", "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select\
    \ { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  # your code here\n\
    end", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend",
  "  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |i| i.to_s.split('').all? { |j| j.to_i.odd? } }.sort\nend", "  x.select {\
    \ |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select {\
    \ |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select {\
    \ |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.split('').all? { |d| d.to_i.odd? } }.sort\nend", "  # your code\
    \ here\nend", "  x.select { |num| num.to_s.split('').map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend", "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend", "  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd?\
    \ } }.sort\nend", "  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? }\
    \ }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? }\
    \ }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend",
  "  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd? } }.sort\nend",
  "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select\
    \ { |i| i.to_s.split('').all? { |j| j.to_i.odd? } }.sort\nend", "  x.select {\
    \ |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  # YOUR CODE HERE\n\
    end", "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.map(&:to_i).all? { |digit| digit.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\nend", "  x.select { |n|\
    \ n.to_s.split('').all? { |d| d.to_i.odd? } }.sort\nend", "  x.select { |n| n.to_s.chars.map(&:to_i).all?\
    \ { |d| d.odd? } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit|\
    \ digit.to_i.odd? } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit|\
    \ digit.to_i.odd? } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |char|\
    \ char.to_i.odd? } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |char|\
    \ char.to_i.odd? } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |char|\
    \ char.to_i.odd? } }.sort\nend", "  x.select { |num| num.to_s.split('').all? {\
    \ |digit| digit.to_i.odd? } }.sort\nend", "  x.select { |num| num.to_s.chars.all?\
    \ { |digit| digit.to_i.odd? } }.sort\nend", "  x.select { |n| n.to_s.chars.all?\
    \ { |c| c.to_i.odd? } }.sort\nend", "  # your code here\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select {\
    \ |num| num.to_s.split('').all? { |n| n.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.split('').all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.split('').map(&:to_i).all? { |n| n.odd? } }.sort\nend", "  x.select\
    \ { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.split('').all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select { |n|\
    \ n.to_s.chars.map(&:to_i).all? { |d| d.odd? } }.sort\nend", "  x.select { |num|\
    \ num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend", "  # your code\
    \ here\nend", "  # Your code goes here\nend", "  x.select { |num| num.to_s.chars.all?\
    \ { |digit| digit.to_i.odd? } }.sort\nend", "  x.select { |n| n.to_s.chars.all?\
    \ { |c| c.to_i.odd? } }.sort\nend", "  x.select { |n| n.to_s.chars.map(&:to_i).all?\
    \ { |d| d.odd? } }.sort\nend", "  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |i| i.to_s.chars.all? { |i| i.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? }\
    \ }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend", "  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end", "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend",
  "  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? } }.sort\nend", " \
    \ # Your code here\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend", "  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\n\
    end", "  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.split('').all? { |digit| digit.to_i.odd? } }.sort\nend", " \
    \ x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd? } }.sort\nend",
  "  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\nend", "  x.select\
    \ { |num| num.to_s.chars.all? { |char| char.to_i.odd? } }.sort\nend", "  x.select\
    \ { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select { |n|\
    \ n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\nend", "  x.select { |num| num.to_s.chars.all?\
    \ { |digit| digit.to_i.odd? } }.sort\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
