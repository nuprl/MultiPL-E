name: HumanEval_9_rolling_max
language: ruby
results:
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers.first\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_i2vnpja\nStarted\n.\nFinished in 0.000357372 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2798.20 tests/s, 11192.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpagamv91p\nStarted\n.\nFinished in 0.00031337 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3191.12 tests/s, 12764.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw4dw9joe\nStarted\n.\nFinished in 0.00025991 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3847.49 tests/s, 15389.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnnot9yno\nStarted\n.\nFinished in 0.000353065 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2832.34 tests/s, 11329.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    max = number if number > max\n   \
    \ result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgrsxtyf_\nStarted\n.\nFinished in 0.000341693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2926.60 tests/s, 11706.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwadjgsnj\nStarted\n.\nFinished in 0.000465996 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2145.94 tests/s, 8583.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzq4mqpd0\nStarted\n.\nFinished in 0.000337074 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2966.71 tests/s, 11866.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnb_h1y41\nStarted\n.\nFinished in 0.000390704 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2559.48 tests/s, 10237.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvw0g61eh\nStarted\n.\nFinished in 0.000341873 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2925.06 tests/s, 11700.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpaz2ko3il\nStarted\n.\nFinished in 0.000357363 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2798.28 tests/s, 11193.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk4yv7js3\nStarted\n.\nFinished in 0.000328178 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3047.13 tests/s, 12188.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj0n9mn_d\nStarted\n.\nFinished in 0.000370978 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2695.58 tests/s, 10782.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result[-1]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnngdf6x1\nStarted\n.\nFinished in 0.000395303 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2529.71 tests/s, 10118.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0ua45jo3\nStarted\n.\nFinished in 0.000449585 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2224.27 tests/s, 8897.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcz0ywq4k\nStarted\n.\nFinished in 0.000340089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2940.41 tests/s, 11761.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq_gzrvtp\nStarted\n.\nFinished in 0.00037242 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2685.14 tests/s, 10740.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcwjv2xku\nStarted\n.\nFinished in 0.00031889 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3135.88 tests/s, 12543.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |number, index| numbers[0..index].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj0phxyxx\nStarted\n.\nFinished in 0.000363002 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2754.81 tests/s, 11019.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcbm6u8w9\nStarted\n.\nFinished in 0.000342854 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2916.69 tests/s, 11666.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl2q2vgna\nStarted\n.\nFinished in 0.000323658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3089.68 tests/s, 12358.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "/tmp/tmpmq45vnmh.rb:9: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmq45vnmh.rb:17: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa2vzbxwo\nStarted\n.\nFinished in 0.000329479 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3035.09 tests/s, 12140.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmqu7t_6q\nStarted\n.\nFinished in 0.000344138 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2905.81 tests/s, 11623.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << numbers[0..numbers.index(number)].max\n \
    \ end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3kqmewc5\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmp3kqmewc5.rb:17:in `test_rolling_max'\n\
    \     14:     assert_equal([], candidate.call([]))\n     15:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n  => 17:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     18:   end\n     19: end\n<[3,\
    \ 3, 3, 100, 100]> expected but was\n<[3, 3, 3, 100, 3]>\n\ndiff:\n? [3, 3, 3,\
    \ 100, 100]\n?                3   \n===============================================================================\n\
    \nFinished in 0.005622592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.85 tests/s, 711.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2p5ugrtl\nStarted\n.\nFinished in 0.000357813 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2794.76 tests/s, 11179.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp88zyygo9\nStarted\n.\nFinished in 0.000325452 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3072.65 tests/s, 12290.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    max = number if number > max\n\
    \    max_numbers << max\n  end\n  max_numbers\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5oramjei\nStarted\n.\nFinished in 0.000342514 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2919.59 tests/s, 11678.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp07tpjj2m\nStarted\n.\nFinished in 0.000346492 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2886.07 tests/s, 11544.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    if number > max\n      max = number\n    else\n\
    \      max\n    end\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppxxmbh1a\nStarted\n.\nFinished in 0.000410081 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2438.54 tests/s, 9754.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number > max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprijptz5b\nStarted\n.\nFinished in 0.000334059 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2993.48 tests/s, 11973.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |n, result|\n    result << (result.last || n)\n    result[-1] = n if n >\
    \ result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmayudy0i\nStarted\n.\nFinished in 0.000337443 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2963.46 tests/s, 11853.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5i3yi1p2\nStarted\n.\nFinished in 0.000359466 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2781.90 tests/s, 11127.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6bt4fl2m\nStarted\n.\nFinished in 0.000349147 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2864.12 tests/s, 11456.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |n, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8_cun353\nStarted\n.\nFinished in 0.000349467 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2861.50 tests/s, 11446.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    if number > max\n    \
    \  max = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpth5wlbgy\nStarted\n.\nFinished in 0.000327286 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3055.43 tests/s, 12221.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv2fb1k7n\nStarted\n.\nFinished in 0.000408458 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2448.23 tests/s, 9792.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result[-1]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpok905ror\nStarted\n.\nFinished in 0.000581914 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1718.47 tests/s, 6873.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n\
    \      max = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0oxsl42n\nStarted\n.\nFinished in 0.000349857 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2858.31 tests/s, 11433.24 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number >= max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph4ihtp46\nStarted\n.\nFinished in 0.000447803 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2233.12 tests/s, 8932.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpls4387r6\nStarted\n.\nFinished in 0.000311064 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3214.77 tests/s, 12859.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = []\n \
    \ numbers.each_with_index do |number, index|\n    max << numbers[0..index].max\n\
    \  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0hctkvdj\nStarted\n.\nFinished in 0.000345219 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2896.71 tests/s, 11586.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcid05chx\nStarted\n.\nFinished in 0.000392899 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2545.18 tests/s, 10180.73 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpj7tva34_\nStarted\n.\nFinished in 0.000374424 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2670.77 tests/s, 10683.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcayq6dhf\nStarted\n.\nFinished in 0.000376267 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2657.69 tests/s, 10630.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5cdvdu9d\nStarted\n.\nFinished in 0.000530046 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1886.63 tests/s, 7546.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr8xs6tek\nStarted\n.\nFinished in 0.000316565 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3158.91 tests/s, 12635.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfni94bt7\nStarted\n.\nFinished in 0.000406745 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2458.54 tests/s, 9834.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = []\n \
    \ numbers.each_with_index do |number, index|\n    max[index] = numbers[0..index].max\n\
    \  end\n  max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprtflkq_f\nStarted\n.\nFinished in 0.000338226 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2956.60 tests/s, 11826.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  numbers.each_with_index do |number, index|\n    max_numbers[index] =\
    \ numbers[0..index].max\n  end\n  max_numbers\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqsulpxw6\nStarted\n.\nFinished in 0.000337395 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2963.89 tests/s, 11855.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |num|\n    if num > max\n      max = num\n    end\n    max\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_m3a0ms6\nStarted\n.\nFinished in 0.000347754 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2875.60 tests/s, 11502.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result.last\
    \ = number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmp9hdu7hf_\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval):\n  NoMethodError: undefined method `last='\
    \ for [1, 1]:Array\n  Did you mean?  last\n/tmp/tmp9hdu7hf_.rb:8:in `block in\
    \ rolling_max'\n/tmp/tmp9hdu7hf_.rb:6:in `each'\n/tmp/tmp9hdu7hf_.rb:6:in `each_with_object'\n\
    /tmp/tmp9hdu7hf_.rb:6:in `rolling_max'\n/tmp/tmp9hdu7hf_.rb:16:in `call'\n/tmp/tmp9hdu7hf_.rb:16:in\
    \ `test_rolling_max'\n     13:   def test_rolling_max\n     14:     candidate\
    \ = method(:rolling_max)\n     15:     assert_equal([], candidate.call([]))\n\
    \  => 16:     assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n     18:     assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.003402608 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.89 tests/s, 293.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppsfe8ti7\nStarted\n.\nFinished in 0.000350018 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2857.00 tests/s, 11427.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |num|\n    max = num if num > max\n    max\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_dtli6w7\nStarted\n.\nFinished in 0.000316917 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3155.40 tests/s, 12621.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfa2dcc44\nStarted\n.\nFinished in 0.000336263 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2973.86 tests/s, 11895.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprdgl3ou1\nStarted\n.\nFinished in 0.000392658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2546.75 tests/s, 10186.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbi1h45sm\nStarted\n.\nFinished in 0.000335169 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2983.57 tests/s, 11934.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_hmyjt4g\nStarted\n.\nFinished in 0.000352353 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2838.06 tests/s, 11352.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9ireide6\nStarted\n.\nFinished in 0.000346031 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2889.91 tests/s, 11559.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzfvkxjxe\nStarted\n.\nFinished in 0.000367561 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2720.64 tests/s, 10882.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa5t6td8y\nStarted\n.\nFinished in 0.000346681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2884.50 tests/s, 11537.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd517hwmt\nStarted\n.\nFinished in 0.00030835 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3243.07 tests/s, 12972.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpumwbqtav\nStarted\n.\nFinished in 0.000338857 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2951.10 tests/s, 11804.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    max = number if number > max\n   \
    \ result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnpd6tmg2\nStarted\n.\nFinished in 0.000381367 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2622.15 tests/s, 10488.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |num, result|\n    result << result.last.to_i.max(num)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7cybya6w\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval): NoMethodError: undefined method `max'\
    \ for 0:Integer\n/tmp/tmp7cybya6w.rb:7:in `block in rolling_max'\n/tmp/tmp7cybya6w.rb:6:in\
    \ `each'\n/tmp/tmp7cybya6w.rb:6:in `each_with_object'\n/tmp/tmp7cybya6w.rb:6:in\
    \ `rolling_max'\n/tmp/tmp7cybya6w.rb:15:in `call'\n/tmp/tmp7cybya6w.rb:15:in `test_rolling_max'\n\
    \     12:   def test_rolling_max\n     13:     candidate = method(:rolling_max)\n\
    \     14:     assert_equal([], candidate.call([]))\n  => 15:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n     17:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     18:   end\n===============================================================================\n\
    \nFinished in 0.00206353 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    484.61 tests/s, 484.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoxtnuwqj\nStarted\n.\nFinished in 0.000434056 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2303.85 tests/s, 9215.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = nil\n  numbers.each do |number|\n    max = number if max.nil? || number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpui3qb3ww\nStarted\n.\nFinished in 0.000348876 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2866.35 tests/s, 11465.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp29ub6srg\nStarted\n.\nFinished in 0.000312769 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3197.25 tests/s, 12788.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0agdafab\nStarted\n.\nFinished in 0.000367401 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2721.82 tests/s, 10887.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6gjarolf\nStarted\n.\nFinished in 0.000474922 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2105.61 tests/s, 8422.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp0bpgkhx9\nStarted\n.\nFinished in 0.000489059 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2044.74 tests/s, 8178.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe1p5ujbg\nStarted\n.\nFinished in 0.0003722 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2686.73 tests/s, 10746.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmhjl3hv9\nStarted\n.\nFinished in 0.000346281 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2887.83 tests/s, 11551.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpeivi04xx\nStarted\n.\nFinished in 0.000332586 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3006.74 tests/s, 12026.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoby6uh3v\nStarted\n.\nFinished in 0.000345961 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2890.50 tests/s, 11562.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpebd05kb0\nStarted\n.\nFinished in 0.000321555 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3109.89 tests/s, 12439.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphdpsogav\nStarted\n.\nFinished in 0.000360507 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2773.87 tests/s, 11095.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpml1fq6xz\nStarted\n.\nFinished in 0.00031907 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3134.11 tests/s, 12536.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpytn2vdq6\nStarted\n.\nFinished in 0.000354537 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2820.58 tests/s, 11282.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnrw2nhh3\nStarted\n.\nFinished in 0.000394893 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2532.33 tests/s, 10129.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  # TODO: implement\
    \ me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n \
    \ def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmoprh7k5\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpmoprh7k5.rb:12:in `test_rolling_max'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_rolling_max\n\
    \     11:     candidate = method(:rolling_max)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n     14:     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2,\
    \ 1]))\n     15:     assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3,\
    \ 100, 3]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004673246 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.98 tests/s, 213.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqtq7plnk\nStarted\n.\nFinished in 0.000323517 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3091.03 tests/s, 12364.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy77o63ck\nStarted\n.\nFinished in 0.000341582 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2927.55 tests/s, 11710.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyavc9tib\nStarted\n.\nFinished in 0.000414449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2412.84 tests/s, 9651.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm591p2af\nStarted\n.\nFinished in 0.000293482 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3407.36 tests/s, 13629.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpclxpccrc\nStarted\n.\nFinished in 0.000316536 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3159.20 tests/s, 12636.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9hhyn4j8\nStarted\n.\nFinished in 0.000346853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2883.07 tests/s, 11532.26 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_8swornn\nStarted\n.\nFinished in 0.000412145 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2426.33 tests/s, 9705.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwsp11y6p\nStarted\n.\nFinished in 0.000466598 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2143.17 tests/s, 8572.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpp4pvojkb\nStarted\n.\nFinished in 0.000412426 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2424.68 tests/s, 9698.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp23sqt77w\nStarted\n.\nFinished in 0.000408738 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2446.56 tests/s, 9786.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphiiup0ph\nStarted\n.\nFinished in 0.000401605 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2490.01 tests/s, 9960.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number > max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp67i6imh4\nStarted\n.\nFinished in 0.000375586 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2662.51 tests/s, 10650.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxknl77zb\nStarted\n.\nFinished in 0.000337785 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2960.46 tests/s, 11841.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzpiwuj9t\nStarted\n.\nFinished in 0.000369836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2703.90 tests/s, 10815.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt06ml64n\nStarted\n.\nFinished in 0.00037773 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2647.39 tests/s, 10589.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb841un4x\nStarted\n.\nFinished in 0.000360899 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2770.86 tests/s, 11083.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_values =\
    \ []\n  max_value = numbers.first\n  numbers.each do |number|\n    max_value =\
    \ number if number > max_value\n    max_values << max_value\n  end\n  max_values\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwit6mut2\nStarted\n.\nFinished in 0.000354176 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2823.46 tests/s, 11293.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1i_ocptn\nStarted\n.\nFinished in 0.000369565 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2705.88 tests/s, 10823.54 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    if number > max\n    \
    \  max = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpe8wc8hxu\nStarted\n.\nFinished in 0.000377349 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2650.07 tests/s, 10600.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || 0)\n    result.last = [result.last,\
    \ number].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1rmh6u7v\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval):\n  NoMethodError: undefined method `last='\
    \ for [0]:Array\n  Did you mean?  last\n/tmp/tmp1rmh6u7v.rb:8:in `block in rolling_max'\n\
    /tmp/tmp1rmh6u7v.rb:6:in `each'\n/tmp/tmp1rmh6u7v.rb:6:in `each_with_object'\n\
    /tmp/tmp1rmh6u7v.rb:6:in `rolling_max'\n/tmp/tmp1rmh6u7v.rb:16:in `call'\n/tmp/tmp1rmh6u7v.rb:16:in\
    \ `test_rolling_max'\n     13:   def test_rolling_max\n     14:     candidate\
    \ = method(:rolling_max)\n     15:     assert_equal([], candidate.call([]))\n\
    \  => 16:     assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n     18:     assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.003321044 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.11 tests/s, 301.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjabr25w3\nStarted\n.\nFinished in 0.00035613 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2807.96 tests/s, 11231.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplukgcej4\nStarted\n.\nFinished in 0.000351612 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2844.04 tests/s, 11376.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjzqncqj_\nStarted\n.\nFinished in 0.000309291 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3233.20 tests/s, 12932.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvdemptf_\nStarted\n.\nFinished in 0.000358514 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2789.29 tests/s, 11157.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |_, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpjloczacb\nStarted\n.\nFinished in 0.000407416 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2454.49 tests/s, 9817.97 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number > max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp71hgo3yf\nStarted\n.\nFinished in 0.00033477 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2987.13 tests/s, 11948.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "/tmp/tmpc20564kx.rb:9: class definition in method body\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n/tmp/tmpc20564kx.rb:17: syntax\
    \ error, unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpk7ycwndq\nStarted\n.\nFinished in 0.000346532 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2885.74 tests/s, 11542.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb0j175l8\nStarted\n.\nFinished in 0.000347462 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2878.01 tests/s, 11512.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd81_77ab\nStarted\n.\nFinished in 0.000352063 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2840.40 tests/s, 11361.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfcxxm713\nStarted\n.\nFinished in 0.000348816 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2866.84 tests/s, 11467.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdqvmcafm\nStarted\n.\nFinished in 0.000352352 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2838.07 tests/s, 11352.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp02syasoy\nStarted\n.\nFinished in 0.000375085 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2666.06 tests/s, 10664.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg5y8geb1\nStarted\n.\nFinished in 0.000336723 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2969.80 tests/s, 11879.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5nbsqy1q\nStarted\n.\nFinished in 0.000349958 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2857.49 tests/s, 11429.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqxx_w86g\nStarted\n.\nFinished in 0.000376969 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2652.74 tests/s, 10610.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_list = []\n\
    \  max = 0\n  numbers.each do |number|\n    max = number if number > max\n   \
    \ max_list << max\n  end\n  max_list\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3jxx3o08\nStarted\n.\nFinished in 0.000405513 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2466.01 tests/s, 9864.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyq8fbvd1\nStarted\n.\nFinished in 0.000361891 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2763.26 tests/s, 11053.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.empty? ? number : [result.last, number].max)\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn_d_5wc8\nStarted\n.\nFinished in 0.000445979 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2242.26 tests/s, 8969.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmputyic7h3\nStarted\n.\nFinished in 0.000305584 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3272.42 tests/s, 13089.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = []\n \
    \ numbers.each do |number|\n    max << number if max.empty? || number > max.last\n\
    \    max << max.last if number <= max.last\n  end\n  max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6a19dzhx\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmp6a19dzhx.rb:18:in `test_rolling_max'\n\
    \     15:   def test_rolling_max\n     16:     candidate = method(:rolling_max)\n\
    \     17:     assert_equal([], candidate.call([]))\n  => 18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     19:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n     20:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     21:   end\n<[1, 2, 3, 4]> expected\
    \ but was\n<[1, 1, 2, 2, 3, 3, 4, 4]>\n\ndiff:\n? [1, 1, 2, 2, 3, 3, 4, 4]\n===============================================================================\n\
    \nFinished in 0.005560424 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.84 tests/s, 359.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkevjkpxj\nStarted\n.\nFinished in 0.000317617 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3148.45 tests/s, 12593.78 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqg5z29wr\nStarted\n.\nFinished in 0.000468621 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2133.92 tests/s, 8535.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpw5pi7iwv\nStarted\n.\nFinished in 0.00034084 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2933.93 tests/s, 11735.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpui6bq4sw\nStarted\n.\nFinished in 0.000368082 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2716.79 tests/s, 10867.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpooo18dk9\nStarted\n.\nFinished in 0.000317778 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3146.85 tests/s, 12587.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpanawnhve\nStarted\n.\nFinished in 0.000360407 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2774.64 tests/s, 11098.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_numbers << numbers[0]\n  numbers[1..-1].each do |number|\n    max_numbers\
    \ << [max_numbers.last, number].max\n  end\n  max_numbers\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq8kxiqer\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval): NoMethodError: undefined method `each'\
    \ for nil:NilClass\n/tmp/tmpq8kxiqer.rb:8:in `rolling_max'\n/tmp/tmpq8kxiqer.rb:17:in\
    \ `call'\n/tmp/tmpq8kxiqer.rb:17:in `test_rolling_max'\n     14: class TestHumanEval\
    \ < Test::Unit::TestCase\n     15:   def test_rolling_max\n     16:     candidate\
    \ = method(:rolling_max)\n  => 17:     assert_equal([], candidate.call([]))\n\
    \     18:     assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     19:\
    \     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n     20:     assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n===============================================================================\n\
    \nFinished in 0.001682032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 0 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    594.52 tests/s, 0.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7od0qzgi\nStarted\n.\nFinished in 0.000364966 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2739.98 tests/s, 10959.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt6zp8dn7\nStarted\n.\nFinished in 0.000352433 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2837.42 tests/s, 11349.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdyxevyyc\nStarted\n.\nFinished in 0.000357933 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2793.82 tests/s, 11175.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    max_number = number\
    \ if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmptfojaia7\nStarted\n.\nFinished in 0.000339378 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2946.57 tests/s, 11786.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa1ilflrh\nStarted\n.\nFinished in 0.000335762 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2978.30 tests/s, 11913.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppgrdxg35\nStarted\n.\nFinished in 0.000337634 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2961.79 tests/s, 11847.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx91we1ei\nStarted\n.\nFinished in 0.000344066 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2906.42 tests/s, 11625.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpudbnk0fa\nStarted\n.\nFinished in 0.00034031 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2938.50 tests/s, 11753.99 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp058ce07h\nStarted\n.\nFinished in 0.000352193 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2839.35 tests/s, 11357.41 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp53vnsha7\nStarted\n.\nFinished in 0.000342904 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2916.27 tests/s, 11665.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp01zej62s\nStarted\n.\nFinished in 0.000368453 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2714.05 tests/s, 10856.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2xssgyp2\nStarted\n.\nFinished in 0.000444416 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2250.14 tests/s, 9000.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_list = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    max_list << max\n  end\n  max_list\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpte4u6xv_\nStarted\n.\nFinished in 0.000332394 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3008.48 tests/s, 12033.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2a20kx0i\nStarted\n.\nFinished in 0.000442782 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2258.45 tests/s, 9033.79 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |num, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpr_wbndx5\nStarted\n.\nFinished in 0.000306416 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3263.54 tests/s, 13054.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |num, result|\n    result << (result.last || num)\n    result[-1] = num if\
    \ num > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsaf0bc9w\nStarted\n.\nFinished in 0.000322998 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3095.99 tests/s, 12383.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpg508nlpz\nStarted\n.\nFinished in 0.000330602 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3024.79 tests/s, 12099.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers.first\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy2ohn59g\nStarted\n.\nFinished in 0.000344508 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2902.69 tests/s, 11610.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |n, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5sswc423\nStarted\n.\nFinished in 0.000412776 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2422.62 tests/s, 9690.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpatyqiv48\nStarted\n.\nFinished in 0.000320662 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3118.55 tests/s, 12474.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2nmp4jp5\nStarted\n.\nFinished in 0.000360719 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2772.24 tests/s, 11088.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpy6em7u1i\nStarted\n.\nFinished in 0.000364084 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2746.62 tests/s, 10986.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    if number >\
    \ max_number\n      max_number = number\n    end\n    max_numbers << max_number\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwfhaw4hm\nStarted\n.\nFinished in 0.000341864 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2925.14 tests/s, 11700.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpgt643ex0\nStarted\n.\nFinished in 0.000330242 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3028.08 tests/s, 12112.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpppvrgyq2\nStarted\n.\nFinished in 0.000364786 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2741.33 tests/s, 10965.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |n, result|\n    result << numbers[0..numbers.index(n)].max\n  end\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgjixqdh8\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpgjixqdh8.rb:17:in `test_rolling_max'\n\
    \     14:     assert_equal([], candidate.call([]))\n     15:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     16:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n  => 17:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     18:   end\n     19: end\n<[3,\
    \ 3, 3, 100, 100]> expected but was\n<[3, 3, 3, 100, 3]>\n\ndiff:\n? [3, 3, 3,\
    \ 100, 100]\n?                3   \n===============================================================================\n\
    \nFinished in 0.007260762 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.73 tests/s, 550.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiyreo_vz\nStarted\n.\nFinished in 0.000367179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2723.47 tests/s, 10893.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5x7rzty5\nStarted\n.\nFinished in 0.001121969 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    891.29 tests/s, 3565.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppa1h0ohj\nStarted\n.\nFinished in 0.000345409 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2895.12 tests/s, 11580.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n\
    \      max = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp9g337u_j\nStarted\n.\nFinished in 0.000332154 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3010.65 tests/s, 12042.61 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyv7pa4pc\nStarted\n.\nFinished in 0.000743999 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1344.09 tests/s, 5376.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = []\n \
    \ numbers.each do |number|\n    max << number if max.empty? || number > max.last\n\
    \    max << max.last if number <= max.last\n  end\n  max\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp4rimheq8\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmp4rimheq8.rb:18:in `test_rolling_max'\n\
    \     15:   def test_rolling_max\n     16:     candidate = method(:rolling_max)\n\
    \     17:     assert_equal([], candidate.call([]))\n  => 18:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     19:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n     20:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     21:   end\n<[1, 2, 3, 4]> expected\
    \ but was\n<[1, 1, 2, 2, 3, 3, 4, 4]>\n\ndiff:\n? [1, 1, 2, 2, 3, 3, 4, 4]\n===============================================================================\n\
    \nFinished in 0.005719153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    174.85 tests/s, 349.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7hkjejwi\nStarted\n.\nFinished in 0.000493407 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2026.72 tests/s, 8106.90 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << number if result.empty?\n    result << [result.last,\
    \ number].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9d3g1tzw\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmp9d3g1tzw.rb:16:in `test_rolling_max'\n\
    \     13:   def test_rolling_max\n     14:     candidate = method(:rolling_max)\n\
    \     15:     assert_equal([], candidate.call([]))\n  => 16:     assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     17:     assert_equal([4, 4, 4,\
    \ 4], candidate.call([4, 3, 2, 1]))\n     18:     assert_equal([3, 3, 3, 100,\
    \ 100], candidate.call([3, 2, 3, 100, 3]))\n     19:   end\n<[1, 2, 3, 4]> expected\
    \ but was\n<[1, 1, 2, 3, 4]>\n\ndiff:\n? [1, 1, 2, 3, 4]\n===============================================================================\n\
    \nFinished in 0.005905113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.34 tests/s, 338.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5uzirofg\nStarted\n.\nFinished in 0.000322868 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3097.24 tests/s, 12388.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxcvg_6yj\nStarted\n.\nFinished in 0.000331073 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3020.48 tests/s, 12081.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt379om56\nStarted\n.\nFinished in 0.000426363 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2345.42 tests/s, 9381.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp3j_xy4ny\nStarted\n.\nFinished in 0.00036707 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2724.28 tests/s, 10897.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_list = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    max_list << max\n  end\n  max_list\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbmu7_g3_\nStarted\n.\nFinished in 0.000344678 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2901.26 tests/s, 11605.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    max_number = number\
    \ if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuz2yjj8r\nStarted\n.\nFinished in 0.000374054 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2673.41 tests/s, 10693.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbuycuroa\nStarted\n.\nFinished in 0.00043089 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2320.78 tests/s, 9283.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpiirezvns\nStarted\n.\nFinished in 0.000417827 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2393.34 tests/s, 9573.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_numbers << numbers[0]\n  numbers.each_with_index do |number, index|\n\
    \    next if index == 0\n    max_numbers << [max_numbers[index - 1], number].max\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpaldldxfo\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpaldldxfo.rb:18:in `test_rolling_max'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_rolling_max\n\
    \     17:     candidate = method(:rolling_max)\n  => 18:     assert_equal([],\
    \ candidate.call([]))\n     19:     assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n     20:     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2,\
    \ 1]))\n     21:     assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3,\
    \ 100, 3]))\n<[]> expected but was\n<[nil]>\n\ndiff:\n? [nil]\n===============================================================================\n\
    \nFinished in 0.004481807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.12 tests/s, 223.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    max = number if number > max\n\
    \    max_numbers << max\n  end\n  max_numbers\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2age5si0\nStarted\n.\nFinished in 0.000343196 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2913.79 tests/s, 11655.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6szsfs_5\nStarted\n.\nFinished in 0.000350199 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2855.52 tests/s, 11422.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpylvvd0dp\nStarted\n.\nFinished in 0.000345048 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2898.15 tests/s, 11592.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcphv2dip\nStarted\n.\nFinished in 0.000452853 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2208.22 tests/s, 8832.89 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpig4k32q6\nStarted\n.\nFinished in 0.000380185 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2630.30 tests/s, 10521.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1fomdtzb\nStarted\n.\nFinished in 0.00036708 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2724.20 tests/s, 10896.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7p6vat9k\nStarted\n.\nFinished in 0.00033557 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2980.00 tests/s, 11920.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc26vgnxn\nStarted\n.\nFinished in 0.000354757 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2818.83 tests/s, 11275.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    max = number if number >\
    \ max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpl8z6wkqt\nStarted\n.\nFinished in 0.000354836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2818.20 tests/s, 11272.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvvsvqyf1\nStarted\n.\nFinished in 0.000349919 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2857.80 tests/s, 11431.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp90d5aj77\nStarted\n.\nFinished in 0.00038813 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2576.46 tests/s, 10305.83 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers[0]\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxqbyopal\nStarted\n.\nFinished in 0.000413677 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2417.34 tests/s, 9669.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcwe7edkl\nStarted\n.\nFinished in 0.000359646 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2780.51 tests/s, 11122.05 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph_ndklvp\nStarted\n.\nFinished in 0.000325192 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3075.11 tests/s, 12300.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwz132xbk\nStarted\n.\nFinished in 0.000354446 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2821.30 tests/s, 11285.22 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result[-1]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpbroz_k59\nStarted\n.\nFinished in 0.000331182 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3019.49 tests/s, 12077.95 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max = 0\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    max_numbers << max\n  end\n  max_numbers\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4ejbmdla\nStarted\n.\nFinished in 0.000392247 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2549.41 tests/s, 10197.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max = numbers.first\n\
    \  numbers.map do |number|\n    max = number if number > max\n    max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcygk4yuy\nStarted\n.\nFinished in 0.000328107 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3047.79 tests/s, 12191.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcfeo_2ip\nStarted\n.\nFinished in 0.000358384 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2790.30 tests/s, 11161.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcnd4apx6\nStarted\n.\nFinished in 0.000584799 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1709.99 tests/s, 6839.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv7qsz3hp\nStarted\n.\nFinished in 0.000344619 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2901.76 tests/s, 11607.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    if number > max_number\n\
    \      max_number = number\n    end\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpsk5xu8ht\nStarted\n.\nFinished in 0.000334658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2988.13 tests/s, 11952.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7d8b06g9\nStarted\n.\nFinished in 0.00031872 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3137.55 tests/s, 12550.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwta8flui\nStarted\n.\nFinished in 0.000288692 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3463.90 tests/s, 13855.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = numbers.first\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm9svpwv6\nStarted\n.\nFinished in 0.000382129 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2616.92 tests/s, 10467.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |num, result|\n    result << (result.last || num)\n    result.last = num\
    \ if num > result.last\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: "Loaded suite /tmp/tmpe4fp7s19\nStarted\nE\n===============================================================================\n\
    Error: test_rolling_max(TestHumanEval):\n  NoMethodError: undefined method `last='\
    \ for [1, 1]:Array\n  Did you mean?  last\n/tmp/tmpe4fp7s19.rb:8:in `block in\
    \ rolling_max'\n/tmp/tmpe4fp7s19.rb:6:in `each'\n/tmp/tmpe4fp7s19.rb:6:in `each_with_object'\n\
    /tmp/tmpe4fp7s19.rb:6:in `rolling_max'\n/tmp/tmpe4fp7s19.rb:16:in `call'\n/tmp/tmpe4fp7s19.rb:16:in\
    \ `test_rolling_max'\n     13:   def test_rolling_max\n     14:     candidate\
    \ = method(:rolling_max)\n     15:     assert_equal([], candidate.call([]))\n\
    \  => 16:     assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n     17:\
    \     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n     18:     assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n     19:   end\n===============================================================================\n\
    \nFinished in 0.003821967 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    261.65 tests/s, 261.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([])\
    \ do |number, result|\n    result << (result.last || number)\n    result[-1] =\
    \ number if number > result[-1]\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4rtds4am\nStarted\n.\nFinished in 0.000352092 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2840.17 tests/s, 11360.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb0tab8c0\nStarted\n.\nFinished in 0.000301175 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3320.33 tests/s, 13281.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result = []\n\
    \  max = 0\n  numbers.each do |number|\n    if number > max\n      max = number\n\
    \    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp81v9bi_v\nStarted\n.\nFinished in 0.000333627 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2997.36 tests/s, 11989.44 assertions/s\n"
  exit_code: 0
  status: OK
