name: HumanEval_67_fruit_distribution
language: ruby
results:
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51wwcbzs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp51wwcbzs.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.00 tests/s, 320.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvsh4ics8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvsh4ics8.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.31 tests/s, 325.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdp41wx7l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdp41wx7l.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003122 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.31 tests/s, 320.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuyb6inzt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuyb6inzt.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003053 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.55 tests/s, 327.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9rd7w76\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn9rd7w76.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003157 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.76 tests/s, 316.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuc8bngqm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuc8bngqm.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.76 tests/s, 327.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgultlo4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphgultlo4.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003645 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    274.35 tests/s, 274.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphw9pq2t0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphw9pq2t0.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005861 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.62 tests/s, 170.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_w3584sl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_w3584sl.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002967 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    337.04 tests/s, 337.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8fwukny\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpg8fwukny.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.12 tests/s, 309.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprojkm1py\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprojkm1py.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.82 tests/s, 329.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy59hu0p7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy59hu0p7.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005103 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    195.96 tests/s, 195.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdyqnkk6y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdyqnkk6y.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.41 tests/s, 325.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgwka0402\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgwka0402.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.75 tests/s, 300.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxfn8nut7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxfn8nut7.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.04 tests/s, 299.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvdqwsmjr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvdqwsmjr.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.013638 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.32 tests/s, 73.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpavru838b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpavru838b.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.99 tests/s, 312.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszd2wqgl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpszd2wqgl.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    263.02 tests/s, 263.02 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0ipjy1v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0ipjy1v.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.89 tests/s, 322.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjalmykli\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjalmykli.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003042 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.73 tests/s, 328.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp45o2l8to\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp45o2l8to.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.41 tests/s, 328.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vawqnkn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vawqnkn.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.30 tests/s, 302.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s.split(\" \")\n  s.split(\" \").map(&:to_i).reduce(:+)\n  n - s.split(\" \"\
    ).map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuhbc9ibk\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 31674.21 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2leb44by\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2leb44by.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003964 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.27 tests/s, 252.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoqtdkqpv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoqtdkqpv.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.60 tests/s, 309.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8s6ym2td\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8s6ym2td.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.09 tests/s, 155.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppr59msp_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppr59msp_.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.56 tests/s, 114.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n\t# write your code here\n\
    \t# apples = s.split(\" \")[0].to_i\n\t# oranges = s.split(\" \")[2].to_i\n\t\
    # n - apples - oranges\n\ts.split(\" \").map(&:to_i).reduce(:+) - n\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4mhbcliu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4mhbcliu.rb:22:in\
    \ `test_fruit_distribution'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_fruit_distribution\n     21:     candidate = method(:fruit_distribution)\n\
    \  => 22:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     23:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     24:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     25:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<-8>\n\ndiff:\n? -8\n===============================================================================\n\
    \nFinished in 0.003515 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.50 tests/s, 284.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s.split(\" \").map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk2mewx2i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk2mewx2i.rb:19:in\
    \ `test_fruit_distribution'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_fruit_distribution\n     18:     candidate = method(:fruit_distribution)\n\
    \  => 19:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     20:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     21:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     22:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<11>\n===============================================================================\n\
    \nFinished in 0.003058 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.01 tests/s, 327.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7dx0u_a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr7dx0u_a.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004946 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.18 tests/s, 202.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  s.split(\" \").map(&:to_i).sum\
    \ - n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoknhnza1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoknhnza1.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<-8>\n\ndiff:\n? -8\n===============================================================================\n\
    \nFinished in 0.003126 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.90 tests/s, 319.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n    # Write your code here\n\
    \    s = s.split(\" \")\n    s[0] = s[0].to_i\n    s[2] = s[2].to_i\n    n - s[0]\
    \ - s[2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmus_j7yg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmus_j7yg.rb:22:in\
    \ `test_fruit_distribution'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_fruit_distribution\n     21:     candidate = method(:fruit_distribution)\n\
    \  => 22:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     23:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     24:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     25:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<14>\n===============================================================================\n\
    \nFinished in 0.005013 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.48 tests/s, 199.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6aqu35rn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6aqu35rn.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.72 tests/s, 311.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyi15sfa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzyi15sfa.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.34 tests/s, 321.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_bpx7x7f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_bpx7x7f.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004939 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.47 tests/s, 202.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp96t3a67i\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 35714.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_g23_j5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr_g23_j5.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.10 tests/s, 323.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2sqsxq1z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2sqsxq1z.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.45 tests/s, 332.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp4_pnvpd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp4_pnvpd.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00578 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.01 tests/s, 173.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpho7g_u6n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpho7g_u6n.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.06 tests/s, 315.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv15eawlb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv15eawlb.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.87 tests/s, 327.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s.split(\" \").map(&:to_i).reduce(:+)\n  n - s.split(\" \").map(&:to_i).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_a7ybty0\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 34146.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp987ghxdg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp987ghxdg.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003108 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.75 tests/s, 321.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  s[0] = s[0].to_i\n  s[2] = s[2].to_i\n  n - s[0] - s[2]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ajn5xc8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ajn5xc8.rb:22:in\
    \ `test_fruit_distribution'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_fruit_distribution\n     21:     candidate = method(:fruit_distribution)\n\
    \  => 22:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     23:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     24:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     25:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<14>\n===============================================================================\n\
    \nFinished in 0.003121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.41 tests/s, 320.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoxuushf2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoxuushf2.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.50 tests/s, 312.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6qsuficd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6qsuficd.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003786 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    264.13 tests/s, 264.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5t55zfi6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5t55zfi6.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    307.98 tests/s, 307.98 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdi_v6ga3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdi_v6ga3.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.038277 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    26.13 tests/s, 26.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpna0gvq9_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpna0gvq9_.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003878 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    257.86 tests/s, 257.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp4m7tfoh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp4m7tfoh.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.0033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.03 tests/s, 303.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4vu1awo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn4vu1awo.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015179 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.88 tests/s, 65.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_sv9yst\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf_sv9yst.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004334 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    230.73 tests/s, 230.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1tkktk4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl1tkktk4.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.06 tests/s, 322.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ecobqm8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ecobqm8.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003073 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.41 tests/s, 325.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # Your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9s4kmef\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc9s4kmef.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003325 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    300.75 tests/s, 300.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn8n0atoa\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 32863.85 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy927wh5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfy927wh5.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.77 tests/s, 313.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0xjwq9q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph0xjwq9q.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.62 tests/s, 320.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_j00s_o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc_j00s_o.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003027 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.36 tests/s, 330.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  s[0].to_i + s[3].to_i\n  n - s[0].to_i - s[3].to_i\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5yc_jmb\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 32710.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s.split(\" \").map(&:to_i).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3rtcj20\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3rtcj20.rb:19:in\
    \ `test_fruit_distribution'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_fruit_distribution\n     18:     candidate = method(:fruit_distribution)\n\
    \  => 19:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     20:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     21:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     22:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<11>\n===============================================================================\n\
    \nFinished in 0.003079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.78 tests/s, 324.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_ze15\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9iu_ze15.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.033127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    30.19 tests/s, 30.19 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3jdevz3u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3jdevz3u.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.71 tests/s, 329.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp559rertu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp559rertu.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.27 tests/s, 318.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3q5uhfp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu3q5uhfp.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.20 tests/s, 320.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qom9pml\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3qom9pml.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.46 tests/s, 316.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysispz4l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpysispz4l.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 321.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgmarz9w7\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 34653.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen0evnye\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpen0evnye.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.017262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.93 tests/s, 57.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppl59wzgc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppl59wzgc.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003085 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.15 tests/s, 324.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw8lp2obp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw8lp2obp.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.37 tests/s, 326.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s.split(\" \").map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_uw06w5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpm_uw06w5.rb:19:in\
    \ `test_fruit_distribution'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_fruit_distribution\n     18:     candidate = method(:fruit_distribution)\n\
    \  => 19:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     20:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     21:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     22:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<11>\n===============================================================================\n\
    \nFinished in 0.003435 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.12 tests/s, 291.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4paot22\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy4paot22.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003123 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.20 tests/s, 320.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  s.split(\" \").map(&:to_i).reduce(:+)\
    \ - n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq3vpnans\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq3vpnans.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<-8>\n\ndiff:\n? -8\n===============================================================================\n\
    \nFinished in 0.003079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.78 tests/s, 324.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpovoe3sn9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpovoe3sn9.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.046247 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.62 tests/s, 21.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6lryajys\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6lryajys.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.30 tests/s, 170.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpehoig7rs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpehoig7rs.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008594 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.36 tests/s, 116.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwq_cb1cw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwq_cb1cw.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003057 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.12 tests/s, 327.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprszclzjc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprszclzjc.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.45 tests/s, 332.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmsvqy4t1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmsvqy4t1.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011619 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.07 tests/s, 86.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0sy_rb6b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0sy_rb6b.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003064 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.37 tests/s, 326.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqwcmn8vw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqwcmn8vw.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003151 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.36 tests/s, 317.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84px5yuz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp84px5yuz.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003168 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.66 tests/s, 315.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n\t# write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomb729nd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpomb729nd.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.39 tests/s, 302.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuleejtx8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuleejtx8.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.09 tests/s, 313.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpduruygix\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpduruygix.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003163 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.16 tests/s, 316.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuoooh_di\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuoooh_di.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003091 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.52 tests/s, 323.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsqwznao4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsqwznao4.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003051 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.76 tests/s, 327.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcy9ktorf\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcy9ktorf.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.10 tests/s, 325.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n\t# write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph25673zk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph25673zk.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.97 tests/s, 317.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp47wkuho\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpp47wkuho.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003043 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.62 tests/s, 328.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydbgj8s2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpydbgj8s2.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003751 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    266.60 tests/s, 266.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67osqwyb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67osqwyb.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.30 tests/s, 312.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n\t# write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4q7yswz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph4q7yswz.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.48 tests/s, 322.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n\t# write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpribfq32_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpribfq32_.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003144 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.07 tests/s, 318.07 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9geka6q2\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 30303.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcinzdae5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcinzdae5.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.50 tests/s, 188.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphur259q8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphur259q8.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00345 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    289.86 tests/s, 289.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbuwd4dfo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbuwd4dfo.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    242.42 tests/s, 242.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  s.split(\" \").map(&:to_i).inject(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23bx3n8a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp23bx3n8a.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<11>\n===============================================================================\n\
    \nFinished in 0.051538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    19.40 tests/s, 19.40 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqry234b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqry234b.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003726 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    268.38 tests/s, 268.38 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmponxzlla7\n\
    Started\n.\nFinished in 0.000227 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4405.29 tests/s, 30837.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa3uvnhzo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa3uvnhzo.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.58 tests/s, 330.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnmnp6lir\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnmnp6lir.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003142 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.27 tests/s, 318.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2y4tttp8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2y4tttp8.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004428 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    225.84 tests/s, 225.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5au4tx_z\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5au4tx_z.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.92 tests/s, 329.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qwwn78g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0qwwn78g.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003106 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.96 tests/s, 321.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa63lh5m\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoa63lh5m.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00315 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.46 tests/s, 317.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkxxiqq52\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkxxiqq52.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003059 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.90 tests/s, 326.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n\t# write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpleuqzyql\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpleuqzyql.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.31 tests/s, 299.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3mj1j81\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3mj1j81.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.92 tests/s, 311.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcicnjbwj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcicnjbwj.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    139.59 tests/s, 139.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptfih93h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpptfih93h.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.77 tests/s, 170.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  s[0] = s[0].to_i\n  s[2] = s[2].to_i\n  n - s[0] - s[2]\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvjr2_g4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppvjr2_g4.rb:22:in\
    \ `test_fruit_distribution'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_fruit_distribution\n     21:     candidate = method(:fruit_distribution)\n\
    \  => 22:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     23:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     24:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     25:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<14>\n===============================================================================\n\
    \nFinished in 0.003269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.90 tests/s, 305.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps82fca65\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps82fca65.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.52 tests/s, 325.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ewlhyrs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6ewlhyrs.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.022704 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    44.05 tests/s, 44.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[4].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9dkhu0b7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9dkhu0b7.rb:20:in\
    \ `test_fruit_distribution'\n     17: class TestHumanEval < Test::Unit::TestCase\n\
    \     18:   def test_fruit_distribution\n     19:     candidate = method(:fruit_distribution)\n\
    \  => 20:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     21:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     22:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     23:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<14>\n===============================================================================\n\
    \nFinished in 0.003338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.58 tests/s, 299.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowl5c9v9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowl5c9v9.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.74 tests/s, 308.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgktt5lu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkgktt5lu.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.01 tests/s, 312.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj11chf5_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj11chf5_.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 324.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhgd5wdw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwhgd5wdw.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003088 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.83 tests/s, 323.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  #your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8k1_8xkg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8k1_8xkg.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006009 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.42 tests/s, 166.42 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vecjkq5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7vecjkq5.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.025684 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    38.93 tests/s, 38.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # Write your code here\n\
    \  # apples = s.split(\" \")[0].to_i\n  # oranges = s.split(\" \")[2].to_i\n \
    \ # n - apples - oranges\n  s.split(\" \").map(&:to_i).sum - n\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgztew3xt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgztew3xt.rb:22:in\
    \ `test_fruit_distribution'\n     19: class TestHumanEval < Test::Unit::TestCase\n\
    \     20:   def test_fruit_distribution\n     21:     candidate = method(:fruit_distribution)\n\
    \  => 22:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     23:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     24:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     25:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<-8>\n\ndiff:\n? -8\n===============================================================================\n\
    \nFinished in 0.003083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.36 tests/s, 324.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnktladn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppnktladn.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.72 tests/s, 320.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n\t# your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9zudjd0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo9zudjd0.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003133 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.18 tests/s, 319.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5hie5cv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmps5hie5cv.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003607 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    277.24 tests/s, 277.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktjz66nj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpktjz66nj.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00309 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.62 tests/s, 323.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptvf204s1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptvf204s1.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005795 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.56 tests/s, 172.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3slr0hh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi3slr0hh.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.04 tests/s, 324.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqfsa0_1o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpqfsa0_1o.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.46 tests/s, 310.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xzq44a1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6xzq44a1.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00303 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.03 tests/s, 330.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspix51ov\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpspix51ov.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005593 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.79 tests/s, 178.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpev388_ly\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpev388_ly.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.76 tests/s, 248.76 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvf5noqpq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvf5noqpq.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.09 tests/s, 313.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  #your code here\n  s.split(\"\
    \ \").map(&:to_i).reduce(:+)\n  n - s.split(\" \").map(&:to_i).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpz37jxrbs\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 32110.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpms6h6r1q\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpms6h6r1q.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003991 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    250.56 tests/s, 250.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprs4asojj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprs4asojj.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003066 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.16 tests/s, 326.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hyskcjd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_hyskcjd.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006622 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.01 tests/s, 151.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6l3mqw4i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6l3mqw4i.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.57 tests/s, 318.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ud8e0h6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ud8e0h6.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003061 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    326.69 tests/s, 326.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp613t6nr8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp613t6nr8.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.031141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    32.11 tests/s, 32.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp547p29g3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp547p29g3.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003094 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.21 tests/s, 323.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ovo8l1u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ovo8l1u.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.016999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    58.83 tests/s, 58.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7w90aq3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7w90aq3.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003048 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    328.08 tests/s, 328.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl6mmx04\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprl6mmx04.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.045818 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    21.83 tests/s, 21.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoibjgkpd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoibjgkpd.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003032 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    329.82 tests/s, 329.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr20h7fij\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpr20h7fij.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004814 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.73 tests/s, 207.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzpys2bzb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzpys2bzb.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.015255 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    65.55 tests/s, 65.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s.split(\" \").map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkziyrugq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkziyrugq.rb:19:in\
    \ `test_fruit_distribution'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_fruit_distribution\n     18:     candidate = method(:fruit_distribution)\n\
    \  => 19:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     20:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     21:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     22:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<11>\n===============================================================================\n\
    \nFinished in 0.003305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.57 tests/s, 302.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6mdyixg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_6mdyixg.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00305 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.87 tests/s, 327.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[4].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgm1b5ewq\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgm1b5ewq.rb:20:in\
    \ `test_fruit_distribution'\n     17: class TestHumanEval < Test::Unit::TestCase\n\
    \     18:   def test_fruit_distribution\n     19:     candidate = method(:fruit_distribution)\n\
    \  => 20:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     21:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     22:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     23:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<14>\n===============================================================================\n\
    \nFinished in 0.003302 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.85 tests/s, 302.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7mvffkt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv7mvffkt.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.37 tests/s, 318.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvg9czgxh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpvg9czgxh.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    248.26 tests/s, 248.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi4u7rc_g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpi4u7rc_g.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003141 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.37 tests/s, 318.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7bty0xc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw7bty0xc.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003954 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    252.91 tests/s, 252.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n\t# your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejt8v7ie\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejt8v7ie.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003223 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.27 tests/s, 310.27 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mhgv6jl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3mhgv6jl.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00535 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    186.92 tests/s, 186.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg021vmc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg021vmc.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.44 tests/s, 327.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(' ')\n  n - s[0].to_i - s[3].to_i\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate\
    \ = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"5 apples\
    \ and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and 6\
    \ oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbdvdekbt\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprj6_4k9i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprj6_4k9i.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003401 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    294.03 tests/s, 294.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  #your code here\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqtdit0p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqtdit0p.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    322.89 tests/s, 322.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n\t# write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoct3nd7o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoct3nd7o.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.16 tests/s, 317.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37e1kl7n\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp37e1kl7n.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.042218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    23.69 tests/s, 23.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ru1c2a6\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4ru1c2a6.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003056 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    327.23 tests/s, 327.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp17frlprz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp17frlprz.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.024617 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    40.62 tests/s, 40.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3thmu7k9\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 32258.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\n  fruits\
    \ = s.split(\" \")\n  apples = fruits[0].to_i\n  oranges = fruits[3].to_i\n  mango\
    \ = n - apples - oranges\n  return mango\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwxbwzmyg\n\
    Started\n.\nFinished in 0.000207 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4830.92 tests/s, 33816.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjvv55js4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjvv55js4.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005888 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.84 tests/s, 169.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  s[0].to_i + s[2].to_i\n  n - s[0].to_i - s[2].to_i\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31iuo7vn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp31iuo7vn.rb:21:in\
    \ `test_fruit_distribution'\n     18: class TestHumanEval < Test::Unit::TestCase\n\
    \     19:   def test_fruit_distribution\n     20:     candidate = method(:fruit_distribution)\n\
    \  => 21:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     22:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     23:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     24:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<14>\n===============================================================================\n\
    \nFinished in 0.003217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.85 tests/s, 310.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s.split(\" \").map(&:to_i).reduce(:+)\n  n - s.split(\" \").map(&:to_i).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnrcg0fgz\n\
    Started\n.\nFinished in 0.000219 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4566.21 tests/s, 31963.47 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1liiwt6k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1liiwt6k.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.95 tests/s, 113.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # Write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76jzdrum\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp76jzdrum.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.004882 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.83 tests/s, 204.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  a = s.split(\" \")\n  b = a[0].to_i\n  c = a[3].to_i\n  n - b - c\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_vkti4d0\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 32558.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxo78q0y\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpaxo78q0y.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.60 tests/s, 309.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmw791po\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwmw791po.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.66 tests/s, 314.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  a = s[0].to_i\n  o = s[3].to_i\n  n - a - o\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwk6x6ihd\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 33175.36 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpap1qcs2o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpap1qcs2o.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.027351 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    36.56 tests/s, 36.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkauptkr_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkauptkr_.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.66 tests/s, 314.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu86_a7nz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu86_a7nz.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00316 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.46 tests/s, 316.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwp9v9ev\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkwp9v9ev.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005872 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.30 tests/s, 170.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbw0qvhhf\n\
    Started\n.\nFinished in 0.000249 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4016.06 tests/s, 28112.45 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwzjnlgyb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwzjnlgyb.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009969 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.31 tests/s, 100.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxwkikx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgnxwkikx.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003153 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.16 tests/s, 317.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n    # write your code here\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxot1lgg2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxot1lgg2.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003084 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.25 tests/s, 324.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnnw75u5h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnnw75u5h.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.56 tests/s, 306.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5ftsmnj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph5ftsmnj.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003121 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.41 tests/s, 320.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpenyv18ih\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpenyv18ih.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.060479 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    16.53 tests/s, 16.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejwij6j5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpejwij6j5.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    265.53 tests/s, 265.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # write your code here\n\
    \  s = s.split(\" \")\n  n - s[0].to_i - s[3].to_i\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: !!int ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcnz1bob5\n\
    Started\n.\nFinished in 0.000254 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3937.01 tests/s, 27559.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # Write your code here\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsr17jznv.rb:183: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsr17jznv.rb:194: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3p3zti8_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3p3zti8_.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.011536 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.69 tests/s, 86.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bo9ahnu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1bo9ahnu.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.34 tests/s, 305.34 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgtryqzly\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgtryqzly.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.010172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.31 tests/s, 98.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\n  s.scan(/\\\
    d+/).map(&:to_i).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_fruit_distribution\n    candidate = method(:fruit_distribution)\n\
    \    assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n    assert_equal(10,\
    \ candidate.call(\"5 apples and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"\
    0 apples and 1 oranges\", 3))\n    assert_equal(2, candidate.call(\"1 apples and\
    \ 0 oranges\", 3))\n    assert_equal(95, candidate.call(\"2 apples and 3 oranges\"\
    , 100))\n    assert_equal(0, candidate.call(\"2 apples and 3 oranges\", 5))\n\
    \    assert_equal(19, candidate.call(\"1 apples and 100 oranges\", 120))\n  end\n\
    end\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjk8mdfw\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnjk8mdfw.rb:19:in\
    \ `test_fruit_distribution'\n     16: class TestHumanEval < Test::Unit::TestCase\n\
    \     17:   def test_fruit_distribution\n     18:     candidate = method(:fruit_distribution)\n\
    \  => 19:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     20:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     21:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     22:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<11>\n===============================================================================\n\
    \nFinished in 0.003001 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.22 tests/s, 333.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # Write your code here\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n  \
    \  candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: ''
  stderr: "/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjobjjox.rb:183: class\
    \ definition in method body\nclass TestHumanEval < Test::Unit::TestCase\n^~~~~~~~~~~~~~~~~~~\n\
    /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyjobjjox.rb:194: syntax error,\
    \ unexpected end-of-input, expecting `end'\n"
  exit_code: 1
  status: SyntaxError
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcz7r9bd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbcz7r9bd.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002899 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    344.95 tests/s, 344.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdxv_5atb\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdxv_5atb.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002843 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    351.74 tests/s, 351.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_r4ui93i\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_r4ui93i.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.003028 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    330.25 tests/s, 330.25 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# In this task, you will be given a string that represents a number of\
    \ apples and oranges \n# that are distributed in a basket of fruit this basket\
    \ contains \n# apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n# the oranges and apples and an integer that represent\
    \ the total number of the fruits \n# in the basket return the number of the mango\
    \ fruits in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6\
    \ oranges\", 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\"\
    ,3) -> 3 - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) ->\
    \ 100 - 2 - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) ->\
    \ 120 - 100 - 1 = 19\ndef fruit_distribution(s, n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
    \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
    5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples\
    \ and 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
    , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n  \
    \  assert_equal(95, candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0,\
    \ candidate.call(\"2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"\
    1 apples and 100 oranges\", 120))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuriniyp3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_fruit_distribution(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuriniyp3.rb:18:in\
    \ `test_fruit_distribution'\n     15: class TestHumanEval < Test::Unit::TestCase\n\
    \     16:   def test_fruit_distribution\n     17:     candidate = method(:fruit_distribution)\n\
    \  => 18:     assert_equal(8, candidate.call(\"5 apples and 6 oranges\", 19))\n\
    \     19:     assert_equal(10, candidate.call(\"5 apples and 6 oranges\", 21))\n\
    \     20:     assert_equal(2, candidate.call(\"0 apples and 1 oranges\", 3))\n\
    \     21:     assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n\
    <8> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.002659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    376.08 tests/s, 376.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
