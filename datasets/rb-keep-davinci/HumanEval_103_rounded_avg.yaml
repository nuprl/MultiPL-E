name: HumanEval_103_rounded_avg
language: ruby
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
  \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
  \ndef rounded_avg(n, m)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
  \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
  \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
  0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
  \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
  0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
  \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
  0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
  \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\", candidate.call(5,\
  \ 5))\n  end\nend\n"
completions: ["  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"\
    0b#{avg.to_s(2)}\"\nend", "  # your code here\nend", "  if n > m\n    return -1\n\
    \  else\n    avg = (n + m) / 2\n    return \"0b#{avg.to_s(2)}\"\n  end\nend",
  "  return -1 if n > m\n  (n + m) / 2.0\nend", "  return -1 if n > m\n  avg = (n\
    \ + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+)\
    \ / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  binary\
    \ = (n + m) / 2.0\n  binary = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\
    \nend", "  return -1 if n > m\n  average = (n..m).reduce(:+) / (m - n + 1)\n \
    \ \"0b#{average.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  \"0b#{avg.to_s(2)}\"\nend", "  # your code here\nend", "  return -1 if n >\
    \ m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n\
    \  binary = (n + m) / 2.0\n  binary = binary.round\n  binary = binary.to_s(2)\n\
    \  \"0b#{binary}\"\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  if n > m\n    return -1\n  else\n    sum = 0\n    for i in n..m\n \
    \     sum += i\n    end\n    avg = sum / (m - n + 1)\n    return \"0b\" + avg.to_s(2)\n\
    \  end\nend", "  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  sum = 0\n  (n..m).each { |i| sum += i }\n  sum = (sum /\
    \ (m - n + 1.0)).round\n  \"0b#{sum.to_s(2)}\"\nend", "  return -1 if n > m\n\
    \  (n..m).inject(:+).fdiv(m - n + 1).round.to_s(2)\nend", "  return -1 if n >\
    \ m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n\
    \  binary = (n + m) / 2.0\n  binary = binary.round\n  binary = binary.to_s(2)\n\
    \  \"0b#{binary}\"\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+)\
    \ / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg =\
    \ (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  # your code here\nend", "  return\
    \ -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return\
    \ -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg = sum / (m - n + 1)\n  \"\
    0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  # your code here\nend", "  if n >\
    \ m\n    return -1\n  else\n    sum = 0\n    (n..m).each do |i|\n      sum +=\
    \ i\n    end\n    avg = sum / (m - n + 1)\n    return \"0b#{avg.to_s(2)}\"\n \
    \ end\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  if n > m\n    -1\n  else\n    sum = 0\n    (n..m).each do |i|\n   \
    \   sum += i\n    end\n    avg = sum / (m - n + 1)\n    \"0b#{avg.to_s(2)}\"\n\
    \  end\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  sum = 0\n  (n..m).each { |i| sum += i }\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n \
    \ avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  binary_string\
    \ = (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\n  \"0b#{binary_string}\"\n\
    end", "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each do |num|\n\
    \      sum += num\n    end\n    avg = sum / (m - n + 1)\n    return \"0b#{avg.to_s(2)}\"\
    \n  end\nend", "  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg = sum /\
    \ (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n\
    \ + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n +\
    \ m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+)\
    \ / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  (n + m)\
    \ / 2.0\nend", "  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each\
    \ do |i|\n      sum += i\n    end\n    avg = sum / (m - n + 1)\n    avg.to_s(2)\n\
    \  end\nend", "  return -1 if n > m\n  (n + m) / 2.0\nend", "  return -1 if n\
    \ > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if n > m\n  ((n\
    \ + m) / 2.0).round.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  average = (n + m) / 2\n\
    \  average.to_s(2)\nend", "  if n > m\n    return -1\n  else\n    sum = 0\n  \
    \  (n..m).each do |num|\n      sum += num\n    end\n    avg = sum / (m - n + 1)\n\
    \    return \"0b#{avg.to_s(2)}\"\n  end\nend", "  return -1 if n > m\n  avg =\
    \ (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n\
    \ + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  sum = (n..m).reduce(:+)\n\
    \  avg = (sum / (m - n + 1)).to_s(2)\nend", "  return -1 if n > m\n  binary =\
    \ (n + m) / 2.0\n  binary = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\
    \nend", "  return -1 if n > m\n  sum = 0\n  (n..m).each { |i| sum += i }\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n \
    \ avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return\
    \ -1 if n > m\n  sum = 0\n  (n..m).each { |i| sum += i }\n  sum = (sum / (m -\
    \ n + 1.0)).round\n  sum.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m)\
    \ / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  if n > m\n    return -1\n  else\n    sum\
    \ = 0\n    (n..m).each do |i|\n      sum += i\n    end\n    avg = sum / (m - n\
    \ + 1)\n    return \"0b#{avg.to_s(2)}\"\n  end\nend", "  # your code here\nend",
  "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  if n > m\n    return -1\n  else\n    avg = (n + m) / 2\n    return \"0b#{avg.to_s(2)}\"\
    \n  end\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend", "  # your code here\nend", "  if n > m\n    return -1\n  end\n  sum =\
    \ 0\n  for i in n..m\n    sum += i\n  end\n  average = sum / (m - n + 1)\n  return\
    \ \"0b\" + average.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"\
    0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m -\
    \ n + 1).round.to_s(2)\nend", "  return -1 if n > m\n  sum = 0\n  (n..m).each\
    \ do |i|\n    sum += i\n  end\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  (n + m) / 2.0\nend", "  # your code here\nend",
  "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1\
    \ if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\n\
    end", "  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary = binary.round\n\
    \  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend", "  # your code here\nend",
  "  if n > m\n    return -1\n  else\n    sum = 0\n    (n..m).each do |i|\n      sum\
    \ += i\n    end\n    avg = sum / (m - n + 1)\n    return \"0b#{avg.to_s(2)}\"\n\
    \  end\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  avg = (n + m) / 2\n  avg.to_s(2)\nend", "  return -1 if\
    \ n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n\
    \ > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n >\
    \ m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n\
    \  sum = (n..m).inject(:+)\n  average = sum / (m - n + 1)\n  \"0b#{average.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary = binary.round\n\
    \  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend", "  return -1 if n > m\n \
    \ avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  average\
    \ = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{average.to_s(2)}\"\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  # your code\
    \ here\nend", "  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary = binary.round\n\
    \  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend", "  # your code here\nend",
  "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  average = (n..m).reduce(:+) / (m - n + 1)\n \
    \ \"0b#{average.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n\
    \  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+)\
    \ / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg =\
    \ (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  # your code\
    \ here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  avg = sum / (m - n + 1)\n  \"\
    0b#{avg.to_s(2)}\"\nend", "  # your code here\nend", "  return -1 if n > m\n \
    \ avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  sum\
    \ = (n..m).reduce(:+)\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  average = (n + m) / 2\n  average.to_s(2)\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1\
    \ if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if\
    \ n > m\n  average = (n + m) / 2\n  \"0b#{average.to_s(2)}\"\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1\
    \ if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if\
    \ n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n\
    \ > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n >\
    \ m\n  average = (n + m) / 2\n  average.to_s(2)\nend", "  return -1 if n > m\n\
    \  binary = (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\n  \"0b#{binary}\"\
    \nend", "  return -1 if n > m\n  average = (n..m).reduce(:+) / (m - n + 1)\n \
    \ \"0b#{average.to_s(2)}\"\nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+)\
    \ / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\nend", "  # your code here\nend", "  return -1 if n >\
    \ m\n  binary = (n + m) / 2.0\n  binary = binary.round\n  binary = binary.to_s(2)\n\
    \  \"0b#{binary}\"\nend", "  return -1 if n > m\n  (n..m).sum / (m - n + 1.0).round.to_s(2)\n\
    end", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  binary = (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\n\
    \  \"0b#{binary}\"\nend", "  return -1 if n > m\n  binary = (n..m).sum / (m -\
    \ n + 1)\n  \"0b#{binary.to_s(2)}\"\nend", "  # your code here\nend", "  return\
    \ -1 if n > m\n  (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\nend", "  return\
    \ -1 if n > m\n  (n + m) / 2.0\nend", "  return -1 if n > m\n  avg = (n + m) /\
    \ 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+)\
    \ / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg =\
    \ (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1\
    \ if n > m\n  sum = (n..m).reduce(:+)\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  (n + m) / 2.0\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg =\
    \ (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1\
    \ if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\
    \nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  sum = 0\n  (n..m).each { |i| sum += i }\n  avg = (sum /\
    \ (m - n + 1)).round\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  (n + m)\
    \ / 2.0\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n\
    \  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"\
    0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m -\
    \ n + 1).round.to_s(2)\nend", "  return -1 if n > m\n  (n..m).reduce(:+).fdiv(m\
    \ - n + 1).round.to_s(2)\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n \
    \ \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  binary = (n + m) / 2.0\n\
    \  binary = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\nend",
  "  return -1 if n > m\n  sum = 0\n  (n..m).each { |num| sum += num }\n  avg = (sum\
    \ / (m - n + 1)).round\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n\
    \  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg\
    \ = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  avg =\
    \ (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  # your code\
    \ here\nend", "  return -1 if n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n\
    \  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  average = (n + m) / 2\n\
    \  \"0b#{average.to_s(2)}\"\nend", "  return -1 if n > m\n  sum = 0\n  (n..m).each\
    \ { |num| sum += num }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  sum = (n..m).reduce(:+)\n  average = sum / (m - n + 1)\n\
    \  \"0b#{average.to_s(2)}\"\nend", "  return -1 if n > m\n  sum = (n..m).reduce(:+)\n\
    \  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n >\
    \ m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", " \
    \ return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return\
    \ -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1\
    \ if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if\
    \ n > m\n  avg = (n..m).reduce(:+) / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend",
  "  return -1 if n > m\n  binary = (n + m) / 2.0\n  binary = binary.round\n  binary\
    \ = binary.to_s(2)\n  \"0b#{binary}\"\nend", "  return -1 if n > m\n  avg = (n\
    \ + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  # your code here\nend", "  return\
    \ -1 if n > m\n  sum = 0\n  (n..m).each do |num|\n    sum += num\n  end\n  avg\
    \ = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n \
    \ avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1 if n > m\n  sum\
    \ = 0\n  (n..m).each { |num| sum += num }\n  sum = (sum / (m - n + 1.0)).round\n\
    \  sum.to_s(2)\nend", "  return -1 if n > m\n  sum = 0\n  (n..m).each { |i| sum\
    \ += i }\n  avg = sum / (m - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  return -1\
    \ if n > m\n  (n..m).reduce(:+).fdiv(m - n + 1).round.to_s(2)\nend", "  return\
    \ -1 if n > m\n  sum = 0\n  (n..m).each { |num| sum += num }\n  avg = sum / (m\
    \ - n + 1)\n  \"0b#{avg.to_s(2)}\"\nend", "  (n > m) ? -1 : \"0b#{(n..m).sum.fdiv(m\
    \ - n + 1).round.to_s(2)}\"\nend", "  return -1 if n > m\n  binary = (n + m) /\
    \ 2.0\n  binary = binary.round\n  binary = binary.to_s(2)\n  \"0b#{binary}\"\n\
    end", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\nend",
  "  # your code here\nend", "  return -1 if n > m\n  avg = (n + m) / 2\n  \"0b#{avg.to_s(2)}\"\
    \nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
