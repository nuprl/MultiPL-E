name: HumanEval_85_add
language: ruby
results:
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfe8a58ml\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 18867.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpapd0tu3j\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 18957.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpry1prr_9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpry1prr_9.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008015 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.77 tests/s, 249.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg9ac_y7\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyg9ac_y7.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.002999 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    333.44 tests/s, 666.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb6aq2k3p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpb6aq2k3p.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.00438 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    228.31 tests/s, 456.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflwasnp0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpflwasnp0.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.007757 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.92 tests/s, 257.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp15l8tzla\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkr6us16w\n\
    Started\n.\nFinished in 0.000508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1968.50 tests/s, 7874.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpacgpao4z\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzv45wd9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpkzv45wd9.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.79 tests/s, 625.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl0yl1bps\n\
    Started\n.\nFinished in 0.00022 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4545.45 tests/s, 18181.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (num, idx)| idx.odd? && num.even? ? sum + num : sum }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0pi29wdx\n\
    Started\n.\nFinished in 0.019112 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    52.32 tests/s, 209.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbxsh5bzk\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpa5so_7b7\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 19230.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ae9867f\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ae9867f.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.17 tests/s, 616.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgavn6687\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgavn6687.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.041414 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    24.15 tests/s, 48.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftz0uefu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpftz0uefu.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.00 tests/s, 400.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6x2d96jm\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpro4c8jng\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq1t0yk2t\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 18099.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5ax7mow\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq5ax7mow.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.00324 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.64 tests/s, 617.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv6op_e56\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 18099.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wtbhhqu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_wtbhhqu.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003127 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.80 tests/s, 639.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp69b61fw_\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6oddmto\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd6oddmto.rb:11:in\
    \ `test_add'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:  \
    \ def test_add\n     10:     candidate = method(:add)\n  => 11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n     12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n<88> expected but\
    \ was\n<4>\n===============================================================================\n\
    \nFinished in 0.00311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.54 tests/s, 321.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    if num.even? && index.odd?\n\
    \      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj8tatl2w\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1sj29bb_\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1sj29bb_.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.79 tests/s, 619.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp902jks9u\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 18518.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe27gej67\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk473brp3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpk473brp3.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.014936 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    66.95 tests/s, 133.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjjlk91xe\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjjlk91xe.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008974 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.43 tests/s, 222.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphp8z3pu5\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpyl5rpx6g\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn5vsro3t\n\
    Started\n.\nFinished in 0.000222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4504.50 tests/s, 18018.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2j305f5w\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2j305f5w.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.80 tests/s, 583.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpt1f61xff\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxz4ezg47\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2e6pyn4e\n\
    Started\n.\nFinished in 0.000212 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4716.98 tests/s, 18867.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7ovnyiko\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepqbe4eg\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpepqbe4eg.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003116 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.92 tests/s, 641.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfydrvqvp\n\
    Started\n.\nFinished in 0.000397 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2518.89 tests/s, 10075.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmytaoyk5\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpn6k8w86p\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppjo6xdxv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppjo6xdxv.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003243 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.36 tests/s, 616.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1ypihirw\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_5d1ltd\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8_5d1ltd.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003226 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.98 tests/s, 619.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6tqfxsk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6tqfxsk.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003072 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.52 tests/s, 651.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d6d7x5b\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8d6d7x5b.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.017443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.33 tests/s, 114.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe1hs13u1\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpe1hs13u1.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003341 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    299.31 tests/s, 598.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpscxtt34y\n\
    Started\n.\nFinished in 0.000193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5181.35 tests/s, 20725.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpikfnnq_d\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpikfnnq_d.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.00307 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.73 tests/s, 651.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf3l3o468\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf3l3o468.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.036418 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    27.46 tests/s, 54.92 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnlyf_owb\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).inject(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpin7c_mlo\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 18518.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthd5_ozz\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpthd5_ozz.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.16 tests/s, 630.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    sum += num if num.even? && index.odd?\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjajei5xz\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjzuusfk3\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjzuusfk3.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    316.06 tests/s, 632.11 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpleqggw0l\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpleqggw0l.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.79 tests/s, 625.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_o91mvh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw_o91mvh.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.36 tests/s, 630.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8pkkjpyt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8pkkjpyt.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.004071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    245.64 tests/s, 491.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf1wc_7ru\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf1wc_7ru.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.007068 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    141.48 tests/s, 282.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0) { |sum, i| sum + i }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbq2w5pzo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbq2w5pzo.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003008 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    332.45 tests/s, 664.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd32r_euj\n\
    Started\n.\nFinished in 0.000592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1689.19 tests/s, 6756.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp11fgou5u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp11fgou5u.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003245 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.17 tests/s, 616.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp36qnolpm\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 18348.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpowtl_z_r\n\
    Started\n.\nFinished in 0.000224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4464.29 tests/s, 17857.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmph3c1clc8\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeq0dyqdu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpeq0dyqdu.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003165 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    315.96 tests/s, 631.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0_7u156\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv2qjaopr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv2qjaopr.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.95 tests/s, 235.90 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpoduwm962\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh3lnfdi\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplh3lnfdi.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003322 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.02 tests/s, 602.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpefagx5lu\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppg1tla7h\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppg1tla7h.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003016 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    331.56 tests/s, 663.13 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgdd5ni__\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpdspggood\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bzo7pgu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9bzo7pgu.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003119 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.62 tests/s, 641.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmu6zhpxj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmu6zhpxj.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003308 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    302.30 tests/s, 604.59 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dkjpqhc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_dkjpqhc.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.019197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.09 tests/s, 104.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpveixu69m\n\
    Started\n.\nFinished in 0.000311 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3215.43 tests/s, 12861.74 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdig1r3g\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppdig1r3g.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.40 tests/s, 624.80 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpruljhelo\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpruljhelo.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    281.37 tests/s, 562.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3mt86sk\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd3mt86sk.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003113 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.23 tests/s, 642.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0) { |sum, n| sum + n }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4fayb9nl\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4fayb9nl.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.006128 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.19 tests/s, 326.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmppy2s6c_c\n\
    Started\n.\nFinished in 0.000208 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4807.69 tests/s, 19230.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbbdyc2tq\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgq_0it1u\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgq_0it1u.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.03446 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    29.02 tests/s, 58.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5r6eo3x9\n\
    Started\n.\nFinished in 0.000695 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1438.85 tests/s, 5755.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpueveso_5\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzoownx8v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzoownx8v.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.004631 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.94 tests/s, 431.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdw65ckp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjdw65ckp.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.00652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.37 tests/s, 306.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1b0fwu9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpu1b0fwu9.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.005099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.12 tests/s, 392.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0_e0pkho\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpffmmbe2g\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6m6nldjv\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplqaqvn18\n\
    Started\n.\nFinished in 0.000194 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5154.64 tests/s, 20618.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |n, i| n.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0kjhnt0z\n\
    Started\n.\nFinished in 0.000209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4784.69 tests/s, 19138.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    sum += num if num.even? && index.odd?\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwe13gjly\n\
    Started\n.\nFinished in 0.016647 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    60.07 tests/s, 240.28 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |e, i| e.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0qn7y8f\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1l53ef6t\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 18348.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrkka4dp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmrkka4dp.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003125 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    320.00 tests/s, 640.00 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmplfj0ntvh\n\
    Started\n.\nFinished in 0.000202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4950.50 tests/s, 19801.98 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5sccdrp\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf5sccdrp.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003147 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.76 tests/s, 635.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttm0w9rs\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpttm0w9rs.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003193 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.19 tests/s, 626.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0kx73wy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx0kx73wy.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.049097 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    20.37 tests/s, 40.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyrsvxwj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcyrsvxwj.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003235 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.12 tests/s, 618.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0) { |sum, n| sum + n }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnj7ktkk0\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpnj7ktkk0.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003131 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.39 tests/s, 638.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpj9slt_pi\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 16597.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjd8aplzn\n\
    Started\n.\nFinished in 0.000231 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4329.00 tests/s, 17316.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3tnprkc4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3tnprkc4.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.0161 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.11 tests/s, 124.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4cn7008\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpl4cn7008.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.86 tests/s, 587.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp09ztmodc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp09ztmodc.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003465 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    288.60 tests/s, 577.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6imujzbj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6imujzbj.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.069913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    14.30 tests/s, 28.61 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphi3fom7k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphi3fom7k.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003364 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    297.27 tests/s, 594.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpca5u4t2a\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpca5u4t2a.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.78 tests/s, 637.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp48eb9iqt\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptah9e8jy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptah9e8jy.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.08 tests/s, 620.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfytq1p7r\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpfytq1p7r.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    310.17 tests/s, 620.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index{|x,i|\
    \ x.even? && i.odd?}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmsze7k3f\n\
    Started\n.\nFinished in 0.000698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1432.66 tests/s, 5730.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp21x3a9a6\n\
    Started\n.\nFinished in 0.000538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1858.74 tests/s, 7434.94 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ao6qphu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_ao6qphu.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003913 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    255.56 tests/s, 511.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4afpccme\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4afpccme.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    323.00 tests/s, 645.99 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwyclmj3v\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gkg3wfx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6gkg3wfx.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.00538 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.87 tests/s, 371.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6iifktdg\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_pd978va\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_pd978va.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.86 tests/s, 629.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp65l70wv8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp65l70wv8.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.004423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.09 tests/s, 452.18 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3w3e2xa\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3w3e2xa.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.028737 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    34.80 tests/s, 69.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphzhj6prh\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo28f7jah\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc67h8qd5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpc67h8qd5.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008005 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.92 tests/s, 249.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.each_with_index.map\
    \ { |x, i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmprukuey2e\n\
    Started\n.\nFinished in 0.000206 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4854.37 tests/s, 19417.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp8mcce02z\n\
    Started\n.\nFinished in 0.000198 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5050.51 tests/s, 20202.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpcy8hamjd\n\
    Started\n.\nFinished in 0.000213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4694.84 tests/s, 18779.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwc7btq9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmphwc7btq9.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003083 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    324.36 tests/s, 648.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp13y9uomq\n\
    Started\n.\nFinished in 0.000195 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5128.21 tests/s, 20512.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpty2twdrv\n\
    Started\n.\nFinished in 0.000724 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1381.22 tests/s, 5524.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf80ijo2\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgf80ijo2.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003076 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.10 tests/s, 650.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclbgcve5\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpclbgcve5.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.08 tests/s, 638.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj7kf9wx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxj7kf9wx.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    321.65 tests/s, 643.29 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6pjviv5o\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6pjviv5o.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003184 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    314.07 tests/s, 628.14 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qatmbyr\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1qatmbyr.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003185 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.97 tests/s, 627.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp14ts0hw7\n\
    Started\n.\nFinished in 0.000187 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5347.59 tests/s, 21390.37 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0ufa2fab\n\
    Started\n.\nFinished in 0.000215 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4651.16 tests/s, 18604.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjpp_qpfp\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsr0vd2v8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpsr0vd2v8.rb:11:in\
    \ `test_add'\n      8: class TestHumanEval < Test::Unit::TestCase\n      9:  \
    \ def test_add\n     10:     candidate = method(:add)\n  => 11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n     12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n<88> expected but\
    \ was\n<4>\n===============================================================================\n\
    \nFinished in 0.003319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.30 tests/s, 301.30 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzh4ilao\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpxzh4ilao.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003433 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    291.29 tests/s, 582.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kt8scou\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp5kt8scou.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.00326 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.75 tests/s, 613.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7od29cx8\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp7od29cx8.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003402 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    293.94 tests/s, 587.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsw6s_gh\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwsw6s_gh.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.0033 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    303.03 tests/s, 606.06 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpio1vtngt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpio1vtngt.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.020332 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    49.18 tests/s, 98.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmpnehgsq\n\
    Started\n.\nFinished in 0.000611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1636.66 tests/s, 6546.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw8rbsg6p\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpw8rbsg6p.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    312.60 tests/s, 625.20 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy6p3lrxi\n\
    Started\n.\nFinished in 0.000241 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4149.38 tests/s, 16597.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6wke3tgt\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6wke3tgt.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    284.82 tests/s, 569.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (num, idx)| idx.odd? && num.even? ? sum + num : sum }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp67j4crl2\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpx73w92tv\n\
    Started\n.\nFinished in 0.000205 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4878.05 tests/s, 19512.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp03vs32uz\n\
    Started\n.\nFinished in 0.000232 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4310.34 tests/s, 17241.38 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpffsum0bu\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpffsum0bu.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.019191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    52.11 tests/s, 104.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ubpnb0v\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp3ubpnb0v.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.004476 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    223.41 tests/s, 446.83 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmptyqm8p5l\n\
    Started\n.\nFinished in 0.000204 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4901.96 tests/s, 19607.84 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpij09jhaj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpij09jhaj.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003275 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    305.34 tests/s, 610.69 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    if num.even? && index.odd?\n\
    \      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmh79m0cq\n\
    Started\n.\nFinished in 0.0002 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5000.00 tests/s, 20000.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1tu90lh9\n\
    Started\n.\nFinished in 0.000203 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4926.11 tests/s, 19704.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1nm30asv\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp1nm30asv.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.015932 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    62.77 tests/s, 125.53 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vqd0gwx\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp6vqd0gwx.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003132 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    319.28 tests/s, 638.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpf637l7h3\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 16736.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpufhbu690\n\
    Started\n.\nFinished in 0.000214 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4672.90 tests/s, 18691.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_v5jmh0k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp_v5jmh0k.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.00319 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    313.48 tests/s, 626.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpstvzzsoe\n\
    Started\n.\nFinished in 0.000237 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4219.41 tests/s, 16877.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpv3p60uh1\n\
    Started\n.\nFinished in 0.000216 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4629.63 tests/s, 18518.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpks6zi9_3\n\
    Started\n.\nFinished in 0.000218 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4587.16 tests/s, 18348.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmvq0g8f4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmvq0g8f4.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003143 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    318.17 tests/s, 636.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy875bqdy\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpy875bqdy.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    308.74 tests/s, 617.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpun4ar7yn\n\
    Started\n.\nFinished in 0.000197 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5076.14 tests/s, 20304.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuavcr9se\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuavcr9se.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    298.69 tests/s, 597.37 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuoa9ldl7\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpjn_8a5kw\n\
    Started\n.\nFinished in 0.000196 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5102.04 tests/s, 20408.16 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8pn4tc9\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpd8pn4tc9.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003263 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    306.47 tests/s, 612.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpq3jd5dn9\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk8wgqny\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmk8wgqny.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003228 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    309.79 tests/s, 619.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27tk4g_c\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp27tk4g_c.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.86 tests/s, 635.73 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmx6ces9s\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpmx6ces9s.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003321 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    301.11 tests/s, 602.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpo21v8p3n\n\
    Started\n.\nFinished in 0.000211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4739.34 tests/s, 18957.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpwe3y5uds\n\
    Started\n.\nFinished in 0.000221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4524.89 tests/s, 18099.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ {|x, i| x.even? && i.odd?}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiyj9mkzk\n\
    Started\n.\nFinished in 0.000201 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4975.12 tests/s, 19900.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpayau_a9t\n\
    Started\n.\nFinished in 0.000192 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5208.33 tests/s, 20833.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbyrvp_01\n\
    Started\n.\nFinished in 0.000239 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4184.10 tests/s, 16736.40 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp9_6y37ou\n\
    Started\n.\nFinished in 0.00021 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4761.90 tests/s, 19047.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpiem5qt4x\n\
    Started\n.\nFinished in 0.000217 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    4608.29 tests/s, 18433.18 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgcq_353k\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpgcq_353k.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.005953 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.98 tests/s, 335.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhevl3ed\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpzhevl3ed.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003213 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    311.24 tests/s, 622.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp2i5mbn20\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbv_rj4pc\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpbv_rj4pc.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003149 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    317.56 tests/s, 635.12 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpux8w1iqj\n\
    Started\n.\nFinished in 0.000199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    5025.13 tests/s, 20100.50 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuab8zhvj\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpuab8zhvj.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.002854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    350.39 tests/s, 700.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpecdy5gt4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpecdy5gt4.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.003075 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    325.20 tests/s, 650.41 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4q1nqknm\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp4q1nqknm.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.002941 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    340.02 tests/s, 680.04 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0alxu9bn\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmp0alxu9bn.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.002823 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    354.23 tests/s, 708.47 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpng01ywp4\n\
    Started\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/var/folders/2x/0c5d4d9j4dzd7354ndbb_gwr0000gq/T/tmpng01ywp4.rb:12:in\
    \ `test_add'\n      9:   def test_add\n     10:     candidate = method(:add)\n\
    \     11:     assert_equal(88, candidate.call([4, 88]))\n  => 12:     assert_equal(122,\
    \ candidate.call([4, 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4,\
    \ 0, 6, 7]))\n     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n  \
    \   15:   end\n<122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.002837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    352.49 tests/s, 704.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
