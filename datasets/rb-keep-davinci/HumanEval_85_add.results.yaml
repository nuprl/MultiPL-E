name: HumanEval_85_add
language: ruby
results:
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7d_mzr_7\nStarted\n.\nFinished in 0.000315062 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3173.98 tests/s, 12695.91 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpn2sy5zey\nStarted\n.\nFinished in 0.000297068 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3366.23 tests/s, 13464.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprq3hvcqe\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmprq3hvcqe.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004923567 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.10 tests/s, 406.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp21s_obrc\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp21s_obrc.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004638571 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    215.58 tests/s, 431.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmj4mqcr1\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpmj4mqcr1.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004617903 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.55 tests/s, 433.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwn8my2w9\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwn8my2w9.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004675461 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.88 tests/s, 427.77 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzg079oep\nStarted\n.\nFinished in 0.000332375 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3008.65 tests/s, 12034.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5ctu86m1\nStarted\n.\nFinished in 0.000346992 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2881.91 tests/s, 11527.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_71mkqzh\nStarted\n.\nFinished in 0.000341503 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2928.23 tests/s, 11712.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe8cud209\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpe8cud209.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004502796 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    222.08 tests/s, 444.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt9s1ienr\nStarted\n.\nFinished in 0.000434067 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2303.79 tests/s, 9215.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (num, idx)| idx.odd? && num.even? ? sum + num : sum }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm2immgu7\nStarted\n.\nFinished in 0.000295115 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3388.51 tests/s, 13554.04 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7489jpuv\nStarted\n.\nFinished in 0.000306236 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3265.46 tests/s, 13061.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcmshxx30\nStarted\n.\nFinished in 0.00034548 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2894.52 tests/s, 11578.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcj_ltx7p\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpcj_ltx7p.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004742978 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.84 tests/s, 421.68 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpl4xozjtm\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpl4xozjtm.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004629544 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.00 tests/s, 432.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_t0r4m_r\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_t0r4m_r.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.00503666 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.54 tests/s, 397.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp4jfcdwis\nStarted\n.\nFinished in 0.000330311 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3027.45 tests/s, 12109.80 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc7qycb1l\nStarted\n.\nFinished in 0.00032946 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3035.27 tests/s, 12141.08 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxh30msqv\nStarted\n.\nFinished in 0.000317847 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3146.17 tests/s, 12584.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6vr745xt\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp6vr745xt.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005793513 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.61 tests/s, 345.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpq6ajh_d8\nStarted\n.\nFinished in 0.000408658 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2447.03 tests/s, 9788.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpn2n768bj\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpn2n768bj.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006461909 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    154.75 tests/s, 309.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_lf5a654\nStarted\n.\nFinished in 0.0003669 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2725.54 tests/s, 10902.15 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprzgvdjgq\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmprzgvdjgq.rb:11:in `test_add'\n     \
    \ 8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_add\n   \
    \  10:     candidate = method(:add)\n  => 11:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     12:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     14:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.004394524 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    227.56 tests/s, 227.56 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    if num.even? && index.odd?\n\
    \      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprxnqn1i2\nStarted\n.\nFinished in 0.000306337 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3264.38 tests/s, 13057.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvxv4nwf_\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpvxv4nwf_.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.00539286 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.43 tests/s, 370.86 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwcr2d8y2\nStarted\n.\nFinished in 0.000314572 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3178.92 tests/s, 12715.69 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm9kxl7xq\nStarted\n.\nFinished in 0.000283162 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3531.55 tests/s, 14126.19 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplpjhm2pk\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmplpjhm2pk.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004581714 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.26 tests/s, 436.52 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpqhpq5xv0\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqhpq5xv0.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004612572 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.80 tests/s, 433.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpa5_i1t68\nStarted\n.\nFinished in 0.000322546 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3100.33 tests/s, 12401.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyo2snyqd\nStarted\n.\nFinished in 0.000371449 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2692.16 tests/s, 10768.64 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph4cmoul4\nStarted\n.\nFinished in 0.000357492 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2797.27 tests/s, 11189.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9ht9cpqv\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9ht9cpqv.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006586774 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    151.82 tests/s, 303.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmb_xczx8\nStarted\n.\nFinished in 0.00031918 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3133.03 tests/s, 12532.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvaixiz4t\nStarted\n.\nFinished in 0.000394271 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2536.33 tests/s, 10145.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpz5z97afu\nStarted\n.\nFinished in 0.000309201 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3234.14 tests/s, 12936.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_7a90y_v\nStarted\n.\nFinished in 0.000426802 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2343.01 tests/s, 9372.03 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpos20ps5v\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpos20ps5v.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005775199 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    173.15 tests/s, 346.31 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpidfnxm1x\nStarted\n.\nFinished in 0.000327216 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3056.09 tests/s, 12224.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoauuh3_p\nStarted\n.\nFinished in 0.000374584 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2669.63 tests/s, 10678.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpda6hfe58\nStarted\n.\nFinished in 0.000304102 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3288.37 tests/s, 13153.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpipmk7ce9\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpipmk7ce9.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004741145 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.92 tests/s, 421.84 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplp_jc_py\nStarted\n.\nFinished in 0.000363434 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2751.53 tests/s, 11006.12 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_dvimbxo\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_dvimbxo.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006157417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.41 tests/s, 324.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2wg9iz5a\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp2wg9iz5a.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004803621 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.18 tests/s, 416.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0406wffl\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp0406wffl.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004421533 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.17 tests/s, 452.33 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp9q01coz4\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp9q01coz4.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004773755 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.48 tests/s, 418.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkbzmtwpc\nStarted\n.\nFinished in 0.000399701 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2501.87 tests/s, 10007.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuuv3gevb\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpuuv3gevb.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004856962 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.89 tests/s, 411.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpi91v4bxe\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpi91v4bxe.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005191721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    192.61 tests/s, 385.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpkgfapgbi\nStarted\n.\nFinished in 0.000328217 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3046.76 tests/s, 12187.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).inject(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxmk8j3gy\nStarted\n.\nFinished in 0.000313611 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3188.66 tests/s, 12754.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpp5m91urr\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpp5m91urr.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004517283 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.37 tests/s, 442.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    sum += num if num.even? && index.odd?\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnnmadde_\nStarted\n.\nFinished in 0.000367231 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2723.08 tests/s, 10892.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5myiomzp\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp5myiomzp.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004589079 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    217.91 tests/s, 435.82 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxmhu_2pf\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxmhu_2pf.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004756224 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    210.25 tests/s, 420.50 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo2r5e2aa\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpo2r5e2aa.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004954025 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.86 tests/s, 403.71 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp032pj6v0\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp032pj6v0.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004860989 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.72 tests/s, 411.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpjx9i9wdz\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpjx9i9wdz.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005051167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.97 tests/s, 395.95 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0) { |sum, i| sum + i }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmzy2g46q\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpmzy2g46q.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004713403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.16 tests/s, 424.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd9l6_bko\nStarted\n.\nFinished in 0.000322386 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3101.87 tests/s, 12407.49 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_pypmkvr\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_pypmkvr.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005530379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.82 tests/s, 361.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp7y0th5lr\nStarted\n.\nFinished in 0.000332355 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3008.83 tests/s, 12035.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpm1o08vci\nStarted\n.\nFinished in 0.000312286 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3202.19 tests/s, 12808.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpru8fjuda\nStarted\n.\nFinished in 0.000425681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2349.18 tests/s, 9396.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp37tw84n_\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp37tw84n_.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004689478 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.24 tests/s, 426.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp17bxyegp\nStarted\n.\nFinished in 0.000364014 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2747.15 tests/s, 10988.59 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvyo1bhlr\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpvyo1bhlr.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006709415 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.04 tests/s, 298.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplkfyia_x\nStarted\n.\nFinished in 0.000428896 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2331.57 tests/s, 9326.27 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpchoxgf_q\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpchoxgf_q.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005888532 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    169.82 tests/s, 339.64 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpoln57e7u\nStarted\n.\nFinished in 0.00060617 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1649.70 tests/s, 6598.81 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp79880vr_\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp79880vr_.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005552269 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.11 tests/s, 360.21 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp12k1chst\nStarted\n.\nFinished in 0.000333337 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2999.97 tests/s, 11999.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp6avxnovf\nStarted\n.\nFinished in 0.000382769 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2612.54 tests/s, 10450.17 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpq0iejoop\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpq0iejoop.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004554934 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.54 tests/s, 439.08 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmph6jtpdtg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmph6jtpdtg.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004521211 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.18 tests/s, 442.36 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnnwd_grw\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpnnwd_grw.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.00482893 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.09 tests/s, 414.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdcq5mhbm\nStarted\n.\nFinished in 0.000324489 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3081.77 tests/s, 12327.07 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_6j9cwm9\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_6j9cwm9.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004791109 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    208.72 tests/s, 417.44 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp1p0ftuz9\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp1p0ftuz9.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004964584 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.43 tests/s, 402.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt8_ytd1e\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpt8_ytd1e.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005078018 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    196.93 tests/s, 393.85 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0) { |sum, n| sum + n }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpboip07p_\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpboip07p_.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005161105 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.76 tests/s, 387.51 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8n9a9bdp\nStarted\n.\nFinished in 0.000351862 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2842.02 tests/s, 11368.09 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2udu1hfa\nStarted\n.\nFinished in 0.000439717 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2274.19 tests/s, 9096.76 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpseimmzf5\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpseimmzf5.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005306698 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    188.44 tests/s, 376.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp18e6dtm1\nStarted\n.\nFinished in 0.000342684 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2918.14 tests/s, 11672.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp03r8_yel\nStarted\n.\nFinished in 0.000394562 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2534.46 tests/s, 10137.82 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3x0wbm66\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3x0wbm66.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006708093 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    149.07 tests/s, 298.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpagitzr7n\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpagitzr7n.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004778074 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.29 tests/s, 418.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppr192m0t\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmppr192m0t.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004859377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.79 tests/s, 411.58 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwsb_xfte\nStarted\n.\nFinished in 0.000813419 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1229.38 tests/s, 4917.51 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpddtcmb0z\nStarted\n.\nFinished in 0.000398899 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2506.90 tests/s, 10027.60 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdaj_ho5_\nStarted\n.\nFinished in 0.001062418 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    941.25 tests/s, 3765.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpschk7gy9\nStarted\n.\nFinished in 0.000352893 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2833.72 tests/s, 11334.88 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |n, i| n.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp2me9h2sa\nStarted\n.\nFinished in 0.000332776 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3005.02 tests/s, 12020.10 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    sum += num if num.even? && index.odd?\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpb46r0g5d\nStarted\n.\nFinished in 0.000416864 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2398.86 tests/s, 9595.46 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |e, i| e.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpc5ebwehg\nStarted\n.\nFinished in 0.000476836 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2097.16 tests/s, 8388.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp5_hoei4i\nStarted\n.\nFinished in 0.000338086 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2957.83 tests/s, 11831.31 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplftcwhs1\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmplftcwhs1.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004537382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    220.39 tests/s, 440.78 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpuvlixkt7\nStarted\n.\nFinished in 0.000316445 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3160.11 tests/s, 12640.43 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmps5c38cex\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmps5c38cex.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004660873 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    214.55 tests/s, 429.10 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpo27kzpos\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpo27kzpos.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004782222 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.11 tests/s, 418.22 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpamk7ex_q\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpamk7ex_q.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005459716 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    183.16 tests/s, 366.32 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp79jel6t6\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp79jel6t6.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004833859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.87 tests/s, 413.75 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0) { |sum, n| sum + n }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpnulybnzg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpnulybnzg.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004775719 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.39 tests/s, 418.79 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwmvg0xa_\nStarted\n.\nFinished in 0.000320682 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3118.35 tests/s, 12473.42 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpd3p1p3ex\nStarted\n.\nFinished in 0.000385024 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2597.24 tests/s, 10388.96 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe0mqyo3_\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpe0mqyo3_.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004934828 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.64 tests/s, 405.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7th5yqr8\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp7th5yqr8.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004811757 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    207.82 tests/s, 415.65 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg3e_dg8h\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpg3e_dg8h.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005280689 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    189.37 tests/s, 378.74 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpg92n02uy\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpg92n02uy.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.00486652 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.49 tests/s, 410.97 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp5q1gh7m1\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp5q1gh7m1.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004987167 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.51 tests/s, 401.03 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmprv81d_sy\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmprv81d_sy.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004993961 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.24 tests/s, 400.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwjtgi34z\nStarted\n.\nFinished in 0.000335179 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2983.48 tests/s, 11933.92 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt6u0pptj\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpt6u0pptj.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005214173 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.78 tests/s, 383.57 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6ppv8t_p\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp6ppv8t_p.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.00505754 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.72 tests/s, 395.45 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index{|x,i|\
    \ x.even? && i.odd?}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_n4p94nc\nStarted\n.\nFinished in 0.000340059 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2940.67 tests/s, 11762.66 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpt_jidd8m\nStarted\n.\nFinished in 0.000392097 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2550.39 tests/s, 10201.56 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpvdb420av\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpvdb420av.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004770549 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.62 tests/s, 419.24 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpccqe6bq4\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpccqe6bq4.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004684448 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.47 tests/s, 426.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmphsl_9581\nStarted\n.\nFinished in 0.000479693 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2084.67 tests/s, 8338.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpf2yr0_sl\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpf2yr0_sl.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005256333 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.25 tests/s, 380.49 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph8lzgx_w\nStarted\n.\nFinished in 0.000353033 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2832.60 tests/s, 11330.39 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp0buc6tj7\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp0buc6tj7.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004614728 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.70 tests/s, 433.39 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_1if5t5e\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_1if5t5e.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004687514 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    213.33 tests/s, 426.67 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpipuijvz6\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpipuijvz6.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004931543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.78 tests/s, 405.55 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpi335zwu4\nStarted\n.\nFinished in 0.000319912 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3125.86 tests/s, 12503.44 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqkl2w54y\nStarted\n.\nFinished in 0.000369344 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2707.50 tests/s, 10830.01 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpuzr_ydi9\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpuzr_ydi9.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004926633 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    202.98 tests/s, 405.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.each_with_index.map\
    \ { |x, i| x if i.odd? && x.even? }.compact.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmppuz2sfbq\nStarted\n.\nFinished in 0.000333577 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2997.81 tests/s, 11991.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmps88b355r\nStarted\n.\nFinished in 0.000348476 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2869.64 tests/s, 11478.55 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp8d3qokz4\nStarted\n.\nFinished in 0.000303681 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3292.93 tests/s, 13171.72 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwjjqm83f\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwjjqm83f.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005410793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    184.82 tests/s, 369.63 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpyv323kp4\nStarted\n.\nFinished in 0.000332494 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3007.57 tests/s, 12030.29 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmph9cbrcdd\nStarted\n.\nFinished in 0.000337234 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2965.30 tests/s, 11861.20 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpbm2klonm\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpbm2klonm.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005139102 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.59 tests/s, 389.17 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmppyaix1zd\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmppyaix1zd.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004878543 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    204.98 tests/s, 409.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpm4xlnahg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpm4xlnahg.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005809644 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    172.13 tests/s, 344.26 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpe5xf3uif\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpe5xf3uif.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005652798 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    176.90 tests/s, 353.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpj8jbyc8e\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpj8jbyc8e.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005236836 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    190.95 tests/s, 381.91 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpmkpwd7jv\nStarted\n.\nFinished in 0.000336833 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2968.83 tests/s, 11875.32 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpem0naxql\nStarted\n.\nFinished in 0.000383741 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2605.92 tests/s, 10423.70 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpxjea3_eo\nStarted\n.\nFinished in 0.000400133 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2499.17 tests/s, 9996.68 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.values_at(*\
    \ lst.each_index.select {|i| i.even?}).inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpkm1qfekk\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpkm1qfekk.rb:11:in `test_add'\n     \
    \ 8: class TestHumanEval < Test::Unit::TestCase\n      9:   def test_add\n   \
    \  10:     candidate = method(:add)\n  => 11:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     12:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     14:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.005051498 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    197.96 tests/s, 197.96 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp2p02mwh6\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp2p02mwh6.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005584069 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    179.08 tests/s, 358.16 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx0qkqm5a\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpx0qkqm5a.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005944697 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    168.22 tests/s, 336.43 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpmez9knpg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpmez9knpg.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004405854 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    226.97 tests/s, 453.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpxj_k8pxq\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpxj_k8pxq.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005042151 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    198.33 tests/s, 396.66 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpretg0swb\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpretg0swb.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006130727 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    163.11 tests/s, 326.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqaamhhf0\nStarted\n.\nFinished in 0.000364776 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2741.41 tests/s, 10965.63 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp3r_85vsu\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp3r_85vsu.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004716017 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.04 tests/s, 424.09 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp524jp7mf\nStarted\n.\nFinished in 0.000341021 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2932.37 tests/s, 11729.48 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpzo3wsinp\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpzo3wsinp.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004782101 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    209.11 tests/s, 418.23 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.each_with_index.inject(0)\
    \ { |sum, (num, idx)| idx.odd? && num.even? ? sum + num : sum }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwx5eqpr1\nStarted\n.\nFinished in 0.000355779 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2810.73 tests/s, 11242.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp_jmlqvw8\nStarted\n.\nFinished in 0.000344778 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2900.42 tests/s, 11601.67 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpazofcdsl\nStarted\n.\nFinished in 0.000328679 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3042.48 tests/s, 12169.93 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpv9viy1pw\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpv9viy1pw.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004695529 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.97 tests/s, 425.94 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmphk1qsh_d\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmphk1qsh_d.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004859095 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    205.80 tests/s, 411.60 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpcu0u95ci\nStarted\n.\nFinished in 0.000334819 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2986.69 tests/s, 11946.75 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpcnzvgfq7\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpcnzvgfq7.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004837264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.73 tests/s, 413.46 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  sum\
    \ = 0\n  lst.each_with_index do |num, index|\n    if num.even? && index.odd?\n\
    \      sum += num\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpqogez83h\nStarted\n.\nFinished in 0.000322696 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3098.89 tests/s, 12395.57 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwj__t8bj\nStarted\n.\nFinished in 0.000354206 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2823.22 tests/s, 11292.86 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptubvos3c\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmptubvos3c.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004922726 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.14 tests/s, 406.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpz9fguo8e\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpz9fguo8e.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004514118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.53 tests/s, 443.05 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpytb3t21e\nStarted\n.\nFinished in 0.00040938 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2442.72 tests/s, 9770.87 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp83pc9qd2\nStarted\n.\nFinished in 0.000516621 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    1935.65 tests/s, 7742.62 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp78c3r05c\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp78c3r05c.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006804264 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    146.97 tests/s, 293.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpdlux36ww\nStarted\n.\nFinished in 0.000323148 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3094.56 tests/s, 12378.23 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwq883fct\nStarted\n.\nFinished in 0.000349548 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2860.84 tests/s, 11443.35 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpzvq278bj\nStarted\n.\nFinished in 0.000322878 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3097.15 tests/s, 12388.58 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpms2ol7b3\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpms2ol7b3.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005156174 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    193.94 tests/s, 387.88 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpx__ebyzj\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpx__ebyzj.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004847054 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.31 tests/s, 412.62 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpo6afkqia\nStarted\n.\nFinished in 0.000336822 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2968.93 tests/s, 11875.71 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp141pkzmd\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp141pkzmd.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004516041 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    221.43 tests/s, 442.87 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmprqaink0i\nStarted\n.\nFinished in 0.000360457 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2774.26 tests/s, 11097.02 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpv9e00sw6\nStarted\n.\nFinished in 0.000337104 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2966.44 tests/s, 11865.77 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp79bqh8rm\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp79bqh8rm.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.00514289 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    194.44 tests/s, 388.89 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpvoycnmqh\nStarted\n.\nFinished in 0.000379783 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2633.08 tests/s, 10532.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp_15zkb8c\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp_15zkb8c.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004905554 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    203.85 tests/s, 407.70 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmptrsljcpu\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmptrsljcpu.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004974995 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.01 tests/s, 402.01 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpgseb62mf\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpgseb62mf.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004713813 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    212.14 tests/s, 424.28 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpx_jp_d09\nStarted\n.\nFinished in 0.00034527 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2896.28 tests/s, 11585.14 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplc9yb1kc\nStarted\n.\nFinished in 0.000301907 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3312.28 tests/s, 13249.11 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ {|x, i| x.even? && i.odd?}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpfx0tfkjk\nStarted\n.\nFinished in 0.000323668 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3089.59 tests/s, 12358.34 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp77hnaz62\nStarted\n.\nFinished in 0.000310915 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3216.31 tests/s, 12865.25 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpua_5i617\nStarted\n.\nFinished in 0.0003347 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2987.75 tests/s, 11951.00 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmplbflojkw\nStarted\n.\nFinished in 0.000307349 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3253.63 tests/s, 13014.52 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpnav_q8q0\nStarted\n.\nFinished in 0.000316966 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3154.91 tests/s, 12619.65 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwvb_1kfb\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwvb_1kfb.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004554262 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    219.57 tests/s, 439.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp025e4t0h\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp025e4t0h.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004968403 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    201.27 tests/s, 402.54 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmpwmsivjdy\nStarted\n.\nFinished in 0.000353605 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    2828.01 tests/s, 11312.06 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp7ppstx8h\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp7ppstx8h.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004577427 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    218.46 tests/s, 436.93 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: ''
  stderr: "Loaded suite /tmp/tmp1rp6ww0m\nStarted\n.\nFinished in 0.000311737 seconds.\n\
    -------------------------------------------------------------------------------\n\
    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    100% passed\n-------------------------------------------------------------------------------\n\
    3207.83 tests/s, 12831.33 assertions/s\n"
  exit_code: 0
  status: OK
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.inject(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmplcpgqt5g\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmplcpgqt5g.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005003518 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    199.86 tests/s, 399.72 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(0, :+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmp6ka9fn1g\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp6ka9fn1g.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.005383802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    185.74 tests/s, 371.48 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpt3744nvz\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpt3744nvz.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006282443 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    159.17 tests/s, 318.35 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpiheem3yc\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpiheem3yc.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.004998178 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    200.07 tests/s, 400.15 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\ndef add(lst)\n  lst.select.with_index\
    \ { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  stdout: "Loaded suite /tmp/tmpwv9gccdg\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpwv9gccdg.rb:12:in `test_add'\n     \
    \ 9:   def test_add\n     10:     candidate = method(:add)\n     11:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 12:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     13:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     14:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     15:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n===============================================================================\n\
    \nFinished in 0.006648802 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.40 tests/s, 300.81 assertions/s\n"
  stderr: ''
  exit_code: 1
  status: Exception
